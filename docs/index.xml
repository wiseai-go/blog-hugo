<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WiseAI的博客</title>
    <link>https://blog.wiseai.cn/</link>
    <description>Recent content on WiseAI的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>陇ICP备15000157号</copyright>
    <lastBuildDate>Wed, 29 Jun 2022 11:33:14 +0800</lastBuildDate><atom:link href="https://blog.wiseai.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
    <title>基本类型和运算符</title>
    <link>https://blog.wiseai.cn/post/golang/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
    <pubDate>Wed, 29 Jun 2022 11:33:14 +0800</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/golang/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
    <description>
        &lt;h1 id=&#34;45-基本类型和运算符&#34;&gt;4.5 基本类型和运算符&lt;/h1&gt;
&lt;p&gt;我们将在这个部分讲解有关布尔型、数字型和字符型的相关知识。&lt;/p&gt;
&lt;p&gt;表达式是一种特定的类型的值，它可以由其它的值以及运算符组合而成。每个类型都定义了可以和自己结合的运算符集合，如果你使用了不在这个集合中的运算符，则会在编译时获得编译错误。&lt;/p&gt;
&lt;p&gt;一元运算符只可以用于一个值的操作（作为后缀），而二元运算符则可以和两个值或者操作数结合（作为中缀）。&lt;/p&gt;
&lt;p&gt;只有两个类型相同的值才可以和二元运算符结合，另外要注意的是，Go 是强类型语言，因此不会进行隐式转换，任何不同类型之间的转换都必须显式说明（第 4.2 节）。Go 不存在像 C 那样的运算符重载，表达式的解析顺序是从左至右。&lt;/p&gt;
&lt;p&gt;你可以在第 4.5.3 节找到有关运算符优先级的相关信息，优先级越高的运算符在条件相同的情况下将被优先执行。但是你可以通过使用括号将其中的表达式括起来，以人为地提升某个表达式的运算优先级。&lt;/p&gt;
&lt;h2 id=&#34;451-布尔类型-bool&#34;&gt;4.5.1 布尔类型 bool&lt;/h2&gt;
&lt;p&gt;一个简单的例子：&lt;code&gt;var b bool = true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;布尔型的值只可以是常量 true 或者 false。&lt;/p&gt;
&lt;p&gt;两个类型相同的值可以使用相等 &lt;code&gt;==&lt;/code&gt; 或者不等 &lt;code&gt;!=&lt;/code&gt; 运算符来进行比较并获得一个布尔型的值。&lt;/p&gt;
&lt;p&gt;当相等运算符两边的值是完全相同的值的时候会返回 &lt;code&gt;true&lt;/code&gt;，否则返回 &lt;code&gt;false&lt;/code&gt;，并且只有在两个的值的类型相同的情况下才可以使用。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var aVar = 10
aVar == 5 -&amp;gt; false
aVar == 10 -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当不等运算符两边的值是不同的时候会返回 &lt;code&gt;true&lt;/code&gt;，否则返回 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var aVar = 10
aVar != 5 -&amp;gt; true
aVar != 10 -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go 对于值之间的比较有非常严格的限制，只有两个类型相同的值才可以进行比较，如果值的类型是接口（interface，&lt;a href=&#34;11.0.md&#34;&gt;第 11 章&lt;/a&gt;），它们也必须都实现了相同的接口。如果其中一个值是常量，那么另外一个值的类型必须和该常量类型相兼容的。如果以上条件都不满足，则其中一个值的类型必须在被转换为和另外一个值的类型相同之后才可以进行比较。&lt;/p&gt;
&lt;p&gt;布尔型的常量和变量也可以通过和逻辑运算符（非 &lt;code&gt;!&lt;/code&gt;、与 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、或 &lt;code&gt;||&lt;/code&gt;）结合来产生另外一个布尔值，这样的逻辑语句就其本身而言，并不是一个完整的 Go 语句。&lt;/p&gt;
&lt;p&gt;逻辑值可以被用于条件结构中的条件语句（&lt;a href=&#34;05.0.md&#34;&gt;第 5 章&lt;/a&gt;），以便测试某个条件是否满足。另外，与 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、或 &lt;code&gt;||&lt;/code&gt; 与相等 &lt;code&gt;==&lt;/code&gt; 或不等 &lt;code&gt;!=&lt;/code&gt; 属于二元运算符，而非 &lt;code&gt;!&lt;/code&gt; 属于一元运算符。在接下来的内容中，我们会使用 T 来代表条件符合的语句，用 F 来代表条件不符合的语句。&lt;/p&gt;
&lt;p&gt;Go 语言中包含以下逻辑运算符：&lt;/p&gt;
&lt;p&gt;非运算符：&lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;!T -&amp;gt; false
!F -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非运算符用于取得和布尔值相反的结果。&lt;/p&gt;
&lt;p&gt;与运算符：&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;T &amp;amp;&amp;amp; T -&amp;gt; true
T &amp;amp;&amp;amp; F -&amp;gt; false
F &amp;amp;&amp;amp; T -&amp;gt; false
F &amp;amp;&amp;amp; F -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只有当两边的值都为 &lt;code&gt;true&lt;/code&gt; 的时候，和运算符的结果才是 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;或运算符：&lt;code&gt;||&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;T || T -&amp;gt; true
T || F -&amp;gt; true
F || T -&amp;gt; true
F || F -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只有当两边的值都为 &lt;code&gt;false&lt;/code&gt; 的时候，或运算符的结果才是 &lt;code&gt;false&lt;/code&gt;，其中任意一边的值为 &lt;code&gt;true&lt;/code&gt; 就能够使得该表达式的结果为 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;||&lt;/code&gt; 是具有快捷性质的运算符，当运算符左边表达式的值已经能够决定整个表达式的值的时候（&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 左边的值为 &lt;code&gt;false&lt;/code&gt;，&lt;code&gt;||&lt;/code&gt; 左边的值为 &lt;code&gt;true&lt;/code&gt;），运算符右边的表达式将不会被执行。利用这个性质，如果你有多个条件判断，应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算。&lt;/p&gt;
&lt;p&gt;利用括号同样可以升级某个表达式的运算优先级。&lt;/p&gt;
&lt;p&gt;在格式化输出时，你可以使用 &lt;code&gt;%t&lt;/code&gt; 来表示你要输出的值为布尔型。&lt;/p&gt;
&lt;p&gt;布尔值（以及任何结果为布尔值的表达式）最常用在条件结构的条件语句中，例如：if、for 和 switch 结构（第 5 章）。&lt;/p&gt;
&lt;p&gt;对于布尔值的好的命名能够很好地提升代码的可读性，例如以 &lt;code&gt;is&lt;/code&gt; 或者 &lt;code&gt;Is&lt;/code&gt; 开头的 &lt;code&gt;isSorted&lt;/code&gt;、&lt;code&gt;isFinished&lt;/code&gt;、&lt;code&gt;isVisible&lt;/code&gt;，使用这样的命名能够在阅读代码的获得阅读正常语句一样的良好体验，例如标准库中的 &lt;code&gt;unicode.IsDigit(ch)&lt;/code&gt;（&lt;a href=&#34;04.5.md&#34;&gt;第 4.5.5 节&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;452-数字类型&#34;&gt;4.5.2 数字类型&lt;/h2&gt;
&lt;h3 id=&#34;4521-整型-int-和浮点型-float&#34;&gt;4.5.2.1 整型 int 和浮点型 float&lt;/h3&gt;
&lt;p&gt;Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码（详情参见 &lt;a href=&#34;http://en.wikipedia.org/wiki/Two&#39;s_complement&#34;&gt;二的补码&lt;/a&gt; 页面）。&lt;/p&gt;
&lt;p&gt;Go 也有基于架构的类型，例如：&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;uint&lt;/code&gt; 和 &lt;code&gt;uintptr&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些类型的长度都是根据运行程序所在的操作系统类型所决定的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; 和 &lt;code&gt;uint&lt;/code&gt; 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uintptr&lt;/code&gt; 的长度被设定为足够存放一个指针即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 语言中没有 float 类型。（Go语言中只有 &lt;code&gt;float32&lt;/code&gt; 和 &lt;code&gt;float64&lt;/code&gt;）没有 double 类型。&lt;/p&gt;
&lt;p&gt;与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：&lt;/p&gt;
&lt;p&gt;整数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int8&lt;/code&gt;（-128 -&amp;gt; 127）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int16&lt;/code&gt;（-32768 -&amp;gt; 32767）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int32&lt;/code&gt;（-2,147,483,648 -&amp;gt; 2,147,483,647）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int64&lt;/code&gt;（-9,223,372,036,854,775,808 -&amp;gt; 9,223,372,036,854,775,807）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无符号整数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uint8&lt;/code&gt;（0 -&amp;gt; 255）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint16&lt;/code&gt;（0 -&amp;gt; 65,535）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint32&lt;/code&gt;（0 -&amp;gt; 4,294,967,295）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint64&lt;/code&gt;（0 -&amp;gt; 18,446,744,073,709,551,615）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浮点型（IEEE-754 标准）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt;（+- 1e-45 -&amp;gt; +- 3.4 * 1e38）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float64&lt;/code&gt;（+- 5 * 1e-324 -&amp;gt; 107 * 1e308）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt; 型是计算最快的一种类型。&lt;/p&gt;
&lt;p&gt;整型的零值为 &lt;code&gt;0&lt;/code&gt;，浮点型的零值为 &lt;code&gt;0.0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float32&lt;/code&gt; 精确到小数点后 7 位，&lt;code&gt;float64&lt;/code&gt; 精确到小数点后 15 位。由于精确度的缘故，你在使用 &lt;code&gt;==&lt;/code&gt; 或者 &lt;code&gt;!=&lt;/code&gt; 来比较浮点数时应当非常小心。你最好在正式使用前测试对于精确度要求较高的运算。&lt;/p&gt;
&lt;p&gt;你应该尽可能地使用 &lt;code&gt;float64&lt;/code&gt;，因为 &lt;code&gt;math&lt;/code&gt; 包中所有有关数学运算的函数都会要求接收这个类型。&lt;/p&gt;
&lt;p&gt;你可以通过增加前缀 0 来表示 8 进制数（如：077），增加前缀 0x 来表示 16 进制数（如：&lt;code&gt;0xFF&lt;/code&gt;），以及使用 &lt;code&gt;e&lt;/code&gt; 来表示 10 的连乘（如： 1e3 = 1000，或者 6.022e23 = 6.022 x 1e23）。&lt;/p&gt;
&lt;p&gt;你可以使用 &lt;code&gt;a := uint64(0)&lt;/code&gt; 来同时完成类型转换和赋值操作，这样 &lt;code&gt;a&lt;/code&gt; 的类型就是 &lt;code&gt;uint64&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用，下面这个程序很好地解释了这个现象（该程序无法通过编译）：&lt;/p&gt;
&lt;p&gt;示例 4.8 &lt;a href=&#34;examples/chapter_4/type_mixing.go&#34;&gt;type_mixing.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

func main() {
	var a int
	var b int32
	a = 15
	b = a + a	 // 编译错误
	b = b + 5    // 因为 5 是常量，所以可以通过编译
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你尝试编译该程序，则将得到编译错误 &lt;code&gt;cannot use a + a (type int) as type int32 in assignment&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同样地，&lt;code&gt;int16&lt;/code&gt;  也不能够被隐式转换为 &lt;code&gt;int32&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面这个程序展示了通过显式转换来避免这个问题（&lt;a href=&#34;04.2.md&#34;&gt;第 4.2 节&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;示例 4.9 &lt;a href=&#34;examples/chapter_4/casting.go&#34;&gt;casting.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import &amp;#34;fmt&amp;#34;

func main() {
	var n int16 = 34
	var m int32
	// compiler error: cannot use n (type int16) as type int32 in assignment
	//m = n
	m = int32(n)

	fmt.Printf(&amp;#34;32 bit int is: %d\n&amp;#34;, m)
	fmt.Printf(&amp;#34;16 bit int is: %d\n&amp;#34;, n)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;32 bit int is: 34
16 bit int is: 34
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;格式化说明符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在格式化字符串里，&lt;code&gt;%d&lt;/code&gt; 用于格式化整数（&lt;code&gt;%x&lt;/code&gt; 和 &lt;code&gt;%X&lt;/code&gt; 用于格式化 16 进制表示的数字），&lt;code&gt;%g&lt;/code&gt; 用于格式化浮点型（&lt;code&gt;%f&lt;/code&gt; 输出浮点数，&lt;code&gt;%e&lt;/code&gt; 输出科学计数表示法），&lt;code&gt;%0nd&lt;/code&gt; 用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%n.mg&lt;/code&gt; 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 &lt;code&gt;%5.2e&lt;/code&gt; 来输出 3.4 的结果为 &lt;code&gt;3.40e+00&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字值转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当进行类似 &lt;code&gt;a32bitInt = int32(a32Float)&lt;/code&gt; 的转换时，小数点后的数字将被丢弃。这种情况一般发生当从取值范围较大的类型转换为取值范围较小的类型时，或者你可以写一个专门用于处理类型转换的函数来确保没有发生精度的丢失。下面这个例子展示如何安全地从 &lt;code&gt;int&lt;/code&gt; 型转换为 &lt;code&gt;int8&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Uint8FromInt(n int) (uint8, error) {
	if 0 &amp;lt;= n &amp;amp;&amp;amp; n &amp;lt;= math.MaxUint8 { // conversion is safe
		return uint8(n), nil
	}
	return 0, fmt.Errorf(&amp;#34;%d is out of the uint8 range&amp;#34;, n)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者安全地从 &lt;code&gt;float64&lt;/code&gt; 转换为 &lt;code&gt;int&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func IntFromFloat64(x float64) int {
	if math.MinInt32 &amp;lt;= x &amp;amp;&amp;amp; x &amp;lt;= math.MaxInt32 { // x lies in the integer range
		whole, fraction := math.Modf(x)
		if fraction &amp;gt;= 0.5 {
			whole++
		}
		return int(whole)
	}
	panic(fmt.Sprintf(&amp;#34;%g is out of the int32 range&amp;#34;, x))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过如果你实际存的数字超出你要转换到的类型的取值范围的话，则会引发 &lt;code&gt;panic&lt;/code&gt;（&lt;a href=&#34;./13.2.md&#34;&gt;第 13.2 节&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题 4.1&lt;/strong&gt; &lt;code&gt;int&lt;/code&gt; 和 &lt;code&gt;int64&lt;/code&gt; 是相同的类型吗？&lt;/p&gt;
&lt;h3 id=&#34;4522-复数&#34;&gt;4.5.2.2 复数&lt;/h3&gt;
&lt;p&gt;Go 拥有以下复数类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;complex64 (32 位实数和虚数)
complex128 (64 位实数和虚数)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复数使用 &lt;code&gt;re+imI&lt;/code&gt; 来表示，其中 &lt;code&gt;re&lt;/code&gt; 代表实数部分，&lt;code&gt;im&lt;/code&gt; 代表虚数部分，&lt;code&gt;I&lt;/code&gt; 代表根号负 1。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var c1 complex64 = 5 + 10i
fmt.Printf(&amp;#34;The value is: %v&amp;#34;, c1)
// 输出： 5 + 10i
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果 &lt;code&gt;re&lt;/code&gt; 和 &lt;code&gt;im&lt;/code&gt; 的类型均为 &lt;code&gt;float32&lt;/code&gt;，那么类型为 &lt;code&gt;complex64&lt;/code&gt; 的复数 &lt;code&gt;c&lt;/code&gt; 可以通过以下方式来获得：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c = complex(re, im)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数 &lt;code&gt;real(c)&lt;/code&gt; 和 &lt;code&gt;imag(c)&lt;/code&gt; 可以分别获得相应的实数和虚数部分。&lt;/p&gt;
&lt;p&gt;在使用格式化说明符时，可以使用 &lt;code&gt;%v&lt;/code&gt; 来表示复数，但当你希望只表示其中的一个部分的时候需要使用 &lt;code&gt;%f&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;复数支持和其它数字类型一样的运算。当你使用等号 &lt;code&gt;==&lt;/code&gt; 或者不等号 &lt;code&gt;!=&lt;/code&gt; 对复数进行比较运算时，注意对精确度的把握。&lt;code&gt;cmath&lt;/code&gt; 包中包含了一些操作复数的公共方法。如果你对内存的要求不是特别高，最好使用 &lt;code&gt;complex128&lt;/code&gt; 作为计算类型，因为相关函数都使用这个类型的参数。&lt;/p&gt;
&lt;h3 id=&#34;4523-位运算&#34;&gt;4.5.2.3 位运算&lt;/h3&gt;
&lt;p&gt;位运算只能用于整数类型的变量，且需当它们拥有等长位模式时。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%b&lt;/code&gt; 是用于表示位的格式化标识符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二元运算符&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按位与 &lt;code&gt;&amp;amp;&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;对应位置上的值经过和运算结果，具体参见和运算符（第 4.5.1 节），并将 T (true) 替换为 &lt;code&gt;1&lt;/code&gt;，将 F (false) 替换为 &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 &amp;amp; 1 -&amp;gt; 1
  1 &amp;amp; 0 -&amp;gt; 0
  0 &amp;amp; 1 -&amp;gt; 0
  0 &amp;amp; 0 -&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位或 &lt;code&gt;|&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;对应位置上的值经过或运算结果，具体参见或运算符（第 4.5.1 节），并将 T (true) 替换为 &lt;code&gt;1&lt;/code&gt;，将 F (false) 替换为 &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 | 1 -&amp;gt; 1
  1 | 0 -&amp;gt; 1
  0 | 1 -&amp;gt; 1
  0 | 0 -&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位异或 &lt;code&gt;^&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;对应位置上的值根据以下规则组合：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 ^ 1 -&amp;gt; 0
  1 ^ 0 -&amp;gt; 1
  0 ^ 1 -&amp;gt; 1
  0 ^ 0 -&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位清除 &lt;code&gt;&amp;amp;^&lt;/code&gt;：将指定位置上的值设置为 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import &amp;#34;fmt&amp;#34;
func main() {
	var x uint8 = 15
	var y uint8 = 4
	fmt.Printf(&amp;#34;%08b\n&amp;#34;, x &amp;amp;^ y);  // 00001011
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一元运算符&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按位补足 &lt;code&gt;^&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;该运算符与异或运算符一同使用，即 &lt;code&gt;m^x&lt;/code&gt;，对于无符号 &lt;code&gt;x&lt;/code&gt; 使用 “全部位设置为 1” 的规则，对于有符号 &lt;code&gt;x&lt;/code&gt; 时使用 &lt;code&gt;m=-1&lt;/code&gt;。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ^10 = -01 ^ 10 = -11
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位左移 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用法：&lt;code&gt;bitP &amp;lt;&amp;lt; n&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bitP&lt;/code&gt; 的位向左移动 &lt;code&gt;n&lt;/code&gt; 位，右侧空白部分使用 0 填充；如果 &lt;code&gt;n&lt;/code&gt; 等于 2，则结果是 2 的相应倍数，即 2 的 &lt;code&gt;n&lt;/code&gt; 次方。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 &amp;lt;&amp;lt; 10 // 等于 1 KB
  1 &amp;lt;&amp;lt; 20 // 等于 1 MB
  1 &amp;lt;&amp;lt; 30 // 等于 1 GB
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位右移 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法：&lt;code&gt;bitP &amp;gt;&amp;gt; n&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitP&lt;/code&gt; 的位向右移动 &lt;code&gt;n&lt;/code&gt; 位，左侧空白部分使用 0 填充；如果 &lt;code&gt;n&lt;/code&gt; 等于 2，则结果是当前值除以 2 的 n 次方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当希望把结果赋值给第一个操作数时，可以简写为 &lt;code&gt;a &amp;lt;&amp;lt;= 2&lt;/code&gt; 或者 &lt;code&gt;b ^= a &amp;amp; 0xffffffff&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位左移常见实现存储单位的用例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用位左移与 &lt;code&gt;iota&lt;/code&gt; 计数配合可优雅地实现存储单位的常量枚举：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type ByteSize float64
const (
	_ = iota // 通过赋值给空白标识符来忽略值
	KB ByteSize = 1&amp;lt;&amp;lt;(10*iota)
	MB
	GB
	TB
	PB
	EB
	ZB
	YB
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;在通讯中使用位左移表示标识的用例&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type BitFlag int
const (
	Active BitFlag = 1 &amp;lt;&amp;lt; iota // 1 &amp;lt;&amp;lt; 0 == 1
	Send // 1 &amp;lt;&amp;lt; 1 == 2
	Receive // 1 &amp;lt;&amp;lt; 2 == 4
)

flag := Active | Send // == 3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4524-逻辑运算符&#34;&gt;4.5.2.4 逻辑运算符&lt;/h3&gt;
&lt;p&gt;Go 中拥有以下逻辑运算符：&lt;code&gt;==&lt;/code&gt;、&lt;code&gt;!=&lt;/code&gt;（第 4.5.1 节）、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 &lt;code&gt;bool&lt;/code&gt;。例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b3 := 10 &amp;gt; 5 // b3 is true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4525-算术运算符&#34;&gt;4.5.2.5 算术运算符&lt;/h3&gt;
&lt;p&gt;常见可用于整数和浮点数的二元运算符有 &lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（相对于一般规则而言，Go 在进行字符串拼接时允许使用对运算符 &lt;code&gt;+&lt;/code&gt; 的重载，但 Go 本身不允许开发者进行自定义的运算符重载）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; 对于整数运算而言，结果依旧为整数，例如：&lt;code&gt;9 / 4 -&amp;gt; 2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;取余运算符只能作用于整数：&lt;code&gt;9 % 4 -&amp;gt; 1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;整数除以 0 可能导致程序崩溃，将会导致运行时的恐慌状态（如果除以 0 的行为在编译时就能被捕捉到，则会引发编译错误）；&lt;a href=&#34;13.0.md&#34;&gt;第 13 章&lt;/a&gt; 将会详细讲解如何正确地处理此类情况。&lt;/p&gt;
&lt;p&gt;浮点数除以 &lt;code&gt;0.0&lt;/code&gt; 会返回一个无穷尽的结果，使用 &lt;code&gt;+Inf&lt;/code&gt; 表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;练习 4.4&lt;/strong&gt; 尝试编译 &lt;a href=&#34;exercises/chapter_4/divby0.go&#34;&gt;divby0.go&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你可以将语句 &lt;code&gt;b = b + a&lt;/code&gt; 简写为 &lt;code&gt;b += a&lt;/code&gt;，同样的写法也可用于 &lt;code&gt;-=&lt;/code&gt;、&lt;code&gt;*=&lt;/code&gt;、&lt;code&gt;/=&lt;/code&gt;、&lt;code&gt;%=&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于整数和浮点数，你可以使用一元运算符 &lt;code&gt;++&lt;/code&gt;（递增）和 &lt;code&gt;--&lt;/code&gt;（递减），但只能用于后缀：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i++ -&amp;gt; i += 1 -&amp;gt; i = i + 1
i-- -&amp;gt; i -= 1 -&amp;gt; i = i - 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时，带有 &lt;code&gt;++&lt;/code&gt; 和 &lt;code&gt;--&lt;/code&gt; 的只能作为语句，而非表达式，因此 &lt;code&gt;n = i++&lt;/code&gt; 这种写法是无效的，其它像 &lt;code&gt;f(i++)&lt;/code&gt; 或者 &lt;code&gt;a[i]=b[i++]&lt;/code&gt; 这些可以用于 C、C++ 和 Java 中的写法在 Go 中也是不允许的。&lt;/p&gt;
&lt;p&gt;在运算时 &lt;strong&gt;溢出&lt;/strong&gt; 不会产生错误，Go 会简单地将超出位数抛弃。如果你需要范围无限大的整数或者有理数（意味着只被限制于计算机内存），你可以使用标准库中的 &lt;code&gt;big&lt;/code&gt; 包，该包提供了类似 &lt;code&gt;big.Int&lt;/code&gt; 和 &lt;code&gt;big.Rat&lt;/code&gt; 这样的类型（&lt;a href=&#34;09.4.md&#34;&gt;第 9.4 节&lt;/a&gt;）。&lt;/p&gt;
&lt;h3 id=&#34;4526-随机数&#34;&gt;4.5.2.6 随机数&lt;/h3&gt;
&lt;p&gt;一些像游戏或者统计学类的应用需要用到随机数。&lt;code&gt;rand&lt;/code&gt; 包实现了伪随机数的生成。&lt;/p&gt;
&lt;p&gt;示例 4.10 &lt;a href=&#34;examples/chapter_4/random.go&#34;&gt;random.go&lt;/a&gt; 演示了如何生成 10 个非负随机数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;math/rand&amp;#34;
	&amp;#34;time&amp;#34;
)

func main() {
	for i := 0; i &amp;lt; 10; i++ {
		a := rand.Int()
		fmt.Printf(&amp;#34;%d / &amp;#34;, a)
	}
	for i := 0; i &amp;lt; 5; i++ {
		r := rand.Intn(8)
		fmt.Printf(&amp;#34;%d / &amp;#34;, r)
	}
	fmt.Println()
	timens := int64(time.Now().Nanosecond())
	rand.Seed(timens)
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Printf(&amp;#34;%2.2f / &amp;#34;, 100*rand.Float32())
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可能的输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 /
1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10
/ 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数 &lt;code&gt;rand.Float32&lt;/code&gt; 和 &lt;code&gt;rand.Float64&lt;/code&gt; 返回介于 $[0.0, 1.0)$ 之间的伪随机数，其中包括 &lt;code&gt;0.0&lt;/code&gt; 但不包括 &lt;code&gt;1.0&lt;/code&gt;。函数 &lt;code&gt;rand.Intn&lt;/code&gt; 返回介于 $[0, n)$ 之间的伪随机数。&lt;/p&gt;
&lt;p&gt;你可以使用 &lt;code&gt;rand.Seed(value)&lt;/code&gt; 函数来提供伪随机数的生成种子，一般情况下都会使用当前时间的纳秒级数字（第 4.8 节）。&lt;/p&gt;
&lt;h2 id=&#34;453-运算符与优先级&#34;&gt;4.5.3 运算符与优先级&lt;/h2&gt;
&lt;p&gt;有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;优先级 	运算符
 7 		^ !
 6 		* / % &amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;amp; &amp;amp;^
 5 		+ - | ^
 4 		== != &amp;lt; &amp;lt;= &amp;gt;= &amp;gt;
 3 		&amp;lt;-
 2 		&amp;amp;&amp;amp;
 1 		||
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。&lt;/p&gt;
&lt;h2 id=&#34;454-类型别名&#34;&gt;4.5.4 类型别名&lt;/h2&gt;
&lt;p&gt;当你在使用某个类型时，你可以给它起另一个名字，然后你就可以在你的代码中使用新的名字（用于简化名称或解决名称冲突）。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;type TZ int&lt;/code&gt; 中，&lt;code&gt;TZ&lt;/code&gt; 就是 &lt;code&gt;int&lt;/code&gt; 类型的新名称（用于表示程序中的时区），然后就可以使用 &lt;code&gt;TZ&lt;/code&gt; 来操作 &lt;code&gt;int&lt;/code&gt; 类型的数据。&lt;/p&gt;
&lt;p&gt;示例 4.11 &lt;a href=&#34;examples/chapter_4/type.go&#34;&gt;type.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import &amp;#34;fmt&amp;#34;

type TZ int

func main() {
	var a, b TZ = 3, 4
	c := a + b
	fmt.Printf(&amp;#34;c has the value: %d&amp;#34;, c) // 输出：c has the value: 7
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上，类型别名得到的新类型并非和原类型完全相同，新类型不会拥有原类型所附带的方法（&lt;a href=&#34;./10.0.md&#34;&gt;第 10 章&lt;/a&gt;）；&lt;code&gt;TZ&lt;/code&gt; 可以自定义一个方法用来输出更加人性化的时区信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;练习 4.5&lt;/strong&gt; 定义一个 &lt;code&gt;string&lt;/code&gt; 的类型别名 &lt;code&gt;Rope&lt;/code&gt;，并声明一个该类型的变量。&lt;/p&gt;
&lt;h2 id=&#34;455-字符类型&#34;&gt;4.5.5 字符类型&lt;/h2&gt;
&lt;p&gt;严格来说，这并不是 Go 语言的一个类型，字符只是整数的特殊用例。&lt;code&gt;byte&lt;/code&gt; 类型是 &lt;code&gt;uint8&lt;/code&gt; 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题。例如：&lt;code&gt;var ch byte = &#39;A&#39;&lt;/code&gt;；字符使用单引号括起来。&lt;/p&gt;
&lt;p&gt;在 ASCII 码表中，&lt;code&gt;&#39;A&#39;&lt;/code&gt; 的值是 &lt;code&gt;65&lt;/code&gt;，而使用 16 进制表示则为 &lt;code&gt;41&lt;/code&gt;，所以下面的写法是等效的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var ch byte = 65 或 var ch byte = &amp;#39;\x41&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（&lt;code&gt;\x&lt;/code&gt; 总是紧跟着长度为 2 的 16 进制数）&lt;/p&gt;
&lt;p&gt;另外一种可能的写法是 &lt;code&gt;\&lt;/code&gt; 后面紧跟着长度为 3 的 8 进制数，例如：&lt;code&gt;\377&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不过 Go 同样支持 Unicode（UTF-8），因此字符同样称为 Unicode 代码点或者 runes，并在内存中使用 &lt;code&gt;int&lt;/code&gt; 来表示。在文档中，一般使用格式 &lt;code&gt;U+hhhh&lt;/code&gt; 来表示，其中 &lt;code&gt;h&lt;/code&gt; 表示一个 16 进制数。其实 &lt;code&gt;rune&lt;/code&gt; 也是 Go 当中的一个类型，并且是 &lt;code&gt;int32&lt;/code&gt; 的别名。&lt;/p&gt;
&lt;p&gt;在书写 Unicode 字符时，需要在 16 进制数之前加上前缀 &lt;code&gt;\u&lt;/code&gt; 或者 &lt;code&gt;\U&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为 Unicode 至少占用 2 个字节，所以我们使用 &lt;code&gt;int16&lt;/code&gt; 或者 &lt;code&gt;int&lt;/code&gt; 类型来表示。如果需要使用到 4 字节，则会加上 &lt;code&gt;\U&lt;/code&gt; 前缀；前缀 &lt;code&gt;\u&lt;/code&gt; 则总是紧跟着长度为 4 的 16 进制数，前缀 &lt;code&gt;\U&lt;/code&gt; 紧跟着长度为 8 的 16 进制数。&lt;/p&gt;
&lt;p&gt;示例 4.12 &lt;a href=&#34;examples/chapter_4/char.go&#34;&gt;char.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var ch int = &amp;#39;\u0041&amp;#39;
var ch2 int = &amp;#39;\u03B2&amp;#39;
var ch3 int = &amp;#39;\U00101234&amp;#39;
fmt.Printf(&amp;#34;%d - %d - %d\n&amp;#34;, ch, ch2, ch3) // integer
fmt.Printf(&amp;#34;%c - %c - %c\n&amp;#34;, ch, ch2, ch3) // character
fmt.Printf(&amp;#34;%X - %X - %X\n&amp;#34;, ch, ch2, ch3) // UTF-8 bytes
fmt.Printf(&amp;#34;%U - %U - %U&amp;#34;, ch, ch2, ch3) // UTF-8 code point
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;65 - 946 - 1053236
A - β - r
41 - 3B2 - 101234
U+0041 - U+03B2 - U+101234
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;格式化说明符 &lt;code&gt;%c&lt;/code&gt; 用于表示字符；当和字符配合使用时，&lt;code&gt;%v&lt;/code&gt; 或 &lt;code&gt;%d&lt;/code&gt; 会输出用于表示该字符的整数；&lt;code&gt;%U&lt;/code&gt; 输出格式为 &lt;code&gt;U+hhhh&lt;/code&gt; 的字符串（另一个示例见&lt;a href=&#34;./05.4.md&#34;&gt;第 5.4.4 节&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;包 &lt;code&gt;unicode&lt;/code&gt; 包含了一些针对测试字符的非常有用的函数（其中 &lt;code&gt;ch&lt;/code&gt; 代表字符）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断是否为字母：&lt;code&gt;unicode.IsLetter(ch)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;判断是否为数字：&lt;code&gt;unicode.IsDigit(ch)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;判断是否为空白符号：&lt;code&gt;unicode.IsSpace(ch)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数返回单个布尔值。包 &lt;code&gt;utf8&lt;/code&gt; 拥有更多与 &lt;code&gt;rune&lt;/code&gt; 类型相关的函数。&lt;/p&gt;
&lt;p&gt;（ &lt;strong&gt;译者注：关于类型的相关讲解，可参考视频教程 《Go编程基础》 第 3 课：&lt;a href=&#34;https://github.com/Unknwon/go-fundamental-programming/blob/master/lectures/lecture3.md&#34;&gt;类型与变量&lt;/a&gt;&lt;/strong&gt; ）&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Go程序的变量</title>
    <link>https://blog.wiseai.cn/post/golang/%E5%8F%98%E9%87%8F/</link>
    <pubDate>Mon, 27 Jun 2022 11:46:14 +0800</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/golang/%E5%8F%98%E9%87%8F/</guid>
    <description>
        &lt;h1 id=&#34;44-变量&#34;&gt;4.4 变量&lt;/h1&gt;
&lt;h2 id=&#34;441-简介&#34;&gt;4.4.1 简介&lt;/h2&gt;
&lt;p&gt;声明变量的一般形式是使用 &lt;code&gt;var&lt;/code&gt; 关键字：&lt;code&gt;var identifier type&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，Go 和许多编程语言不同，它在声明变量时将变量的类型放在变量的名称之后。Go 为什么要选择这么做呢？&lt;/p&gt;
&lt;p&gt;首先，它是为了避免像 C 语言中那样含糊不清的声明形式，例如：&lt;code&gt;int* a, b;&lt;/code&gt;。在这个例子中，只有 &lt;code&gt;a&lt;/code&gt; 是指针而 &lt;code&gt;b&lt;/code&gt; 不是。如果你想要这两个变量都是指针，则需要将它们分开书写（你可以在 &lt;a href=&#34;http://blog.golang.org/2010/07/gos-declaration-syntax.html&#34;&gt;Go 语言的声明语法&lt;/a&gt; 页面找到有关于这个话题的更多讨论）。&lt;/p&gt;
&lt;p&gt;而在 Go 中，则可以很轻松地将它们都声明为指针类型：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var a, b *int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其次，这种语法能够按照从左至右的顺序阅读，使得代码更加容易理解。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var a int
var b bool
var str string
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你也可以改写成这种形式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var (
	a int
	b bool
	str string
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种因式分解关键字的写法一般用于声明全局变量。&lt;/p&gt;
&lt;p&gt;当一个变量被声明之后，系统自动赋予它该类型的零值：&lt;code&gt;int&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;float32(64)&lt;/code&gt; 为 &lt;code&gt;0.0&lt;/code&gt;，bool 为 &lt;code&gt;false&lt;/code&gt;，&lt;code&gt;string&lt;/code&gt; 为空字符串，指针为 &lt;code&gt;nil&lt;/code&gt;。记住，所有的内存在 Go 中都是经过初始化的。&lt;/p&gt;
&lt;p&gt;变量的命名规则遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：&lt;code&gt;numShips&lt;/code&gt; 和 &lt;code&gt;startDate&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但如果你的全局变量希望能够被外部包所使用，则需要将首个单词的首字母也大写（第 4.2 节：可见性规则）。&lt;/p&gt;
&lt;p&gt;一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域。如果一个变量在函数体外声明，则被认为是全局变量，可以在整个包甚至外部包（被导出后）使用，不管你声明在哪个源文件里或在哪个源文件里调用该变量。&lt;/p&gt;
&lt;p&gt;在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。在 &lt;a href=&#34;05.0.md&#34;&gt;第 5 章&lt;/a&gt;，我们将会学习到像 &lt;code&gt;if&lt;/code&gt; 和 &lt;code&gt;for&lt;/code&gt; 这些控制结构，而在这些结构中声明的变量的作用域只在相应的代码块内。一般情况下，局部变量的作用域可以通过代码块（用大括号括起来的部分）判断。&lt;/p&gt;
&lt;p&gt;尽管变量的标识符必须是唯一的，但你可以在某个代码块的内层代码块中使用相同名称的变量，则此时外部的同名变量将会暂时隐藏（结束内部代码块的执行后隐藏的外部同名变量又会出现，而内部同名变量则被释放），你任何的操作都只会影响内部代码块的局部变量。&lt;/p&gt;
&lt;p&gt;变量可以编译期间就被赋值，赋值给变量使用运算符等号 &lt;code&gt;=&lt;/code&gt;，当然你也可以在运行时对变量进行赋值操作。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = 15
b = false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般情况下，当变量a和变量b之间类型相同时，才能进行如 &lt;code&gt;a = b&lt;/code&gt; 的赋值。&lt;/p&gt;
&lt;p&gt;声明与赋值（初始化）语句也可以组合起来。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var identifier [type] = value
var a int = 15
var i = 5
var b bool = false
var str string = &amp;#34;Go says hello to the world!&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 Go 编译器的智商已经高到可以根据变量的值来自动推断其类型，这有点像 Ruby 和 Python 这类动态语言，只不过它们是在运行时进行推断，而 Go 是在编译时就已经完成推断过程。因此，你还可以使用下面的这些形式来声明及初始化变量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var a = 15
var b = false
var str = &amp;#34;Go says hello to the world!&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var (
	a = 15
	b = false
	str = &amp;#34;Go says hello to the world!&amp;#34;
	numShips = 50
	city string
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过自动推断类型并不是任何时候都适用的，当你想要给变量的类型并不是自动推断出的某种类型时，你还是需要显式指定变量的类型，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var n int64 = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然而，&lt;code&gt;var a&lt;/code&gt; 这种语法是不正确的，因为编译器没有任何可以用于自动推断类型的依据。变量的类型也可以在运行时实现自动推断，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var (
	HOME = os.Getenv(&amp;#34;HOME&amp;#34;)
	USER = os.Getenv(&amp;#34;USER&amp;#34;)
	GOROOT = os.Getenv(&amp;#34;GOROOT&amp;#34;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种写法主要用于声明包级别的全局变量，当你在函数体内声明局部变量时，应使用简短声明语法 &lt;code&gt;:=&lt;/code&gt;，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a := 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面这个例子展示了如何通过 &lt;code&gt;runtime&lt;/code&gt; 包在运行时获取所在的操作系统类型，以及如何通过 &lt;code&gt;os&lt;/code&gt; 包中的函数 &lt;code&gt;os.Getenv()&lt;/code&gt; 来获取环境变量中的值，并保存到 &lt;code&gt;string&lt;/code&gt; 类型的局部变量 &lt;code&gt;path&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;示例 4.5 &lt;a href=&#34;examples/chapter_4/goos.go&#34;&gt;goos.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import (
	&amp;#34;fmt&amp;#34;
   &amp;#34;runtime&amp;#34;
	&amp;#34;os&amp;#34;
)
func main() {
	var goos string = runtime.GOOS
	fmt.Printf(&amp;#34;The operating system is: %s\n&amp;#34;, goos)
	path := os.Getenv(&amp;#34;PATH&amp;#34;)
	fmt.Printf(&amp;#34;Path is %s\n&amp;#34;, path)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你在 Windows 下运行这段代码，则会输出 &lt;code&gt;The operating system is: windows&lt;/code&gt; 以及相应的环境变量的值；如果你在 Linux 下运行这段代码，则会输出 &lt;code&gt;The operating system is: linux&lt;/code&gt; 以及相应的的环境变量的值。&lt;/p&gt;
&lt;p&gt;这里用到了 &lt;code&gt;Printf&lt;/code&gt; 的格式化输出的功能（&lt;a href=&#34;./04.4.md&#34;&gt;第 4.4.3 节&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;442-值类型和引用类型&#34;&gt;4.4.2 值类型和引用类型&lt;/h2&gt;
&lt;p&gt;程序中所用到的内存在计算机中使用一堆箱子来表示（这也是人们在讲解它的时候的画法），这些箱子被称为“字”。根据不同的处理器以及操作系统类型，所有的字都具有 32 位（4 字节）或 64 位（8 字节）的相同长度；所有的字都使用相关的内存地址来进行表示（以十六进制数表示）。&lt;/p&gt;
&lt;p&gt;所有像 &lt;code&gt;int&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;bool&lt;/code&gt; 和 &lt;code&gt;string&lt;/code&gt; 这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值：&lt;/p&gt;
&lt;img src=&#34;http://static.wiseai.cn/img/4.4.2_fig4.1.jpg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;另外，像数组（&lt;a href=&#34;./07.0.md&#34;&gt;第 7 章&lt;/a&gt;）和结构（&lt;a href=&#34;./10.0md&#34;&gt;第 10 章&lt;/a&gt;）这些复合类型也是值类型。&lt;/p&gt;
&lt;p&gt;当使用等号 &lt;code&gt;=&lt;/code&gt; 将一个变量的值赋值给另一个变量时，如：&lt;code&gt;j = i&lt;/code&gt;，实际上是在内存中将 &lt;code&gt;i&lt;/code&gt; 的值进行了拷贝：&lt;/p&gt;
&lt;img src=&#34;http://static.wiseai.cn/img/4.4.2_fig4.2.jpg&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;你可以通过 &lt;code&gt;&amp;amp;i&lt;/code&gt; 来获取变量 &lt;code&gt;i&lt;/code&gt; 的内存地址（&lt;a href=&#34;./04.9.md&#34;&gt;第 4.9 节&lt;/a&gt;），例如：&lt;code&gt;0xf840000040&lt;/code&gt;（每次的地址都可能不一样）。值类型的变量的值存储在栈中。&lt;/p&gt;
&lt;p&gt;内存地址会根据机器的不同而有所不同，甚至相同的程序在不同的机器上执行后也会有不同的内存地址。因为每台机器可能有不同的存储器布局，并且位置分配也可能不同。&lt;/p&gt;
&lt;p&gt;更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存。&lt;/p&gt;
&lt;p&gt;一个引用类型的变量 &lt;code&gt;r1&lt;/code&gt; 存储的是 &lt;code&gt;r1&lt;/code&gt; 的值所在的内存地址（数字），或内存地址中第一个字所在的位置。&lt;/p&gt;
&lt;img src=&#34;http://static.wiseai.cn/img/4.4.2_fig4.3.jpg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;这个内存地址被称之为指针（你可以从上图中很清晰地看到，&lt;a href=&#34;./04.9.md&#34;&gt;第 4.9 节&lt;/a&gt; 将会详细说明），这个指针实际上也被存在另外的某一个字中。&lt;/p&gt;
&lt;p&gt;同一个引用类型的指针指向的多个字可以是在连续的内存地址中（内存布局是连续的），这也是计算效率最高的一种存储形式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址。&lt;/p&gt;
&lt;p&gt;当使用赋值语句 &lt;code&gt;r2 = r1&lt;/code&gt; 时，只有引用（地址）被复制。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;r1&lt;/code&gt; 的值被改变了，那么这个值的所有引用都会指向被修改后的内容，在这个例子中，&lt;code&gt;r2&lt;/code&gt; 也会受到影响。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，指针（&lt;a href=&#34;./04.9.md&#34;&gt;第 4.9 节&lt;/a&gt;）属于引用类型，其它的引用类型还包括 slices（&lt;a href=&#34;07.0.md&#34;&gt;第 7 章&lt;/a&gt;），maps（&lt;a href=&#34;08.0.md&#34;&gt;第 8 章&lt;/a&gt;）和 channel（&lt;a href=&#34;13.0.md&#34;&gt;第 13 章&lt;/a&gt;）。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。&lt;/p&gt;
&lt;h2 id=&#34;443-打印&#34;&gt;4.4.3 打印&lt;/h2&gt;
&lt;p&gt;函数 &lt;code&gt;Printf&lt;/code&gt; 可以在 &lt;code&gt;fmt&lt;/code&gt; 包外部使用，这是因为它以大写字母 P 开头，该函数主要用于打印输出到控制台。通常使用的格式化字符串作为第一个参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Printf(format string, list of variables to be printed)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在示例 4.5 中，格式化字符串为：&lt;code&gt;&amp;quot;The operating system is: %s\n&amp;quot;&lt;/code&gt;。
这个格式化字符串可以含有一个或多个的格式化标识符，例如：&lt;code&gt;%..&lt;/code&gt;，其中 &lt;code&gt;..&lt;/code&gt; 可以被不同类型所对应的标识符替换，如 &lt;code&gt;%s&lt;/code&gt; 代表字符串标识符、&lt;code&gt;%v&lt;/code&gt; 代表使用类型的默认输出格式的标识符。这些标识符所对应的值从格式化字符串后的第一个逗号开始按照相同顺序添加，如果参数超过 1 个则同样需要使用逗号分隔。使用这些占位符可以很好地控制格式化输出的文本。
函数 &lt;code&gt;fmt.Sprintf&lt;/code&gt; 与 &lt;code&gt;Printf&lt;/code&gt; 的作用是完全相同的，不过前者将格式化后的字符串以返回值的形式返回给调用者，因此你可以在程序中使用包含变量的字符串，具体例子可以参见示例 15.4 &lt;a href=&#34;examples/chapter_15/simple_tcp_server.go&#34;&gt;simple_tcp_server.go&lt;/a&gt;。
函数 &lt;code&gt;fmt.Print&lt;/code&gt; 和 &lt;code&gt;fmt.Println&lt;/code&gt; 会自动使用格式化标识符 &lt;code&gt;%v&lt;/code&gt; 对字符串进行格式化，两者都会在每个参数之间自动增加空格，而后者还会在字符串的最后加上一个换行符。例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fmt.Print(&amp;#34;Hello:&amp;#34;, 23)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将输出：&lt;code&gt;Hello: 23&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;444-简短形式使用--赋值操作符&#34;&gt;4.4.4 简短形式，使用 := 赋值操作符&lt;/h2&gt;
&lt;p&gt;我们知道可以在变量的初始化时省略变量的类型而由系统自动推断，而这个时候再在 Example 4.4.1 的最后一个声明语句写上 &lt;code&gt;var&lt;/code&gt; 关键字就显得有些多余了，因此我们可以将它们简写为 &lt;code&gt;a := 50&lt;/code&gt; 或 &lt;code&gt;b := false&lt;/code&gt;。
&lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的类型（&lt;code&gt;int&lt;/code&gt; 和 &lt;code&gt;bool&lt;/code&gt;）将由编译器自动推断。
这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 &lt;code&gt;:=&lt;/code&gt; 可以高效地创建一个新的变量，称之为初始化声明。
&lt;strong&gt;注意事项&lt;/strong&gt;
如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：&lt;code&gt;a := 20&lt;/code&gt; 就是不被允许的，编译器会提示错误 &lt;code&gt;no new variables on left side of :=&lt;/code&gt;，但是 &lt;code&gt;a = 20&lt;/code&gt; 是可以的，因为这是给相同的变量赋予一个新的值。
如果你在定义变量 &lt;code&gt;a&lt;/code&gt; 之前使用它，则会得到编译错误 &lt;code&gt;undefined: a&lt;/code&gt;。
如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 &lt;code&gt;a&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
   var a string = &amp;#34;abc&amp;#34;
   fmt.Println(&amp;#34;hello, world&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试编译这段代码将得到错误 &lt;code&gt;a declared and not used&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此外，单纯地给 &lt;code&gt;a&lt;/code&gt; 赋值也是不够的，这个值必须被使用，所以使用 &lt;code&gt;fmt.Println(&amp;quot;hello, world&amp;quot;, a)&lt;/code&gt; 会移除错误。&lt;/p&gt;
&lt;p&gt;但是全局变量是允许声明但不使用。&lt;/p&gt;
&lt;p&gt;其他的简短形式为：&lt;/p&gt;
&lt;p&gt;同一类型的多个变量可以声明在同一行，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var a, b, c int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(这是将类型写在标识符后面的一个重要原因)&lt;/p&gt;
&lt;p&gt;多变量可以在同一行进行赋值，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a, b, c = 5, 7, &amp;#34;abc&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面这行假设了变量 &lt;code&gt;a&lt;/code&gt;，&lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt; 都已经被声明，否则的话应该这样使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a, b, c := 5, 7, &amp;#34;abc&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;右边的这些值以相同的顺序赋值给左边的变量，所以 &lt;code&gt;a&lt;/code&gt; 的值是 &lt;code&gt;5&lt;/code&gt;， &lt;code&gt;b&lt;/code&gt; 的值是 &lt;code&gt;7&lt;/code&gt;，&lt;code&gt;c&lt;/code&gt; 的值是 &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这被称为 &lt;strong&gt;并行&lt;/strong&gt; 或 &lt;strong&gt;同时&lt;/strong&gt; 赋值。&lt;/p&gt;
&lt;p&gt;如果你想要交换两个变量的值，则可以简单地使用 &lt;code&gt;a, b = b, a&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(在 Go 语言中，这样省去了使用交换函数的必要)&lt;/p&gt;
&lt;p&gt;空白标识符 &lt;code&gt;_&lt;/code&gt; 也被用于抛弃值，如值 &lt;code&gt;5&lt;/code&gt; 在：&lt;code&gt;_, b = 5, 7&lt;/code&gt; 中被抛弃。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt; 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。&lt;/p&gt;
&lt;p&gt;并行赋值也被用于当一个函数返回多个返回值时，比如这里的 &lt;code&gt;val&lt;/code&gt; 和错误 &lt;code&gt;err&lt;/code&gt; 是通过调用 &lt;code&gt;Func1&lt;/code&gt; 函数同时得到：&lt;code&gt;val, err = Func1(var1)&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;445-init-函数&#34;&gt;4.4.5 init 函数&lt;/h2&gt;
&lt;p&gt;变量除了可以在全局声明中初始化，也可以在 &lt;code&gt;init()&lt;/code&gt; 函数中初始化。这是一类非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 &lt;code&gt;main()&lt;/code&gt; 函数高。&lt;/p&gt;
&lt;p&gt;每个源文件可以包含多个 &lt;code&gt;init()&lt;/code&gt; 函数，同一个源文件中的 &lt;code&gt;init()&lt;/code&gt; 函数会按照从上到下的顺序执行，如果一个包有多个源文件包含 &lt;code&gt;init()&lt;/code&gt; 函数的话，则官方鼓励但不保证以文件名的顺序调用。初始化总是以单线程并且按照包的依赖关系顺序执行。&lt;/p&gt;
&lt;p&gt;一个可能的用途是在开始执行程序之前对数据进行检验或修复，以保证程序状态的正确性。&lt;/p&gt;
&lt;p&gt;示例 4.6 &lt;a href=&#34;examples/chapter_4/init.go&#34;&gt;init.go&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package trans
import &amp;#34;math&amp;#34;
var Pi float64
func init() {
   Pi = 4 * math.Atan(1) // init() function computes Pi
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在它的 &lt;code&gt;init()&lt;/code&gt; 函数中计算变量 &lt;code&gt;Pi&lt;/code&gt; 的初始值。&lt;/p&gt;
&lt;p&gt;示例 4.7 &lt;a href=&#34;examples/chapter_4/user_init.go&#34;&gt;user_init.go&lt;/a&gt; 中导入了包 &lt;code&gt;trans&lt;/code&gt;（需要 &lt;code&gt;init.go&lt;/code&gt; 目录为 &lt;code&gt;./trans/init.go&lt;/code&gt; ）并且使用到了变量 &lt;code&gt;Pi&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import (
   &amp;#34;fmt&amp;#34;
   &amp;#34;./trans&amp;#34;
)
var twoPi = 2 * trans.Pi
func main() {
   fmt.Printf(&amp;#34;2*Pi = %g\n&amp;#34;, twoPi) // 2*Pi = 6.283185307179586
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;init()&lt;/code&gt; 函数也经常被用在当一个程序开始之前调用后台执行的 goroutine，如下面这个例子当中的 &lt;code&gt;backend()&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func init() {
   // setup preparations
   go backend()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;练习&lt;/strong&gt; 推断以下程序的输出，并解释你的答案，然后编译并执行它们。&lt;/p&gt;
&lt;p&gt;练习 4.1 &lt;a href=&#34;examples/chapter_4/local_scope.go&#34;&gt;local_scope.go&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
var a = &amp;#34;G&amp;#34;
func main() {
   n()
   m()
   n()
}
func n() { print(a) }
func m() {
   a := &amp;#34;O&amp;#34;
   print(a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;练习 4.2 &lt;a href=&#34;examples/chapter_4/global_scope.go&#34;&gt;global_scope.go&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
var a = &amp;#34;G&amp;#34;
func main() {
   n()
   m()
   n()
}
func n() {
   print(a)
}
func m() {
   a = &amp;#34;O&amp;#34;
   print(a)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;练习 4.3 &lt;a href=&#34;examples/chapter_4/function_calls_function.go&#34;&gt;function_calls_function.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
var a string
func main() {
   a = &amp;#34;G&amp;#34;
   print(a)
   f1()
}
func f1() {
   a := &amp;#34;O&amp;#34;
   print(a)
   f2()
}
func f2() {
   print(a)
}
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>Go程序的常量</title>
    <link>https://blog.wiseai.cn/post/golang/%E5%B8%B8%E9%87%8F/</link>
    <pubDate>Mon, 27 Jun 2022 11:36:06 +0800</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/golang/%E5%B8%B8%E9%87%8F/</guid>
    <description>
        &lt;h1 id=&#34;43-常量&#34;&gt;4.3 常量&lt;/h1&gt;
&lt;p&gt;常量使用关键字 &lt;code&gt;const&lt;/code&gt; 定义，用于存储不会改变的数据。&lt;/p&gt;
&lt;p&gt;存储在常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。&lt;/p&gt;
&lt;p&gt;常量的定义格式：&lt;code&gt;const identifier [type] = value&lt;/code&gt;，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const Pi = 3.14159
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Go 语言中，你可以省略类型说明符 &lt;code&gt;[type]&lt;/code&gt;，因为编译器可以根据变量的值来推断其类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显式类型定义： &lt;code&gt;const b string = &amp;quot;abc&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隐式类型定义： &lt;code&gt;const b = &amp;quot;abc&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个没有指定类型的常量被使用时，会根据其使用环境而推断出它所需要具备的类型。换句话说，未定义类型的常量会在必要时刻根据上下文来获得相关类型。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var n int
f(n + 5) // 无类型的数字型常量 “5” 它的类型在这里变成了 int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常量的值必须是能够在编译时就能够确定的；你可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确的做法：&lt;code&gt;const c1 = 2/3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;错误的做法：&lt;code&gt;const c2 = getNumber()&lt;/code&gt; // 引发构建错误: &lt;code&gt;getNumber() used as value&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;因为在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如：&lt;code&gt;len()&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const Ln2 = 0.693147180559945309417232121458\
			176568075500134360255254120680009
const Log2E = 1/Ln2 // this is a precise reciprocal
const Billion = 1e9 // float constant
const hardEight = (1 &amp;lt;&amp;lt; 100) &amp;gt;&amp;gt; 97
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据上面的例子我们可以看到，反斜杠 &lt;code&gt;\&lt;/code&gt; 可以在常量表达式中作为多行的连接符使用。&lt;/p&gt;
&lt;p&gt;与各种类型的数字型变量相比，你无需担心常量之间的类型转换问题，因为它们都是非常理想的数字。&lt;/p&gt;
&lt;p&gt;不过需要注意的是，当常量赋值给一个精度过小的数字型变量时，可能会因为无法正确表达常量所代表的数值而导致溢出，这会在编译期间就引发错误。另外，常量也允许使用并行赋值的形式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const beef, two, c = &amp;#34;eat&amp;#34;, 2, &amp;#34;veg&amp;#34;
const Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = 1, 2, 3, 4, 5, 6
const (
	Monday, Tuesday, Wednesday = 1, 2, 3
	Thursday, Friday, Saturday = 4, 5, 6
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常量还可以用作枚举：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
	Unknown = 0
	Female = 1
	Male = 2
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，数字 &lt;code&gt;0&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;2&lt;/code&gt; 分别代表未知性别、女性和男性。这些枚举值可以用于测试某个变量或常量的实际值，比如使用 switch/case 结构（&lt;a href=&#34;./05.3.md&#34;&gt;第 5.3 节&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;iota&lt;/code&gt; 可以被用作枚举值：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
	a = iota
	b = iota
	c = iota
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一个 &lt;code&gt;iota&lt;/code&gt; 等于 0，每当 &lt;code&gt;iota&lt;/code&gt; 在新的一行被使用时，它的值都会自动加 1，并且没有赋值的常量默认会应用上一行的赋值表达式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 赋值一个常量时，之后没赋值的常量都会应用上一行的赋值表达式
const (
	a = iota  // a = 0
	b         // b = 1
	c         // c = 2
	d = 5     // d = 5   
	e         // e = 5
)
// 赋值两个常量，iota 只会增长一次，而不会因为使用了两次就增长两次
const (
	Apple, Banana = iota + 1, iota + 2 // Apple=1 Banana=2
	Cherimoya, Durian                  // Cherimoya=2 Durian=3
	Elderberry, Fig                    // Elderberry=3, Fig=4
)
// 使用 iota 结合 位运算 表示资源状态的使用案例
const (
	Open = 1 &amp;lt;&amp;lt; iota  // 0001
	Close             // 0010
	Pending           // 0100
)
const (
	_           = iota             // 使用 _ 忽略不需要的 iota
	KB = 1 &amp;lt;&amp;lt; (10 * iota)          // 1 &amp;lt;&amp;lt; (10*1)
	MB                             // 1 &amp;lt;&amp;lt; (10*2)
	GB                             // 1 &amp;lt;&amp;lt; (10*3)
	TB                             // 1 &amp;lt;&amp;lt; (10*4)
	PB                             // 1 &amp;lt;&amp;lt; (10*5)
	EB                             // 1 &amp;lt;&amp;lt; (10*6)
	ZB                             // 1 &amp;lt;&amp;lt; (10*7)
	YB                             // 1 &amp;lt;&amp;lt; (10*8)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（ &lt;strong&gt;译者注：关于 &lt;code&gt;iota&lt;/code&gt; 的使用涉及到非常复杂多样的情况，这里作者解释的并不清晰，因为很难对 &lt;code&gt;iota&lt;/code&gt; 的用法进行直观的文字描述。如希望进一步了解，请观看视频教程 &lt;a href=&#34;https://github.com/Unknwon/go-fundamental-programming&#34;&gt;《Go编程基础》&lt;/a&gt; &lt;a href=&#34;https://github.com/Unknwon/go-fundamental-programming/blob/master/lectures/lecture4.md&#34;&gt;第四课：常量与运算符&lt;/a&gt;&lt;/strong&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iota&lt;/code&gt; 也可以用在表达式中，如：&lt;code&gt;iota + 50&lt;/code&gt;。在每遇到一个新的常量块或单个常量声明时， &lt;code&gt;iota&lt;/code&gt; 都会重置为 0（ &lt;strong&gt;简单地讲，每遇到一次 const 关键字，&lt;code&gt;iota&lt;/code&gt; 就重置为 0&lt;/strong&gt; ）。&lt;/p&gt;
&lt;p&gt;当然，常量之所以为常量就是恒定不变的量，因此我们无法在程序运行过程中修改它的值；如果你在代码中试图修改常量的值则会引发编译错误。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>大数的阶乘</title>
    <link>https://blog.wiseai.cn/post/%E5%A4%A7%E6%95%B0%E7%9A%84%E9%98%B6%E4%B9%98/</link>
    <pubDate>Mon, 27 Jun 2022 10:38:51 +0800</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E5%A4%A7%E6%95%B0%E7%9A%84%E9%98%B6%E4%B9%98/</guid>
    <description>
        &lt;p&gt;直接上代码:&lt;/p&gt;
&lt;h2 id=&#34;c语言&#34;&gt;C语言:&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

//给计算结果一个数组，并指定大小为4096
//第一次写程序使用的字符串保存大数，但是有个问题，需要char到int来回转换，影响计算性能。
//所以使用数组来保存数据，方便计算
int jieguo[40960] = {0};

//数组长度
int len = 0;

//fac为计算阶乘的函数，计算结果存储在jieguo[4096]数组中
int fac(int n)
{
	int v = 0;
	int f = 0;

	//初始化jieguo数组和数组长度
	jieguo[0] = 1;
	len = 1;

	for(int i = 1; i &amp;lt;= n; i++)
	{
		for(int j = len - 1; j &amp;gt;= 0; j--)
		{
			v = i * jieguo[j];
			jieguo[j] = v % 10;
			v = v / 10;

			f = j + 1;

			//如果v大于0，说明还要进位，所以将进位的数加上原来的数，判断进位后存储。
			//为了提高效率，使用for进行循环
			for(; v &amp;gt; 0 &amp;amp;&amp;amp; f &amp;lt; len; f++)
			{
				v = v + jieguo[f];
				jieguo[f] = v % 10;
				v = v / 10;
			}
			
			//如果这时f等于数组的长度len并且v还大于0，说明需要增加jieguo数组的长度
			//为了提高效率，仍然使用for进行循环
			for(; v &amp;gt; 0;)
			{
				jieguo[len] = v % 10;
				v = v / 10;
				len++;
				
				if(len &amp;gt; 40960 - 2)
				{
					//这个时候说明数组长度不够，需要增加jieguo后面的数值
					//计算100的阶乘的数组长度为158，计算1000的阶乘的数组长度为2568。
					//可以根据实际需要进行设置。
					return 1;
				}
			}
		}		
	}
	return 0;
}

//下面写主函数
int main(void)
{
	int num;
	printf(&amp;#34;请输入需要计算阶乘的数字:&amp;#34;);
	scanf(&amp;#34;%d&amp;#34;, &amp;amp;num);
	
	//计算阶乘结果
	int r = fac(num);
	//如果返回1,则说明数组长度不够，需要增加长度
	if(r == 1)
	{
		printf(&amp;#34;计算结果太大，请增加数组长度！\n&amp;#34;);
		return 0;
	}
	printf(&amp;#34;%d的阶乘为：&amp;#34;, num);
	for(int i = len - 1; i &amp;gt;= 0; i--)
	{
		printf(&amp;#34;%d&amp;#34;, jieguo[i]);
	}
	printf(&amp;#34;\n&amp;#34;);
	printf(&amp;#34;%d\n&amp;#34;, len);
	printf(&amp;#34;运行时间:%.2lf秒\n&amp;#34;, (double)clock() / CLOCKS_PER_SEC);
	printf(&amp;#34;\n&amp;#34;);
	return 0;	
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;golang&#34;&gt;golang:&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import &amp;#34;fmt&amp;#34;
import &amp;#34;time&amp;#34;

const m int = 40960

func fac(n int) ([m]int, int) {
	var jieguo [m]int
	var len int
	var v, f = 0, 0

	jieguo[0] = 1
	len = 1
	
	for i := 1; i &amp;lt;= n; i++{
		for j := len - 1; j &amp;gt;= 0; j--{
			v = i * jieguo[j]
			jieguo[j] = v % 10
			v = v / 10 
			
			f = j + 1

			for ; v &amp;gt; 0 &amp;amp;&amp;amp; f &amp;lt; len; f++ {
				v = v + jieguo[f]
				jieguo[f] = v % 10
				v = v / 10
			}

			for ; v &amp;gt; 0; len++ {
				jieguo[len] = v % 10
				v = v / 10
				
				if len &amp;gt; m - 2 {
					fmt.Println(&amp;#34;error!&amp;#34;)
					return jieguo, len
				}
			}
		}
	}
	return jieguo, len
}

func main() {
	a := 10000
	startTime := time.Now()
	f, len := fac(a)
	fmt.Printf(&amp;#34;%d的阶乘为：&amp;#34;, a)
	for i := len - 1; i &amp;gt;= 0; i-- {
		fmt.Print(f[i])
	}
	fmt.Print(&amp;#34;\n&amp;#34;)
	fmt.Println(len)
	
	t := time.Since(startTime)
    fmt.Println(t.Seconds())
}
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>Go程序的基本结构和要素</title>
    <link>https://blog.wiseai.cn/post/golang/go%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%A6%81%E7%B4%A0/</link>
    <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/golang/go%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E8%A6%81%E7%B4%A0/</guid>
    <description>
        &lt;h1 id=&#34;42-go-程序的基本结构和要素&#34;&gt;4.2 Go 程序的基本结构和要素&lt;/h1&gt;
&lt;p&gt;示例 hello_world.go&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import &amp;#34;fmt&amp;#34;
func main() {
	fmt.Println(&amp;#34;hello, world&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;421-包的概念导入与可见性&#34;&gt;4.2.1 包的概念、导入与可见性&lt;/h2&gt;
&lt;p&gt;包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。&lt;/p&gt;
&lt;p&gt;如同其它一些编程语言中的类库或命名空间的概念，每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 &lt;code&gt;.go&lt;/code&gt; 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;你必须在源文件中非注释的第一行指明这个文件属于哪个包&lt;/u&gt;，如：&lt;code&gt;package main&lt;/code&gt;。&lt;code&gt;package main&lt;/code&gt; 表示一个可独立执行的程序，&lt;u&gt;每个 Go 应用程序都包含一个名为 &lt;code&gt;main&lt;/code&gt; 的包&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;一个应用程序可以包含不同的包，而且即使你只使用 main 包也不必把所有的代码都写在一个巨大的文件里：你可以用一些较小的文件，并且在每个文件非注释的第一行都使用 &lt;code&gt;package main&lt;/code&gt; 来指明这些文件都属于 &lt;code&gt;main&lt;/code&gt; 包。如果你打算编译包名不是为 main 的源文件，如 &lt;code&gt;pack1&lt;/code&gt;，编译后产生的对象文件将会是 &lt;code&gt;pack1.a&lt;/code&gt; 而不是可执行程序。另外要注意的是，&lt;u&gt;所有的包名都应该使用小写字母&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Go 的安装文件里包含了一些可以直接使用的包，即标准库。在 Windows 下，标准库的位置在 Go 根目录下的子目录 &lt;code&gt;pkg\windows_386&lt;/code&gt; 中；在 Linux 下，标准库在 Go 根目录下的子目录 &lt;code&gt;pkg\linux_amd64&lt;/code&gt; 中（如果是安装的是 32 位，则在 &lt;code&gt;linux_386&lt;/code&gt; 目录中）。一般情况下，标准包会存放在 &lt;code&gt;$GOROOT/pkg/$GOOS_$GOARCH/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;p&gt;Go 的标准库包含了大量的包（如：&lt;code&gt;fmt&lt;/code&gt; 和 &lt;code&gt;os&lt;/code&gt;），但是你也可以创建自己的包（&lt;a href=&#34;.%5C09.0.md&#34;&gt;第 9 章&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;如果想要构建一个程序，则包和包内的文件都必须以正确的顺序进行编译。包的依赖关系决定了其构建顺序。&lt;/p&gt;
&lt;p&gt;属于同一个包的源文件必须全部被一起编译，一个包即是编译时的一个单元，因此根据惯例，每个目录都只包含一个包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果对一个包进行更改或重新编译，所有引用了这个包的客户端程序都必须全部重新编译。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go 中的包模型采用了显式依赖关系的机制来达到快速编译的目的，编译器会从后缀名为 &lt;code&gt;.o&lt;/code&gt; 的对象文件（需要且只需要这个文件）中提取传递依赖类型的信息。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;A.go&lt;/code&gt; 依赖 &lt;code&gt;B.go&lt;/code&gt;，而 &lt;code&gt;B.go&lt;/code&gt; 又依赖 &lt;code&gt;C.go&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译 &lt;code&gt;C.go&lt;/code&gt;, &lt;code&gt;B.go&lt;/code&gt;, 然后是 &lt;code&gt;A.go&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;为了编译 &lt;code&gt;A.go&lt;/code&gt;, 编译器读取的是 &lt;code&gt;B.o&lt;/code&gt; 而不是 &lt;code&gt;C.o&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种机制对于编译大型的项目时可以显著地提升编译速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一段代码只会被编译一次&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个 Go 程序是通过 &lt;code&gt;import&lt;/code&gt; 关键字将一组包链接在一起。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot;&lt;/code&gt; 告诉 Go 编译器这个程序需要使用 &lt;code&gt;fmt&lt;/code&gt; 包（的函数，或其他元素），&lt;code&gt;fmt&lt;/code&gt; 包实现了格式化 IO（输入/输出）的函数。包名被封闭在半角双引号 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 中。如果你打算从已编译的包中导入并加载公开声明的方法，不需要插入已编译包的源代码。&lt;/p&gt;
&lt;p&gt;如果需要多个包，它们可以被分别导入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#34;fmt&amp;#34;
import &amp;#34;os&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import &amp;#34;fmt&amp;#34;; import &amp;#34;os&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是还有更短且更优雅的方法（被称为因式分解关键字，该方法同样适用于 &lt;code&gt;const&lt;/code&gt;、&lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;type&lt;/code&gt; 的声明或定义）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
   &amp;#34;fmt&amp;#34;
   &amp;#34;os&amp;#34;
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它甚至还可以更短的形式，但使用 gofmt 后将会被强制换行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (&amp;#34;fmt&amp;#34;; &amp;#34;os&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你导入多个包时，最好按照字母顺序排列包名，这样做更加清晰易读。&lt;/p&gt;
&lt;p&gt;如果包名不是以 &lt;code&gt;.&lt;/code&gt; 或 &lt;code&gt;/&lt;/code&gt; 开头，如 &lt;code&gt;&amp;quot;fmt&amp;quot;&lt;/code&gt; 或者 &lt;code&gt;&amp;quot;container/list&amp;quot;&lt;/code&gt;，则 Go 会在全局文件进行查找；如果包名以 &lt;code&gt;./&lt;/code&gt; 开头，则 Go 会在相对目录中查找；如果包名以 &lt;code&gt;/&lt;/code&gt; 开头（在 Windows 下也可以这样使用），则会在系统的绝对路径中查找。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;译者注：以相对路径在GOPATH下导入包会产生报错信息&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;报错信息：local import &amp;ldquo;./XXX&amp;rdquo; in non-local package&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;引用：&lt;a href=&#34;https://golang.org/cmd/go/#hdr-Relative_import_paths&#34;&gt;Go programs cannot use relative import paths within a work space.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注解：在GOPATH外可以以相对路径的形式执行go build（go install 不可以）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;导入包即等同于包含了这个包的所有的代码对象。&lt;/p&gt;
&lt;p&gt;除了符号 &lt;code&gt;_&lt;/code&gt;，包中所有代码对象的标识符必须是唯一的，以避免名称冲突。但是相同的标识符可以在不同的包中使用，因为可以使用包名来区分它们。&lt;/p&gt;
&lt;p&gt;包通过下面这个被编译器强制执行的规则来决定是否将自身的代码对象暴露给外部文件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可见性规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是它们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。&lt;/p&gt;
&lt;p&gt;（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。&lt;/p&gt;
&lt;p&gt;因此，在导入一个外部包后，能够且只能够访问该包中导出的对象。&lt;/p&gt;
&lt;p&gt;假设在包 &lt;code&gt;pack1&lt;/code&gt; 中我们有一个变量或函数叫做 &lt;code&gt;Thing&lt;/code&gt;（以 T 开头，所以它能够被导出），那么在当前包中导入 &lt;code&gt;pack1&lt;/code&gt; 包，&lt;code&gt;Thing&lt;/code&gt; 就可以像面向对象语言那样使用点标记来调用：&lt;code&gt;pack1.Thing&lt;/code&gt;（pack1 在这里是不可以省略的）。&lt;/p&gt;
&lt;p&gt;因此包也可以作为命名空间使用，帮助避免命名冲突（名称冲突）：两个包中的同名变量的区别在于它们的包名，例如 &lt;code&gt;pack1.Thing&lt;/code&gt; 和 &lt;code&gt;pack2.Thing&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你可以通过使用包的别名来解决包名之间的名称冲突，或者说根据你的个人喜好对包名进行重新设置，如：&lt;code&gt;import fm &amp;quot;fmt&amp;quot;&lt;/code&gt;。下面的代码展示了如何使用包的别名：&lt;/p&gt;
&lt;p&gt;示例 4.2 &lt;a href=&#34;examples/chapter_4/alias.go&#34;&gt;alias.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import fm &amp;#34;fmt&amp;#34; // alias3
func main() {
   fm.Println(&amp;#34;hello, world&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你导入了一个包却没有使用它，则会在构建程序时引发错误，如 &lt;code&gt;imported and not used: os&lt;/code&gt;，这正是遵循了 Go 的格言：“没有不必要的代码！”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;包的分级声明和初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以在使用 &lt;code&gt;import&lt;/code&gt; 导入包之后定义或声明 0 个或多个常量 (const)、变量 (var) 和类型 (type)，这些对象的作用域都是全局的（在本包范围内），所以可以被本包中所有的函数调用，然后声明一个或多个函数 (func)。&lt;/p&gt;
&lt;h2 id=&#34;422-函数&#34;&gt;4.2.2 函数&lt;/h2&gt;
&lt;p&gt;这是定义一个函数最简单的格式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func functionName()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以在括号 &lt;code&gt;()&lt;/code&gt; 中写入 0 个或多个函数的参数（使用逗号 &lt;code&gt;,&lt;/code&gt; 分隔），每个参数的名称后面必须紧跟着该参数的类型。
&lt;u&gt;&lt;code&gt;main()&lt;/code&gt; 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 &lt;code&gt;init()&lt;/code&gt; 函数则会先执行该函数）&lt;/u&gt;。如果你的 &lt;code&gt;main&lt;/code&gt; 包的源代码没有包含 &lt;code&gt;main()&lt;/code&gt; 函数，则会引发构建错误 &lt;code&gt;undefined: main.main&lt;/code&gt;。&lt;code&gt;main()&lt;/code&gt; 函数既没有参数，也没有返回类型（与 C 家族中的其它语言恰好相反）。如果你不小心为 &lt;code&gt;main()&lt;/code&gt; 函数添加了参数或者返回类型，将会引发构建错误：
func main must have no arguments and no return values results.
在程序开始执行并完成初始化后，第一个调用（程序的入口点）的函数是 &lt;code&gt;main.main()&lt;/code&gt;（如：C 语言），该函数一旦返回就表示程序已成功执行并立即退出。
函数里的代码（函数体）使用大括号 &lt;code&gt;{}&lt;/code&gt; 括起来。
左大括号 &lt;code&gt;{&lt;/code&gt; 必须与方法的声明放在同一行，这是编译器的强制规定，否则你在使用 gofmt 时就会出现错误提示：
&lt;code&gt;build-error: syntax error: unexpected semicolon or newline before {&lt;/code&gt;
（这是因为编译器会产生 &lt;code&gt;func main() ;&lt;/code&gt; 这样的结果，很明显这是错误的）
&lt;strong&gt;Go 语言虽然看起来不使用分号作为语句的结束，但实际上这一过程是由编译器自动完成，因此才会引发像上面这样的错误&lt;/strong&gt;
右大括号 &lt;code&gt;}&lt;/code&gt; 需要被放在紧接着函数体的下一行。如果你的函数非常简短，你也可以将它们放在同一行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Sum(a, b int) int { return a + b }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于大括号 &lt;code&gt;{}&lt;/code&gt; 的使用规则在任何时候都是相同的（如：&lt;code&gt;if&lt;/code&gt; 语句等）。
因此符合规范的函数一般写成如下的形式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func functionName(parameter_list) (return_value_list) {
   …
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parameter_list&lt;/code&gt; 的形式为 &lt;code&gt;(param1 type1, param2 type2, …)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return_value_list&lt;/code&gt; 的形式为 &lt;code&gt;(ret1 type1, ret2 type2, …)&lt;/code&gt;
只有当某个函数需要被外部包调用的时候才使用大写字母开头，并遵循 Pascal 命名法；否则就遵循骆驼命名法，即第一个单词的首字母小写，其余单词的首字母大写。
下面这一行调用了 &lt;code&gt;fmt&lt;/code&gt; 包中的 &lt;code&gt;Println&lt;/code&gt; 函数，可以将字符串输出到控制台，并在最后自动增加换行字符 &lt;code&gt;\n&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fmt.Println（&amp;#34;hello, world&amp;#34;）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;fmt.Print(&amp;quot;hello, world\n&amp;quot;)&lt;/code&gt; 可以得到相同的结果。
&lt;code&gt;Print&lt;/code&gt; 和 &lt;code&gt;Println&lt;/code&gt; 这两个函数也支持使用变量，如：&lt;code&gt;fmt.Println(arr)&lt;/code&gt;。如果没有特别指定，它们会以默认的打印格式将变量 &lt;code&gt;arr&lt;/code&gt; 输出到控制台。
单纯地打印一个字符串或变量甚至可以使用预定义的方法来实现，如：&lt;code&gt;print&lt;/code&gt;、&lt;code&gt;println：print(&amp;quot;ABC&amp;quot;)&lt;/code&gt;、&lt;code&gt;println(&amp;quot;ABC&amp;quot;)&lt;/code&gt;、&lt;code&gt;println(i)&lt;/code&gt;（带一个变量 &lt;code&gt;i&lt;/code&gt;）。
这些函数只可以用于调试阶段，在部署程序的时候务必将它们替换成 &lt;code&gt;fmt&lt;/code&gt; 中的相关函数。
当被调用函数的代码执行到结束符 &lt;code&gt;}&lt;/code&gt; 或返回语句时就会返回，然后程序继续执行调用该函数之后的代码。
程序正常退出的代码为 &lt;code&gt;0&lt;/code&gt; 即 &lt;code&gt;Program exited with code 0&lt;/code&gt;；如果程序因为异常而被终止，则会返回非零值，如：&lt;code&gt;1&lt;/code&gt;。这个数值可以用来测试是否成功执行一个程序。&lt;/p&gt;
&lt;h2 id=&#34;423-注释&#34;&gt;4.2.3 注释&lt;/h2&gt;
&lt;p&gt;示例 4.2 &lt;a href=&#34;examples/chapter_4/hello_world2.go&#34;&gt;hello_world2.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import &amp;#34;fmt&amp;#34; // Package implementing formatted I/O.
func main() {
   fmt.Printf(&amp;#34;Καλημέρα κόσμε; or こんにちは 世界\n&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面这个例子通过打印 &lt;code&gt;Καλημέρα κόσμε; or こんにちは 世界&lt;/code&gt; 展示了如何在 Go 中使用国际化字符，以及如何使用注释。&lt;/p&gt;
&lt;p&gt;注释不会被编译，但可以通过 godoc 来使用（&lt;a href=&#34;03.6.md&#34;&gt;第 3.6 节&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;单行注释是最常见的注释形式，你可以在任何地方使用以 &lt;code&gt;//&lt;/code&gt; 开头的单行注释。多行注释也叫块注释，均已以 &lt;code&gt;/*&lt;/code&gt; 开头，并以 &lt;code&gt;*/&lt;/code&gt; 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。&lt;/p&gt;
&lt;p&gt;每一个包应该有相关注释，在 &lt;code&gt;package&lt;/code&gt; 语句之前的块注释将被默认认为是这个包的文档说明，其中应该提供一些相关信息并对整体功能做简要的介绍。一个包可以分散在多个文件中，但是只需要在其中一个进行注释说明即可。当开发人员需要了解包的一些情况时，自然会用 godoc 来显示包的文档说明，在首行的简要注释之后可以用成段的注释来进行更详细的说明，而不必拥挤在一起。另外，在多段注释之间应以空行分隔加以区分。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Package superman implements methods for saving the world.
//
// Experience has shown that a small number of procedures can prove
// helpful when attempting to save the world.
package superman
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;几乎所有全局作用域的类型、常量、变量、函数和被导出的对象都应该有一个合理的注释。如果这种注释（称为文档注释）出现在函数前面，例如函数 Abcd，则要以 &lt;code&gt;&amp;quot;Abcd...&amp;quot;&lt;/code&gt; 作为开头。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// enterOrbit causes Superman to fly into low Earth orbit, a position
// that presents several possibilities for planet salvation.
func enterOrbit() error {
   ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;godoc 工具（&lt;a href=&#34;03.6.md&#34;&gt;第 3.6 节&lt;/a&gt;）会收集这些注释并产生一个技术文档。&lt;/p&gt;
&lt;h2 id=&#34;424-类型&#34;&gt;4.2.4 类型&lt;/h2&gt;
&lt;p&gt;变量（或常量）包含数据，这些数据可以有不同的数据类型，简称类型。使用 &lt;code&gt;var&lt;/code&gt; 声明的变量的值会自动初始化为该类型的零值。类型定义了某个变量的值的集合与可对其进行操作的集合。&lt;/p&gt;
&lt;p&gt;类型可以是基本类型，如：&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;bool&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;；结构化的（复合的），如：&lt;code&gt;struct&lt;/code&gt;、&lt;code&gt;array&lt;/code&gt;、切片 (slice)、&lt;code&gt;map&lt;/code&gt;、通道 (channel)；只描述类型的行为的，如：&lt;code&gt;interface&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;结构化的类型没有真正的值，它使用 &lt;code&gt;nil&lt;/code&gt; 作为默认值（在 Objective-C 中是 nil，在 Java 中是 null，在 C 和 C++ 中是 NULL 或 0）。值得注意的是，Go 语言中不存在类型继承。&lt;/p&gt;
&lt;p&gt;函数也可以是一个确定的类型，就是以函数作为返回类型。这种类型的声明要写在函数名和可选的参数列表之后，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func FunctionName (a typea, b typeb) typeFunc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以在函数体中的某处返回使用类型为 &lt;code&gt;typeFunc&lt;/code&gt; 的变量 &lt;code&gt;var&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;return var
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个函数可以拥有多返回值，返回类型之间需要使用逗号分割，并使用小括号 &lt;code&gt;()&lt;/code&gt; 将它们括起来，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func FunctionName (a typea, b typeb) (t1 type1, t2 type2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例： 函数 &lt;code&gt;Atoi()&lt;/code&gt;（&lt;a href=&#34;04.7.md&#34;&gt;第 4.7 节&lt;/a&gt;）：&lt;code&gt;func Atoi(s string) (i int, err error)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回的形式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;return var1, var2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种多返回值一般用于判断某个函数是否执行成功 (true/false) 或与其它返回值一同返回错误消息（详见之后的并行赋值）。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;type&lt;/code&gt; 关键字可以定义你自己的类型，你可能想要定义一个结构体（&lt;a href=&#34;10.0.md&#34;&gt;第 10 章&lt;/a&gt;），但是也可以定义一个已经存在的类型的别名，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type IZ int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;这里并不是真正意义上的别名，因为使用这种方法定义之后的类型可以拥有更多的特性，且在类型转换时必须显式转换。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以使用下面的方式声明变量：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var a IZ = 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我们可以看到 &lt;code&gt;int&lt;/code&gt; 是变量 &lt;code&gt;a&lt;/code&gt; 的底层类型，这也使得它们之间存在相互转换的可能（&lt;a href=&#34;04.2.md&#34;&gt;第 4.2.6 节&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;如果你有多个类型需要定义，可以使用因式分解关键字的方式，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type (
   IZ int
   FZ float64
   STR string
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个值都必须在经过编译后属于某个类型（编译器必须能够推断出所有值的类型），因为 Go 语言是一种静态类型语言。&lt;/p&gt;
&lt;h2 id=&#34;425-go-程序的一般结构&#34;&gt;4.2.5 Go 程序的一般结构&lt;/h2&gt;
&lt;p&gt;下面的程序可以被顺利编译但什么都做不了，不过这很好地展示了一个 Go 程序的首选结构。这种结构并没有被强制要求，编译器也不关心 &lt;code&gt;main()&lt;/code&gt; 函数在前还是变量的声明在前，但使用统一的结构能够在从上至下阅读 Go 代码时有更好的体验。&lt;/p&gt;
&lt;p&gt;所有的结构将在这一章或接下来的章节中进一步地解释说明，但总体思路如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在完成包的 &lt;code&gt;import&lt;/code&gt; 之后，开始对常量、变量和类型的定义或声明。&lt;/li&gt;
&lt;li&gt;如果存在 &lt;code&gt;init()&lt;/code&gt; 函数的话，则对该函数进行定义（这是一个特殊的函数，每个含有该函数的包都会首先执行这个函数）。&lt;/li&gt;
&lt;li&gt;如果当前包是 &lt;code&gt;main&lt;/code&gt; 包，则定义 &lt;code&gt;main()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;li&gt;然后定义其余的函数，首先是类型的方法，接着是按照 &lt;code&gt;main()&lt;/code&gt; 函数中先后调用的顺序来定义相关函数，如果有很多函数，则可以按照字母顺序来进行排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例 4.4 &lt;a href=&#34;examples/chapter_4/gotemplate.go&#34;&gt;gotemplate.go&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import (
   &amp;#34;fmt&amp;#34;
)
const c = &amp;#34;C&amp;#34;
var v int = 5
type T struct{}
func init() { // initialization of package
}
func main() {
   var a int
   Func1()
   // ...
   fmt.Println(a)
}
func (t T) Method1() {
   //...
}
func Func1() { // exported function Func1
   //...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go 程序的执行（程序启动）顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按顺序导入所有被 &lt;code&gt;main&lt;/code&gt; 包引用的其它包，然后在每个包中执行如下流程：&lt;/li&gt;
&lt;li&gt;如果该包又导入了其它的包，则从第一步开始递归执行，但是每个包只会被导入一次。&lt;/li&gt;
&lt;li&gt;然后以相反的顺序在每个包中初始化常量和变量，如果该包含有 &lt;code&gt;init()&lt;/code&gt; 函数的话，则调用该函数。&lt;/li&gt;
&lt;li&gt;在完成这一切之后，&lt;code&gt;main&lt;/code&gt; 也执行同样的过程，最后调用 &lt;code&gt;main()&lt;/code&gt; 函数开始执行程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;426-类型转换&#34;&gt;4.2.6 类型转换&lt;/h2&gt;
&lt;p&gt;在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。由于 Go 语言不存在隐式类型转换，因此所有的转换都必须显式说明，就像调用一个函数一样（类型在这里的作用可以看作是一种函数）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;valueOfTypeB = typeB(valueOfTypeA)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;类型 B 的值 = 类型 B(类型 A 的值)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a := 5.0
b := int(a)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但这只能在定义正确的情况下转换成功，例如从一个取值范围较小的类型转换到一个取值范围较大的类型（例如将 &lt;code&gt;int16&lt;/code&gt; 转换为 &lt;code&gt;int32&lt;/code&gt;）。当从一个取值范围较大的转换到取值范围较小的类型时（例如将 &lt;code&gt;int32&lt;/code&gt; 转换为 &lt;code&gt;int16&lt;/code&gt; 或将 &lt;code&gt;float32&lt;/code&gt; 转换为 &lt;code&gt;int&lt;/code&gt;），会发生精度丢失（截断）的情况。当编译器捕捉到非法的类型转换时会引发编译时错误，否则将引发运行时错误。&lt;/p&gt;
&lt;p&gt;具有相同底层类型的变量之间可以相互转换：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var a IZ = 5
c := int(a)
d := IZ(c)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;427-go-命名规范&#34;&gt;4.2.7 Go 命名规范&lt;/h2&gt;
&lt;p&gt;干净、可读的代码和简洁性是 Go 追求的主要目标。通过 gofmt 来强制实现统一的代码风格。Go 语言中对象的命名也应该是简洁且有意义的。像 Java 和 Python 中那样使用混合着大小写和下划线的冗长的名称会严重降低代码的可读性。名称不需要指出自己所属的包，因为在调用的时候会使用包名作为限定符。返回某个对象的函数或方法的名称一般都是使用名词，没有 &lt;code&gt;Get...&lt;/code&gt; 之类的字符，如果是用于修改某个对象，则使用 &lt;code&gt;SetName()&lt;/code&gt;。有必须要的话可以使用大小写混合的方式，如 &lt;code&gt;MixedCaps()&lt;/code&gt; 或 &lt;code&gt;mixedCaps()&lt;/code&gt;，而不是使用下划线来分割多个名称。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux中firefox支持flash</title>
    <link>https://blog.wiseai.cn/post/linux%E4%B8%ADfirefox%E6%94%AF%E6%8C%81flash/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E4%B8%ADfirefox%E6%94%AF%E6%8C%81flash/</guid>
    <description>
        &lt;h2 id=&#34;这个有点旧了参考下&#34;&gt;这个有点旧了，参考下&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入adobe中下载flash&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cp ./libflashplayer.so /home/wiseai/.mozilla/plugins/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chmod 755 /home/wiseai/.mozilla/plugins/libflashplayer.so&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;搞定&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux远程连接软件</title>
    <link>https://blog.wiseai.cn/post/linux%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%BD%AF%E4%BB%B6/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%BD%AF%E4%BB%B6/</guid>
    <description>
        &lt;p&gt;远程桌面客户端:Remmina Remote Desktop Client&lt;/p&gt;
&lt;p&gt;安装：apt install remmina&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>NetworkManager网络管理相关问题</title>
    <link>https://blog.wiseai.cn/post/networkmanager%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/networkmanager%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
    <description>
        &lt;ol&gt;
&lt;li&gt;相关配置文件位置&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;/etc/dbus-1/system.d/NetworkManager.conf
/etc/dbus-1/system.d/nm-avahi-autoipd.conf
/etc/dbus-1/system.d/nm-dhcp-client.conf
/etc/dbus-1/system.d/nm-dispatcher.conf
/etc/dbus-1/system.d/nm-system-settings.conf
/etc/rc.d/init.d/NetworkManager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;/etc/dbus-1/system.d/nm-applet.conf&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不使用Network Manager 管理某些网络设备
默认情况下，NetworkManager 管理除 lo（环回）设备以外的所有网络设备，因为一些情况需要将设备设置为 unmanaged，也就是不使用NetworkManager管理这些设备。
&lt;ul&gt;
&lt;li&gt;查看设备状态
&lt;code&gt;# nmcli device status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 /etc/NetworkManager/NetworkManager.conf 配置文件的[main] 层级下启用插件 keyfile。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[main]
plugins=keyfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个一般都启用了。
- 创建 /etc/NetworkManager/conf.d/unmanaged-devices.conf 配置文件（这个文件名没有要求，自己容易识别就可以了），包含以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[keyfile]
unmanaged-devices=interface-name:wlan*
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;以分号隔开；&lt;/li&gt;
&lt;li&gt;可以使用通配符来匹配接口；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interface-name:eth*,except:interface-name:eth0;&lt;/code&gt;表示：除了 eth0，其他以 eth 开头的接口全部 unmanaged；&lt;/li&gt;
&lt;li&gt;可以通过 mac 地址来排除接口，&lt;code&gt;mac:66:77:88:99:00:aa&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;- 重启服务
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;# systemctl restart network-manager.service&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>php5-fpm.sock failed</title>
    <link>https://blog.wiseai.cn/post/php5-fpm.sock-failed/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/php5-fpm.sock-failed/</guid>
    <description>
        &lt;p&gt;/etc/php5/fpm/pool.d/www.conf&lt;/p&gt;
&lt;p&gt;里面找到这样一段代码：&lt;/p&gt;
&lt;p&gt;listen = 127.0.0.1:9000&lt;/p&gt;
&lt;p&gt;在这上面代码的下面添加一行：&lt;/p&gt;
&lt;p&gt;listen = /var/run/php5-fpm.sock&lt;/p&gt;
&lt;p&gt;保存后启动php5-fpm&lt;/p&gt;
&lt;p&gt;/etc/init.d/php5-fpm restart&lt;/p&gt;
&lt;p&gt;这时就可以正常访问了&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>php截取中文字符串乱码问题</title>
    <link>https://blog.wiseai.cn/post/php%E6%88%AA%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/php%E6%88%AA%E5%8F%96%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
    <description>
        &lt;p&gt;php截取字符串有两个函数:&lt;/p&gt;
&lt;p&gt;一个是substr()，这个用来截取全字母的字符串，截取UTF-8的汉字就会出错；&lt;/p&gt;
&lt;p&gt;另一个是mb_substr()，这个用来截取汉字，但一定要注明编码方式：mb_substr(&amp;lsquo;我的祖国是中国&amp;rsquo;, 0, 4, &amp;lsquo;utf-8&amp;rsquo;);&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>samba服务器配置和使用</title>
    <link>https://blog.wiseai.cn/post/samba%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/samba%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
    <description>
        &lt;p&gt;安装：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#dnf install samba&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;端口：&lt;/p&gt;
&lt;p&gt;管理工作组：UDP137，138&lt;/p&gt;
&lt;p&gt;共享数据：TCP139，445（不一定存在）&lt;/p&gt;
&lt;p&gt;启动服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl start  smb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl enable smb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置文件（/etc/samba/smb.conf）:&lt;/p&gt;
&lt;p&gt;1.先设定好服务器整体环境方面的参数&lt;/p&gt;
&lt;p&gt;[global]&lt;/p&gt;
&lt;p&gt;config file = /etc/samba/conf/smb.conf.%m&lt;/p&gt;
&lt;p&gt;说明：config file可以让你使用另一个配置文件来覆盖缺省的配置文件。如果文件 不存在，则该项无效。这个参数很有用，可以使得samba配置更灵活，可以让一台samba服务器模拟多台不同配置的服务器。比如，你想让PC1（主机 名）这台电脑在访问Samba Server时使用它自己的配置文件，那么先在/etc/samba/host/下为PC1配置一个名为smb.conf.pc1的文件，然后在 smb.conf中加入：config file = /etc/samba/conf/smb.conf.%m。这样当PC1请求连接Samba Server时，smb.conf.%m就被替换成smb.conf.pc1。这样，对于PC1来说，它所使用的Samba服务就是由 smb.conf.pc1定义的，而其他机器访问Samba Server则还是应用smb.conf。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#用户组

workgroup = mygroup

#欢迎信息

server string = Samba Server Version %v

#加密

security = user

#使用TDB 数据库格式

passdb backend = tdbsam

#不加载打印机

load printers = no

#共享名

[homes]

#说明

comment = Home Directories

#除了使用者自己外,不可被其他人浏览

browseable = no

#挂载后可擦写此分享

writable = yes

#建立档案的权限为 664

create mode = 0664

#建立目录的权限为 775

directory mode = 0775

#指定允许访问该共享资源的用户&amp;amp;&amp;amp;多个用户或者组中间用逗号隔开，如果要加入一个组就用&amp;#34;@组名&amp;#34;表示,%s表示代替前一个[]里的内容

valid users = %S

valid users = MYDOMAIN\%S

[share]

comment = Public Stuff

#实际的 Linux 上面的目录位置

path = /home/samba

#用来指定该共享的管理员（对该共享具有完全控制权限）

admin users = admin

#指定允许访问该共享资源的用户或者组

valid users = share,@share

#指定不允许访问该共享资源的用户

invalid users = guest

#除了使用者自己外,不可被其他人浏览

browseable = no

#指定可以在该共享下写入文件的用户

write list = share,@share

#指定该共享是否允许guest账户访问

public = no

#指定该共享路径是否可写

writable = yes

#可以在该共享下写入文件的用户和组

write list = share,@share
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;用 testparm 查阅 smb.conf 的语法设定正确性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3.建立目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#mkdir /home/project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#chmod 2770 /home/project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后改变目录用户或者组属性&lt;/p&gt;
&lt;p&gt;4.设定可使用 Samba 的用户账号与密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#useradd -M -s /sbin/nologin -d /dev/null -G user1 share&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 pdbedit 指令功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# pdbedit -L [-vw]        &amp;lt;==单纯的察看帐户信息&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# pdbedit -a&#39;-r&#39;-x -u 账号       &amp;lt;==新增/修改/删除账号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# pdbedit -a -m -u 机器账号       &amp;lt;==与 PDC 有关的机器码&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选项与参数:&lt;/p&gt;
&lt;p&gt;-L :列出目前在数据库当中的账号与 UID 等相关信息;&lt;/p&gt;
&lt;p&gt;-v :需要搭配 -L 来执行,可列出更多的讯息,包括家目录等数据;&lt;/p&gt;
&lt;p&gt;-w :需要搭配 -L 来执行,使用旧版的 smbpasswd 格式来显示数据;&lt;/p&gt;
&lt;p&gt;-a :新增一个可使用 Samba 的账号,后面的账号需要在 /etc/passwd 内存在者;&lt;/p&gt;
&lt;p&gt;-r :修改一个账号的相关信息,需搭配很多特殊参数,请 man pdbedit;&lt;/p&gt;
&lt;p&gt;-x :删除一个可使用 Samba 的账号,可先用 -L 找到账号后再删除;&lt;/p&gt;
&lt;p&gt;-m :后面接的是机器的代码 (machine account),与 domain model 有关!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# pdbedit -a -u share&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改密码:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#smbpasswd share&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5.查看分享资源&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#smbclient -L [//主机或 IP] [-U 使用者账号]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6.挂载&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#mount -t cifs //127.0.0.1/share /mnt -o username=share,password=123456&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;7.smbstatus:观察 SAMBA 的状态&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# smbstatus [-pS] [-u username]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选项与参数:&lt;/p&gt;
&lt;p&gt;-p :列出已经使用 SAMBA 联机的程序 PID ;&lt;/p&gt;
&lt;p&gt;-S :列出已经被使用的资源共享状态;&lt;/p&gt;
&lt;p&gt;-u :只列出某个用户相关的分享数据&lt;/p&gt;
&lt;p&gt;8.SELinux设置&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#允许共享Home目录&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setsebool -P samba_enable_home_dirs on&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#更改SELinux用户&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chcon -t samba_share_t /path/to/directory&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>ssh加密算法的启用禁用方法</title>
    <link>https://blog.wiseai.cn/post/ssh%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%90%AF%E7%94%A8%E7%A6%81%E7%94%A8%E6%96%B9%E6%B3%95/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/ssh%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%90%AF%E7%94%A8%E7%A6%81%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
    <description>
        &lt;ul&gt;
&lt;li&gt;“手机ES文件浏览器”不能连接sftp的问题解决方法
首先，说说为什么学习这个东西，在使用“手机ES文件浏览器”这个软件的时候，出现了不能连接的情况，在网上查询后发现是KexAlgorithms 密钥交换算法的问题，在/etc/ssh/sshd_config后添加:
&lt;code&gt;KexAlgorithms +diffie-hellman-group14-sha1&lt;/code&gt;
后问题解决。&lt;/li&gt;
&lt;li&gt;出现no matching host key type found.Their offer: ssh-rsa,ssh-dss这个问题时,在/etc/ssh/sshd_config后添加：
&lt;code&gt;HostKeyAlgorithms ssh-rsa&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置位置etcsshsshd_config&#34;&gt;配置位置：/etc/ssh/sshd_config&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ciphers
Ciphers 指定 ssh 使用的加密算法。多个加密算法之间使用逗号分隔。当 Ciphers 的值以 + 字符开始时，指定的加密算法将附加到默认集合，不影响默认集合中的其它算法。当 Ciphers 的值以 ‘-’ 字符开始时，指定的加密算法将会从默认集合中移除，不影响默认集合中的其它项目。
比如，在 sshd_config 文件的最后添加如下行：
&lt;code&gt;Ciphers +3des-cbc,aes128-cbc&lt;/code&gt;
这样就添加了两个加密算法。
&lt;code&gt;Ciphers -3des-cbc,aes128-cbc&lt;/code&gt;
这样就删除了两个加密算法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MACs
MACs 选项指定可用的 MAC（消息认证代码）算法，用于数据完整性保护。配置方法与 Ciphers 一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KexAlgorithms
KexAlgorithms 选项指定可用的密钥交换算法。配置方法与 Ciphers 一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PubkeyAcceptedKeyTypes
PubkeyAcceptedKeyTypes 指定公钥认证允许的密钥类型。配置方法与 Ciphers 一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 ssh 支持的不同类别的加密算法
Ciphers:&lt;code&gt; ssh -Q cipher&lt;/code&gt;
MACs:&lt;code&gt; ssh -Q mac&lt;/code&gt;
KexAlgorithms:&lt;code&gt; ssh -Q kex&lt;/code&gt;
PubkeyAcceptedKeyTypes:&lt;code&gt; ssh -Q key&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
    <item>
    <title>vi和vim使用</title>
    <link>https://blog.wiseai.cn/post/vi%E5%92%8Cvim%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/vi%E5%92%8Cvim%E4%BD%BF%E7%94%A8/</guid>
    <description>
        &lt;h4 id=&#34;三种模式分别是一般指令模式编辑模式与指令列命令模式&#34;&gt;三种模式，分别是『一般指令模式』、『编辑模式』与『指令列命令模式』。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;一般指令模式(command mode)
以vi 打开一个档案就直接进入一般指令模式了(这是预设的模式，也简称为一般模式)。在这个模式中， 你可以使用『上下左右』按键来移动游标，你可以使用『删除字元』或『删除整列』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件资料。
编辑模式(insert mode)
在一般指令模式中可以进行删除、复制、贴上等等的动作，但是却无法编辑文件内容的！要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或REPLACE』的字样，此时才可以进行编辑。而如果要回到一般指令模式时，则必须要按下『Esc』这个按键即可退出编辑模式。
指令列命令模式(command-line mode)
在一般模式当中，输入『 : / ?』三个中的任何一个按钮，就可以将游标移动到最底下那一列。在这个模式当中，可以提供你『搜寻资料』的动作，而读取、存档、大量取代字元、离开vi 、显示行号等等的动作则是在此模式中达成的！
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;按键说明&#34;&gt;按键说明&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;一般指令模式可用的按键说明，游标移动、复制贴上、搜寻取代等
屏幕『向下』移动半页: [Ctrl] + [d]
屏幕『向上』移动半页: [Ctrl] + [u]
游标向右移动这一列的n个字符: n空格键
移动到这个档案的第n行#: nG
游标向下移动n行#:n回车键
搜寻与取代
在第n1与n2列之间寻找word1这个字串，并将该字串取代为word2
#:n1,n2s/word1/word2/g
从第一列到最后一列寻找word1字串，并将该字串取代为word2
#:1,$s/word1/word2/g
从第一列到最后一列寻找word1字串，并将该字串取代为word2,且在取代前显示提示字元给使用者确认(confirm)是否需要取代
#:1,$s/word1/word2/gc
删除、复制与粘贴
删除游标所在到第一行的所有资料#:d1G
删除游标所在到最后一列的所有资料#:dG
删除游标所在处，到该行的最后一个字符#:d$
删除游标所在处，到该行的最前面一个字符#:d0
将游标所在行与下一行的资料结合成同一列#:J
复原前一个动作#:u
重做上一个动作#:[Ctrl]+r
重复前一个动作#:.
区块选择的按键意义
用长方形的方式选择区块#:[Ctrl]+v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多档案编辑&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/hosts /etc/resolv.conf
编辑下一个档案::n
编辑上一个档案::N
列出目前这个vim的开启的所有档案::files
多视窗功能

在指令列模式输入『:sp {filename}』  
『[ctrl]+w+↑』[ctrl]+w+j及『[ctrl]+w+↓』[ctrl]+w+k在两个视窗之间移动&lt;/code&gt;&lt;/pre&gt;

    </description>
    </item>
    
    <item>
    <title>下载命令wget</title>
    <link>https://blog.wiseai.cn/post/%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4wget/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4wget/</guid>
    <description>
        &lt;p&gt;选项:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-b 后台下载
-O 文件名为***（大写o）
-i 下载文件中的URL
-t 设置重试次数（0为无限次）
-c 断点续传
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其它参数：wget –help&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>使用caddy搭建webdav服务器</title>
    <link>https://blog.wiseai.cn/post/%E4%BD%BF%E7%94%A8caddy%E6%90%AD%E5%BB%BAwebdav%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E4%BD%BF%E7%94%A8caddy%E6%90%AD%E5%BB%BAwebdav%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
    <description>
        &lt;ol&gt;
&lt;li&gt;首先下载或者编译包含Webdav插件的Caddy&lt;/li&gt;
&lt;li&gt;生成密码（设置123456789的密码）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# caddy hash-password --plaintext 123456789&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;JDJhJDE0JHpGUDNaL1Q5UEV2dWZxd1BCYWdGUS56WkdZbHJDZG8ybURERWYyRzlzLzd0TTM2akYxNFVh&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;编辑Caddyfile&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    {
            http_port 80
            https_port 443
            order webdav before file_server
    }
    
    :6666 {
            root * /home/xjc/software/caddy/
            encode zstd gzip
            basicauth {
	           #用户名   上面命令生成的密码
                    admin JDJhJDE0JHpGUDNaL1Q5UEV2dWZxd1BCYWdGUS56WkdZbHJDZG8ybURERWYyRzlzLzd0TTM2akYxNFVh
            }
            route {
                    rewrite /webdav /webdav/
                    webdav /webdav/* {
                            prefix /webdav
                    }
            }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;运行服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# caddy run -config Caddyfile -watch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# caddy start&lt;/code&gt;后台运行服务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# caddy stop&lt;/code&gt;停止服务&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;挂载webdav网盘&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# sudo mount.davfs http://127.0.0.1:6666/webdav /file/to/path/ -o uid=uos,gid=uos&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>使用OpenSSL生成证书</title>
    <link>https://blog.wiseai.cn/post/%E4%BD%BF%E7%94%A8openssl%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E4%BD%BF%E7%94%A8openssl%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</guid>
    <description>
        &lt;p&gt;下载安装OpenSSL，进入/bin/下面，执行命令（把ssl目录下的openssl.cnf 拷贝到bin目录下）&lt;/p&gt;
&lt;p&gt;1.首先要生成服务器端的私钥(key文件):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
openssl genrsa -des3 -out server.key 1024

[root@airwaySSL openssl]# cd ssl/

[root@airwaySSL ssl]# pwd

/home/openssl/ssl

[root@airwaySSL ssl]# ls

certs  man  misc  openssl.cnf  private  server.csr  server.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行时会提示输入密码,此密码用于加密key文件(参数des3便是指加密算法,当然也可以选用其他你认为安全的算法.),以后每当需读取此文件(通过openssl提供的命令或API)都需输入口令.如果觉得不方便,也可以去除这个口令,但一定要采取其他的保护措施!&lt;/p&gt;
&lt;p&gt;去除key文件口令的命令:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
openssl rsa -in server.key -out server.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.openssl req -new -key server.key -out server.csr -config openssl.cnf&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
[root@airwaySSL bin]# openssl req -new -key server.key -out server.csr -config openssl.cnf

Enter pass phrase for server.key:12345

You are about to be asked to enter information that will be incorporated

into your certificate request.

What you are about to enter is what is called a Distinguished Name or a DN.

There are quite a few fields but you can leave some blank

For some fields there will be a default value,

If you enter &amp;#39;.&amp;#39;, the field will be left blank.
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
Country Name (2 letter code) [AU]:CN

State or Province Name (full name) [Some-State]:china

Locality Name (eg, city) []:wuhan

Organization Name (eg, company) [Internet Widgits Pty Ltd]:airway

Organizational Unit Name (eg, section) []:airway

Common Name (eg, YOUR name) []:airway

Email Address []:

Please enter the following &amp;#39;extra&amp;#39; attributes

to be sent with your certificate request

A challenge password []:

An optional company name []:

生成Certificate Signing Request（CSR）,生成的csr文件交给CA签名后形成服务端自己的证书.屏幕上将有提示,依照其指示一步一步输入要求的个人信息即可.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.对客户端也作同样的命令生成key及csr文件:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
openssl genrsa -des3 -out client.key 1024

Generating RSA private key, 1024 bit long modulus

...........++++++

..++++++

e is 65537 (0x10001)

Enter pass phrase for client.key:12345

Verifying - Enter pass phrase for client.key:12345

openssl req -new -key client.key -out client.csr -config openssl.cnf

[root@airwaySSL bin]# openssl req -new -key client.key -out client.csr -config openssl.cnf

Enter pass phrase for client.key:12345

You are about to be asked to enter information that will be incorporated

into your certificate request.

What you are about to enter is what is called a Distinguished Name or a DN.

There are quite a few fields but you can leave some blank

For some fields there will be a default value,

If you enter &amp;#39;.&amp;#39;, the field will be left blank.
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
Country Name (2 letter code) [AU]:cn

State or Province Name (full name) [Some-State]:china

Locality Name (eg, city) []:wuhan

Organization Name (eg, company) [Internet Widgits Pty Ltd]:airway

Organizational Unit Name (eg, section) []:airway

Common Name (eg, YOUR name) []:airway

Email Address []:

Please enter the following &amp;#39;extra&amp;#39; attributes

to be sent with your certificate request

A challenge password []:

An optional company name []:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.CSR文件必须有CA的签名才可形成证书.可将此文件发送到verisign等地方由它验证,要交一大笔钱,何不自己做CA呢.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
openssl req -new -x509 -keyout ca.key -out ca.crt -config openssl.cnf

[root@airwaySSL bin]# openssl req -new -x509 -keyout ca.key -out ca.crt -config openssl.cnf

Generating a 1024 bit RSA private key

...++++++

...................++++++

writing new private key to &amp;#39;ca.key&amp;#39;

Enter PEM pass phrase:12345

Verifying - Enter PEM pass phrase:

-----

You are about to be asked to enter information that will be incorporated

into your certificate request.

What you are about to enter is what is called a Distinguished Name or a DN.

There are quite a few fields but you can leave some blank

For some fields there will be a default value,

If you enter &amp;#39;.&amp;#39;, the field will be left blank.

-----

Country Name (2 letter code) [AU]:CN

State or Province Name (full name) [Some-State]:china

Locality Name (eg, city) []:wuhan

Organization Name (eg, company) [Internet Widgits Pty Ltd]:airway

Organizational Unit Name (eg, section) []:airway

Common Name (eg, YOUR name) []:airway

Email Address []:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在继续下面操作前，将openssl.conf文件打开，查看其dir路径将其修改为dir = /home/openssl/bin/demoCA /，否则下面的步骤会提示路径无法找到。&lt;/p&gt;
&lt;p&gt;自己手动创建一个CA目录结构：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
[weigw@TEST bin]$ mkdir ./demoCA

[weigw@TEST bin]$ mkdir
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>Raspberry Pi 4 boot EEPROM</title>
    <link>https://blog.wiseai.cn/post/raspberry-pi-4-boot-eeprom/</link>
    <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/raspberry-pi-4-boot-eeprom/</guid>
    <description>
        &lt;h1 id=&#34;raspberry-pi-4-boot-eeprom&#34;&gt;Raspberry Pi 4 boot EEPROM&lt;/h1&gt;
&lt;p&gt;官方文档：https://www.raspberrypi.org/documentation/hardware/raspberrypi/booteeprom.md&lt;/p&gt;
&lt;h1 id=&#34;升级&#34;&gt;升级&lt;/h1&gt;
&lt;h2 id=&#34;updating-from-raspberry-pi-os&#34;&gt;Updating from Raspberry Pi OS&lt;/h2&gt;
&lt;p&gt;Bootloader updates are instigated during a normal apt update, apt full-upgrade cycle, this means you will get new features and bug fixes during your normal updates.&lt;/p&gt;
&lt;p&gt;Bootloader updates are performed by rpi-eeprom-update service provided by the rpi-eeprom package. This service runs at boot and updates the bootloader at the next reboot if a new production release is available. The service automatically migrates the current boot settings to the new bootloader release.&lt;/p&gt;
&lt;p&gt;To update your system, including the bootloader:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt update
sudo apt full-upgrade
sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说在更新系统的时候同时更新eeprom&lt;/p&gt;
&lt;h2 id=&#34;manually-checking-if-an-update-is-available&#34;&gt;Manually checking if an update is available&lt;/h2&gt;
&lt;p&gt;提前说一句，手动检查更新，必须更新rpi-eeprom这个软件包，单独更新可以使用安装命令。&lt;/p&gt;
&lt;p&gt;Running the rpi-eeprom-update command with no parameters indicates whether an update is required. An update is required if the version of the most recent file in the firmware directory (normally /lib/firmware/raspberrypi/bootloader/critical) is newer than that reported by the current bootloader. The images under /lib/firmware/raspberrypi/bootloader are part of the rpi-eeprom package and are only updated via apt upgrade.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rpi-eeprom-update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If an update is available, you can install it using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rpi-eeprom-update -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reading the current EEPROM version&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vcgencmd bootloader_version&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;firmware-release-status&#34;&gt;Firmware release status&lt;/h2&gt;
&lt;p&gt;The firmware release status corresponds to a particular subdirectory of bootloader firmware images (/lib/firmware/raspberrypi/bootloader/&amp;hellip;), and can be changed to select a different release stream. By default, Raspberry Pi OS only selects critical updates (security fixes or major hardware compatiblity changes) since most users do not use alternate boot modes (TFTP, USB etc)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;critical - Default - rarely updated&lt;/li&gt;
&lt;li&gt;stable - Updated when new/advanced features have been successfully beta tested.&lt;/li&gt;
&lt;li&gt;beta - New or experimental features are tested here first.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the release status string is just a subdirectory name then it&amp;rsquo;s possible to create your own release streams e.g. a pinned release or custom network boot configuration.&lt;/p&gt;
&lt;p&gt;Changing the firmware release
You can change which release stream is to be used during an update by editing the /etc/default/rpi-eeprom-update file and changing the FIRMWARE_RELEASE_STATUS entry to the appropriate stream.&lt;/p&gt;
&lt;p&gt;For more information about the rpi-eeprom-update configuration file please run &lt;code&gt;rpi-eeprom-update -h&lt;/code&gt;.&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>更改ubuntu源</title>
    <link>https://blog.wiseai.cn/post/%E6%9B%B4%E6%94%B9ubuntu%E6%BA%90/</link>
    <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E6%9B%B4%E6%94%B9ubuntu%E6%BA%90/</guid>
    <description>
        &lt;p&gt;&lt;code&gt;sed -i &#39;s#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#&#39; /etc/apt/sources.list&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>locate命令</title>
    <link>https://blog.wiseai.cn/post/locate%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/locate%E5%91%BD%E4%BB%A4/</guid>
    <description>
        &lt;h5 id=&#34;locate命令用于查找符合条件的文档他会去保存文档和目录名称的数据库内查找合乎范本样式条件的文档或目录&#34;&gt;locate命令用于查找符合条件的文档，他会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;# locate [-d ][--help][--version][查找内容文本]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-b, --basename         仅匹配路径名的基本名称，**也就是说文件名包含的才显示，目录不显示**。
-c, --count            只输出找到的数量
-d, --database DBPATH  使用 DBPATH 指定的数据库，而不是默认数据库 /var/lib/mlocate/mlocate.db
-e, --existing         仅打印当前现有文件的条目
-1                     如果是 1则启动安全模式。在安全模式下，使用者不会看到权限无法看到的档案。这会始速度减慢，因为 locate 必须至实际的档案系统中取得档案的权限资料。
-0, --null             在输出上带有NUL的单独条目
-S, --statistics       不搜索条目，打印有关每个数据库的统计信息
-P, --nofollow, -H     检查文件存在时不要遵循尾随的符号链接
-l, --limit, -n LIMIT  将输出（或计数）限制为LIMIT个条目
-n                     至多显示 n个输出。
-m, --mmap             被忽略，为了向后兼容
-r, --regexp REGEXP    使用基本正则表达式
--regex                使用扩展正则表达式
-q, --quiet            安静模式，不会显示任何错误讯息
-s, --stdio            被忽略，为了向后兼容
-o                     指定资料库存的名称。
-h, --help             显示帮助
-i, --ignore-case      忽略大小写
-V, --version          显示版本信息 	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;locate 的数据库在 /var/lib/slocate/slocate.db 中，一般是系统自己维护，也可以手工升级数据库 ，命令为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# updatedb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认情况下 updatedb 每天执行一次。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>整站或网页下载软件httrack</title>
    <link>https://blog.wiseai.cn/post/%E6%95%B4%E7%AB%99%E6%88%96%E7%BD%91%E9%A1%B5%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6httrack/</link>
    <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E6%95%B4%E7%AB%99%E6%88%96%E7%BD%91%E9%A1%B5%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6httrack/</guid>
    <description>
        &lt;p&gt;首先安装httrack:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;＃dnf install httrack&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用说明：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;＃httrack&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入项目名&lt;/p&gt;
&lt;p&gt;输入保存目录&lt;/p&gt;
&lt;p&gt;输入需要保存的网站URL或者网页URL&lt;/p&gt;
&lt;p&gt;其它的默认就好&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>搭建apt本地源</title>
    <link>https://blog.wiseai.cn/post/%E6%90%AD%E5%BB%BAapt%E6%9C%AC%E5%9C%B0%E6%BA%90/</link>
    <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E6%90%AD%E5%BB%BAapt%E6%9C%AC%E5%9C%B0%E6%BA%90/</guid>
    <description>
        &lt;h2 id=&#34;一安装apt-mirror命令&#34;&gt;一、安装apt-mirror命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;# apt install apt-mirror&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-修改apt-mirror配置文件&#34;&gt;二、 修改apt-mirror配置文件&lt;/h2&gt;
&lt;p&gt;首先， 确定自己系统的版本 ，root权限执行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# lsb_release -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我的系统是ubuntu的bionic，从阿里云下载源，一般有5个目录，前三个常用，后两个是预发布软件，不常用，我一般用前三个&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，编辑apt-mirror的配置文件/etc/apt/mirror.list&lt;/p&gt;
&lt;h3 id=&#34;配置镜像下载目录&#34;&gt;配置镜像下载目录&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;set base_path /var/spool/apt-mirror&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;架构配置i386amd64默认的话会下载跟本机相同的架构的源&#34;&gt;架构配置，i386/amd64，默认的话会下载跟本机相同的架构的源&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;set defaultarch amd64&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;下载线程数&#34;&gt;下载线程数&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;set nthreads 20&lt;/code&gt;
&lt;code&gt;set _tilde 0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;阿里云的源这里没有添加deb-src的源码源&#34;&gt;阿里云的源（这里没有添加deb-src的源码源）&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;后面还可以添加其它版本的源&#34;&gt;后面还可以添加其它版本的源&lt;/h3&gt;
&lt;h3 id=&#34;清理不使用的软件包&#34;&gt;清理不使用的软件包&lt;/h3&gt;
&lt;p&gt;clean &lt;a href=&#34;http://mirrors.aliyun.com/ubuntu&#34;&gt;http://mirrors.aliyun.com/ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三开始同步&#34;&gt;三、开始同步&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;# apt-mirror&lt;/code&gt;
注意：同步的文件必须在Linux文件系统下，所有人为_apt；否则出错。&lt;/p&gt;
&lt;h2 id=&#34;四-客户端配置&#34;&gt;四、 客户端配置&lt;/h2&gt;
&lt;p&gt;编辑/etc/apt/source.list&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb [arch=amd64] http://[host]:[port]/ubuntu/ bionic main restricted universe multiverse 
deb [arch=amd64] http://[host]:[port]/ubuntu/ bionic-security main restricted universe multiverse 
deb [arch=amd64] http://[host]:[port]/ubuntu/ bionic-updates main restricted universe multiverse 
deb [arch=amd64] http://[host]:[port]/ubuntu/ bionic-proposed main restricted universe multiverse 
deb [arch=amd64] http://[host]:[port]/ubuntu/ bionic-backports main restricted universe multiverse
或

deb [arch=amd64] file:///你的目录/ubuntu/ bionic main restricted universe multiverse 
deb [arch=amd64] file:///你的目录/ubuntu/ bionic-security main restricted universe multiverse 
deb [arch=amd64] file:///你的目录/ubuntu/ bionic-updates main restricted universe multiverse 
deb [arch=amd64] file:///你的目录/ubuntu/ bionic-proposed main restricted universe multiverse 
deb [arch=amd64] file:///你的目录/ubuntu/ bionic-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>yum时出现error的解决办法</title>
    <link>https://blog.wiseai.cn/post/yum%E6%97%B6%E5%87%BA%E7%8E%B0error%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
    <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/yum%E6%97%B6%E5%87%BA%E7%8E%B0error%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
    <description>
        &lt;h3 id=&#34;错误内容&#34;&gt;错误内容：&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Unable to detect release version (use ‘–releasever’ to specify release version)

error: rpmdb: damaged header #173 retrieved — skipping.
error: rpmdbNextIterator: skipping h# 173 blob size(55540): BAD, 8 + 16 * il(78) + dl(54284)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;解决办法&#34;&gt;解决办法：&lt;/h3&gt;
&lt;p&gt;首先：删除/var/lib/下的rpm文件夹&lt;/p&gt;
&lt;p&gt;之后：执行命令&lt;code&gt;rpm --rebuilddb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后：安装一个提供版本号的包&lt;code&gt;yum --releasever 8 install centos-release&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;--releasever 8&lt;/code&gt;是指定版本号，我的是centos8，所以这么写。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>树莓派蓝牙相关问题</title>
    <link>https://blog.wiseai.cn/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
    <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
    <description>
        &lt;p&gt;&lt;strong&gt;因系统更新快，这里的操作仅供参考!!&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;升级安装蓝牙相关软件包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# sudo apt-get install pi-bluetooth bluez bluez-firmware blueman&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;添加pi用户到蓝牙组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# sudo usermod -G bluetooth -a pi&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;重启&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;使用命令打开蓝牙&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pi@raspberrypi:/ $ sudo bluetoothctl
[bluetooth]#list
Controller B8:27:EB:3D:15:E9 raspberrypi [default]
[bluetooth]# scan on
Discovery started
[CHG] Device 5F:FC:4E:B0:EA:59 RSSI: -97
[NEW] Device 42:29:9A:3B:75:E6 42-29-9A-3B-75-E6
[bluetooth]# devices
Device 30:21:4F:54:4D:8E Newmine
Device 72:D7:02:62:CE:A0 72-D7-02-62-CE-A0
Device 5F:FC:4E:B0:EA:59 5F-FC-4E-B0-EA-59
Device E4:A7:C5:C8:55:F5 HUAWEI Mate 10 Pro
Device 42:29:9A:3B:75:E6 42-29-9A-3B-75-E6
[bluetooth]# pair 30:21:4F:54:4D:8E
Attempting to pair with 30:21:4F:54:4D:8E
Failed to pair: org.bluez.Error.AlreadyExists(已配对成功过，如果是初次配对是显示成功的信息）
[bluetooth]# trust 30:21:4F:54:4D:8E
Changing 30:21:4F:54:4D:8E trust succeeded
[bluetooth]# connect 30:21:4F:54:4D:8E
Attempting to connect to 30:21:4F:54:4D:8E
[CHG] Device 30:21:4F:54:4D:8E Connected: yes
Connection successful
[CHG] Device 5F:FC:4E:B0:EA:59 RSSI: -86
[CHG] Device 30:21:4F:54:4D:8E ServicesResolved: yes
[Newmine]#quit
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>MarkDown在线编辑器</title>
    <link>https://blog.wiseai.cn/post/markdown%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/</link>
    <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/markdown%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
    <description>
        &lt;p&gt;使用开源项目&lt;a href=&#34;https://github.com/pandao/editor.md.git&#34; title=&#34;editor.md&#34;&gt;editor.md&lt;/a&gt;我的gitee仓库下也有。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;# npm install editor.md&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
        &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;editor.md/css/editormd.min.css&amp;#34; /&amp;gt;
        &amp;lt;title&amp;gt;Markdown 编辑在线器&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;#34;text&amp;#34; style=&amp;#34;width: 100%;&amp;#34;&amp;gt;
        &amp;lt;div id=&amp;#34;editor&amp;#34; style=&amp;#34;height: 100%;&amp;#34;&amp;gt;
            &amp;lt;!-- Tips: Editor.md can auto append a `&amp;lt;textarea&amp;gt;` tag --&amp;gt;
            &amp;lt;textarea style=&amp;#34;display:none;&amp;#34; placeholder=&amp;#34;欢迎使用&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;#34;jquery.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;#34;editor.md/editormd.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;
        // 设置div与窗口高度一致
        window.onload = function () {
            var h = window.innerHeight - 25 ; //获取当前窗口的高度; 
            document.getElementById(&amp;#34;text&amp;#34;).style.height = h + &amp;#34;px&amp;#34;; //设置div的高度
        }
        // 设置textarea参数
        $(function() {
            var h = window.innerHeight - 25
            var editor = editormd(&amp;#34;editor&amp;#34;, {
                // width: &amp;#34;100%&amp;#34;,
                height: h,
                saveHTMLToTextarea   : true,
                // markdown: &amp;#34;xxxx&amp;#34;,     // dynamic set Markdown text
                path : &amp;#34;editor.md/lib/&amp;#34;  // Autoload modules mode, codemirror, marked... dependents libs path
            });
        });
    &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>Nginx出现问题的解决办法</title>
    <link>https://blog.wiseai.cn/post/nginx%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
    <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/nginx%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
    <description>
        &lt;p&gt;最近遇到Permission denied这个问题，经过排查，是目录权限的问题，server的root目录必须要有写权限才行，只有读权限还是会出现Permission denied的问题，并且要给nginx的执行用户，比如默认的www-data用户。
待续&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>sublime使用</title>
    <link>https://blog.wiseai.cn/post/sublime%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/sublime%E4%BD%BF%E7%94%A8/</guid>
    <description>
        &lt;h2 id=&#34;安装package-control&#34;&gt;安装Package Control&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tools-&amp;gt;Install Package Control  选项，即可调出 Package Control&lt;/li&gt;
&lt;li&gt;“Tools-&amp;gt;Command Palette&amp;hellip;”选项，快捷键Ctrl+Shift +P&lt;/li&gt;
&lt;li&gt;输入 ipc ,点击 Install Package Control，即可调出 Package Control&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;设置中文&#34;&gt;设置中文&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Preferences-&amp;gt;Package Control，快捷键Ctrl+Shift +P&lt;/li&gt;
&lt;li&gt;选项弹出命令行输入框，输入ip，点击“install Package”&lt;/li&gt;
&lt;li&gt;弹出命令行输入框，输入clz，点击“ChineseLocalizations”&lt;/li&gt;
&lt;li&gt;“帮助-&amp;gt;Language ”切换语言。&lt;/li&gt;
&lt;/ol&gt;

    </description>
    </item>
    
    <item>
    <title>systemd的服务管理程序systemctl</title>
    <link>https://blog.wiseai.cn/post/systemd%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8Fsystemctl/</link>
    <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/systemd%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8Fsystemctl/</guid>
    <description>
        &lt;p&gt;systemctl融合service和chkconfig的功能于一体,可以使用它永久性或只在当前会话中启用/禁用服务。&lt;/p&gt;
&lt;h2 id=&#34;一启动关闭启用禁用服务&#34;&gt;一、启动/关闭、启用/禁用服务&lt;/h2&gt;
&lt;p&gt;运行一个服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl start firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关闭一个服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl stop firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启一个服务:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl restart firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;显示一个服务（无论运行与否）的状态:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl status firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在开机时启用一个服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl enable firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在开机时禁用一个服务:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl disable firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;检查一个服务是否是开机启用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl is-enabled firewalld&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二改变运行级别&#34;&gt;二、改变运行级别&lt;/h2&gt;
&lt;p&gt;切换到运行级别3或者5：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl isolate multi-user.target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl isolate graphical.target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;改变默认运行级别3或者5：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target或#systemctl set-default multi-user.target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target或#systemctl set-default graphical.target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看当下运行级别:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#systemctl list-units --type=target&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;三改变默认-getty-数目&#34;&gt;三、改变默认 getty 数目&lt;/h2&gt;
&lt;p&gt;添加一个新的 getty ：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#ln -sf /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty9.service
#systemctl daemon-reload
#systemctl start getty@tty9.service`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除一个 getty ：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#rm /etc/systemd/system/getty.target.wants/getty@tty9.service
#systemctl daemon-reload
#systemctl stop getty@tty9.service
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;四读懂配置文件&#34;&gt;四、读懂配置文件&lt;/h2&gt;
&lt;p&gt;一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。&lt;/p&gt;
&lt;p&gt;前面说过，配置文件主要放在&lt;code&gt;/usr/lib/systemd/system&lt;/code&gt;目录，也可能在&lt;code&gt;/etc/systemd/system&lt;/code&gt;目录。找到配置文件以后，使用文本编辑器打开即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemctl cat&lt;/code&gt;命令可以用来查看配置文件，下面以&lt;code&gt;sshd.service&lt;/code&gt;文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ systemctl cat sshd.service&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=OpenSSH server daemon
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target sshd-keygen.service
Wants=sshd-keygen.service

[Service]
EnvironmentFile=/etc/sysconfig/sshd
ExecStart=/usr/sbin/sshd -D &amp;lt;span class=&amp;quot;hljs-variable&amp;quot;&amp;gt;$OPTIONS
ExecReload=/bin/kill -HUP &amp;lt;span class=&amp;quot;hljs-variable&amp;quot;&amp;gt;$MAINPID
Type=simple
KillMode=process
Restart=on-failure
RestartSec=42s

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到，配置文件分成几个区块，每个区块包含若干条键值对。&lt;/p&gt;
&lt;p&gt;下面依次解释每个区块的内容。&lt;/p&gt;
&lt;h2 id=&#34;五-unit-区块启动顺序与依赖关系&#34;&gt;五、 [Unit] 区块：启动顺序与依赖关系。&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Unit&lt;/code&gt;区块的&lt;code&gt;Description&lt;/code&gt;字段给出当前服务的简单描述，&lt;code&gt;Documentation&lt;/code&gt;字段给出文档位置。&lt;/p&gt;
&lt;p&gt;接下来的设置是启动顺序和依赖关系，这个比较重要。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;After&lt;/code&gt;字段：表示如果&lt;code&gt;network.target&lt;/code&gt;或&lt;code&gt;sshd-keygen.service&lt;/code&gt;需要启动，那么&lt;code&gt;sshd.service&lt;/code&gt;应该在它们之后启动。
相应地，还有一个&lt;code&gt;Before&lt;/code&gt;字段，定义&lt;code&gt;sshd.service&lt;/code&gt;应该在哪些服务之前启动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，&lt;code&gt;After&lt;/code&gt;和&lt;code&gt;Before&lt;/code&gt;字段只涉及启动顺序，不涉及依赖关系。&lt;/p&gt;
&lt;p&gt;举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在 postgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。&lt;/p&gt;
&lt;p&gt;设置依赖关系，需要使用&lt;code&gt;Wants&lt;/code&gt;字段和&lt;code&gt;Requires&lt;/code&gt;字段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Wants&lt;/code&gt;字段：表示&lt;code&gt;sshd.service&lt;/code&gt;与&lt;code&gt;sshd-keygen.service&lt;/code&gt;之间存在&amp;quot;弱依赖&amp;quot;关系，即如果&amp;quot;sshd-keygen.service&amp;quot;启动失败或停止运行，不影响&lt;code&gt;sshd.service&lt;/code&gt;继续执行。
&lt;code&gt;Requires&lt;/code&gt;字段则表示&amp;quot;强依赖&amp;quot;关系，即如果该服务启动失败或异常退出，那么&lt;code&gt;sshd.service&lt;/code&gt;也必须退出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，&lt;code&gt;Wants&lt;/code&gt;字段与&lt;code&gt;Requires&lt;/code&gt;字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。&lt;/p&gt;
&lt;h2 id=&#34;六service-区块启动行为&#34;&gt;六、[Service] 区块：启动行为&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Service&lt;/code&gt;区块定义如何启动当前服务。&lt;/p&gt;
&lt;h3 id=&#34;61-启动命令&#34;&gt;6.1 启动命令&lt;/h3&gt;
&lt;p&gt;许多软件都有自己的环境参数文件，该文件可以用&lt;code&gt;EnvironmentFile&lt;/code&gt;字段读取。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;EnvironmentFile&lt;/code&gt;字段：指定当前服务的环境参数文件。该文件内部的&lt;code&gt;key=value&lt;/code&gt;键值对，可以用&lt;code&gt;$key&lt;/code&gt;的形式，在当前配置文件中获取。
上面的例子中，sshd 的环境参数文件是&lt;code&gt;/etc/sysconfig/sshd&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置文件里面最重要的字段是&lt;code&gt;ExecStart&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ExecStart&lt;/code&gt;字段：定义启动进程时执行的命令。
上面的例子中，启动&lt;code&gt;sshd&lt;/code&gt;，执行的命令是&lt;code&gt;/usr/sbin/sshd -D $OPTIONS&lt;/code&gt;，其中的变量&lt;code&gt;$OPTIONS&lt;/code&gt;就来自&lt;code&gt;EnvironmentFile&lt;/code&gt;字段指定的环境参数文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与之作用相似的，还有如下这些字段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ExecReload&lt;/code&gt;字段：重启服务时执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStop&lt;/code&gt;字段：停止服务时执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStartPre&lt;/code&gt;字段：启动服务之前执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStartPost&lt;/code&gt;字段：启动服务之后执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExecStopPost&lt;/code&gt;字段：停止服务之后执行的命令
请看下面的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[Service]
ExecStart=/bin/echo execstart1
ExecStart=
ExecStart=/bin/echo execstart2
ExecStartPost=/bin/echo post1
ExecStartPost=/bin/echo post2
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面这个配置文件，第二行&lt;code&gt;ExecStart&lt;/code&gt;设为空值，等于取消了第一行的设置，运行结果如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;execstart2
post1
post2
所有的启动设置之前，都可以加上一个连词号（&lt;code&gt;-&lt;/code&gt;），表示&amp;quot;抑制错误&amp;quot;，即发生错误的时候，不影响其他命令的执行。比如，&lt;code&gt;EnvironmentFile=-/etc/sysconfig/sshd&lt;/code&gt;（注意等号后面的那个连词号），就表示即使&lt;code&gt;/etc/sysconfig/sshd&lt;/code&gt;文件不存在，也不会抛出错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;62-启动类型&#34;&gt;6.2 启动类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Type&lt;/code&gt;字段定义启动类型。它可以设置的值如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;simple（默认值）：&lt;code&gt;ExecStart&lt;/code&gt;字段启动的进程为主进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;forking：&lt;code&gt;ExecStart&lt;/code&gt;字段将以&lt;code&gt;fork()&lt;/code&gt;方式启动，此时父进程将会退出，子进程将成为主进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oneshot：类似于&lt;code&gt;simple&lt;/code&gt;，但只执行一次，Systemd 会等它执行完，才启动其他服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dbus：类似于&lt;code&gt;simple&lt;/code&gt;，但会等待 D-Bus 信号后启动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notify：类似于&lt;code&gt;simple&lt;/code&gt;，启动结束后会发出通知信号，然后 Systemd 再启动其他服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;idle：类似于&lt;code&gt;simple&lt;/code&gt;，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合
下面是一个&lt;code&gt;oneshot&lt;/code&gt;的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。&lt;/p&gt;
&lt;p&gt;[Unit]
Description=Switch-off Touchpad&lt;/p&gt;
&lt;p&gt;[Service]
Type=oneshot
ExecStart=/usr/bin/touchpad-off&lt;/p&gt;
&lt;p&gt;[Install]
WantedBy=multi-user.target
上面的配置文件，启动类型设为&lt;code&gt;oneshot&lt;/code&gt;，就表明这个服务只要运行一次就够了，不需要长期运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果关闭以后，将来某个时候还想打开，配置文件修改如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Switch-off Touchpad

[Service]
Type=oneshot
ExecStart=/usr/bin/touchpad-off start
ExecStop=/usr/bin/touchpad-off stop
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面配置文件中，&lt;code&gt;RemainAfterExit&lt;/code&gt;字段设为&lt;code&gt;yes&lt;/code&gt;，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用&lt;code&gt;systemctl stop&lt;/code&gt;命令停止服务，&lt;code&gt;ExecStop&lt;/code&gt;指定的命令就会执行，从而重新开启触摸板。&lt;/p&gt;
&lt;h3 id=&#34;63-重启行为&#34;&gt;6.3 重启行为&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Service&lt;/code&gt;区块有一些字段，定义了重启行为。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;KillMode&lt;/code&gt;字段：定义 Systemd 如何停止 sshd 服务。
上面这个例子中，将&lt;code&gt;KillMode&lt;/code&gt;设为&lt;code&gt;process&lt;/code&gt;，表示只停止主进程，不停止任何sshd 子进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;KillMode&lt;/code&gt;字段可以设置的值如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉&lt;/li&gt;
&lt;li&gt;process：只杀主进程&lt;/li&gt;
&lt;li&gt;mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号&lt;/li&gt;
&lt;li&gt;none：没有进程会被杀掉，只是执行服务的 stop 命令。
接下来是&lt;code&gt;Restart&lt;/code&gt;字段。
&lt;code&gt;Restart&lt;/code&gt;字段：定义了 sshd 退出后，Systemd 的重启方式。
上面的例子中，&lt;code&gt;Restart&lt;/code&gt;设为&lt;code&gt;on-failure&lt;/code&gt;，表示任何意外的失败，就将重启sshd。如果 sshd 正常停止（比如执行&lt;code&gt;systemctl stop&lt;/code&gt;命令），它就不会重启。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Restart&lt;/code&gt;字段可以设置的值如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;no（默认值）：退出后不会重启&lt;/li&gt;
&lt;li&gt;on-success：只有正常退出时（退出状态码为0），才会重启&lt;/li&gt;
&lt;li&gt;on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启&lt;/li&gt;
&lt;li&gt;on-abnormal：只有被信号终止和超时，才会重启&lt;/li&gt;
&lt;li&gt;on-abort：只有在收到没有捕捉到的信号终止时，才会重启&lt;/li&gt;
&lt;li&gt;on-watchdog：超时退出，才会重启&lt;/li&gt;
&lt;li&gt;always：不管是什么退出原因，总是重启
对于守护进程，推荐设为&lt;code&gt;on-failure&lt;/code&gt;。对于那些允许发生错误退出的服务，可以设为&lt;code&gt;on-abnormal&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后是&lt;code&gt;RestartSec&lt;/code&gt;字段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;RestartSec&lt;/code&gt;字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待42秒。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;七install-区块&#34;&gt;七、[Install] 区块&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Install&lt;/code&gt;区块，定义如何安装这个配置文件，即怎样做到开机启动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;WantedBy&lt;/code&gt;字段：表示该服务所在的 Target。
&lt;code&gt;Target&lt;/code&gt;的含义是服务组，表示一组服务。&lt;code&gt;WantedBy=multi-user.target&lt;/code&gt;指的是，sshd 所在的 Target 是&lt;code&gt;multi-user.target&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个设置非常重要，因为执行&lt;code&gt;systemctl enable sshd.service&lt;/code&gt;命令时，&lt;code&gt;sshd.service&lt;/code&gt;的一个符号链接，就会放在&lt;code&gt;/etc/systemd/system&lt;/code&gt;目录下面的&lt;code&gt;multi-user.target.wants&lt;/code&gt;子目录之中。&lt;/p&gt;
&lt;p&gt;Systemd 有默认的启动 Target。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ systemctl get-default
multi-user.target
上面的结果表示，默认的启动 Target 是&lt;code&gt;multi-user.target&lt;/code&gt;。在这个组里的所有服务，都将开机启动。这就是为什么&lt;code&gt;systemctl enable&lt;/code&gt;命令能设置开机启动的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 Target 的时候，&lt;code&gt;systemctl list-dependencies&lt;/code&gt;命令和&lt;code&gt;systemctl isolate&lt;/code&gt;命令也很有用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;查看-multi-usertarget-包含的所有服务&#34;&gt;查看 multi-user.target 包含的所有服务&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ systemctl list-dependencies multi-user.target

# 切换到另一个 target
# shutdown.target 就是关机状态
$ sudo systemctl isolate shutdown.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来说，常用的 Target 有两个：一个是&lt;code&gt;multi-user.target&lt;/code&gt;，表示多用户命令行状态；另一个是&lt;code&gt;graphical.target&lt;/code&gt;，表示图形用户状态，它依赖于&lt;code&gt;multi-user.target&lt;/code&gt;。官方文档有一张非常清晰的 &lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup&#34;&gt;Target 依赖关系图&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;八target-的配置文件&#34;&gt;八、Target 的配置文件&lt;/h2&gt;
&lt;p&gt;Target 也有自己的配置文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ systemctl cat multi-user.target&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Multi-User System
Documentation=man:systemd.special(7)
Requires=basic.target
Conflicts=rescue.service rescue.target
After=basic.target rescue.service rescue.target
AllowIsolate=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，Target 配置文件里面没有启动命令。&lt;/p&gt;
&lt;p&gt;上面输出结果中，主要字段含义如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Requires&lt;/code&gt;字段：要求&lt;code&gt;basic.target&lt;/code&gt;一起运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Conflicts&lt;/code&gt;字段：冲突字段。如果&lt;code&gt;rescue.service&lt;/code&gt;或&lt;code&gt;rescue.target&lt;/code&gt;正在运行，&lt;code&gt;multi-user.target&lt;/code&gt;就不能运行，反之亦然。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;After&lt;/code&gt;：表示&lt;code&gt;multi-user.target&lt;/code&gt;在&lt;code&gt;basic.target&lt;/code&gt; 、 &lt;code&gt;rescue.service&lt;/code&gt;、 &lt;code&gt;rescue.target&lt;/code&gt;之后启动，如果它们有启动的话。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AllowIsolate&lt;/code&gt;：允许使用&lt;code&gt;systemctl isolate&lt;/code&gt;命令切换到&lt;code&gt;multi-user.target&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;九修改配置文件后重启&#34;&gt;九、修改配置文件后重启&lt;/h2&gt;
&lt;p&gt;修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;重新加载配置文件&#34;&gt;重新加载配置文件&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ sudo systemctl daemon-reload&amp;gt; 
# 重启相关服务
$ sudo systemctl restart foobar
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

    </description>
    </item>
    
    <item>
    <title>玩玩LFS-从源码构建Linux系统</title>
    <link>https://blog.wiseai.cn/post/%E7%8E%A9%E7%8E%A9lfs-%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAlinux%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/%E7%8E%A9%E7%8E%A9lfs-%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAlinux%E7%B3%BB%E7%BB%9F/</guid>
    <description>
        &lt;p&gt;官方网站：http://www.linuxfromscratch.org/&lt;/p&gt;
&lt;p&gt;LFS Book 翻译项目:https://github.com/LCTT/LFS-BOOK&lt;/p&gt;
&lt;p&gt;Linux From Scratch （简体中文版） Version 8.3-systemd&lt;/p&gt;
&lt;p&gt;LFS：Linux From Scratch是主要书籍，是从中衍生所有其他项目的基础。&lt;/p&gt;
&lt;p&gt;BLFS：Beyond Linux From Scratch可帮助您将已完成的LFS安装扩展到更加个性化和可用的系统。&lt;/p&gt;
&lt;p&gt;ALFS：Automated Linux From Scratch提供了自动化和管理LFS和BLFS构建的工具。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux下合并文件</title>
    <link>https://blog.wiseai.cn/post/linux%E4%B8%8B%E5%90%88%E5%B9%B6%E6%96%87%E4%BB%B6/</link>
    <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E4%B8%8B%E5%90%88%E5%B9%B6%E6%96%87%E4%BB%B6/</guid>
    <description>
        &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

for ((i=0; i&amp;lt;700; i++))
do 
cat $i.ts &amp;gt;&amp;gt; all.ts
done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;某视频APP下载位置：手机存储/Android/data/com.tencent.qqlive/files/videos_***/&lt;/p&gt;
&lt;p&gt;在这个目录下找下载的视频文件(以.hls结束的），找找就好了。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux中修改limits值</title>
    <link>https://blog.wiseai.cn/post/linux%E4%B8%AD%E4%BF%AE%E6%94%B9limits%E5%80%BC/</link>
    <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E4%B8%AD%E4%BF%AE%E6%94%B9limits%E5%80%BC/</guid>
    <description>
        &lt;p&gt;在/etc/security/limits.conf 最后增加:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;* soft nofile 65535&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;* hard nofile 65535&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改ulimit值&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux中的搜索</title>
    <link>https://blog.wiseai.cn/post/linux%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</link>
    <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</guid>
    <description>
        &lt;p&gt;一、whereis&lt;/p&gt;
&lt;p&gt;二、which&lt;/p&gt;
&lt;p&gt;三、locate&lt;/p&gt;
&lt;p&gt;安装：mlocate&lt;/p&gt;
&lt;p&gt;之后更新数据库：updatedb&lt;/p&gt;
&lt;p&gt;四、find&lt;/p&gt;
&lt;p&gt;五、catfish&lt;/p&gt;
&lt;p&gt;一款Linux桌面图形软件，可以在桌面图形化的搜索文件。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux中缺少运行库的解决办法</title>
    <link>https://blog.wiseai.cn/post/linux%E4%B8%AD%E7%BC%BA%E5%B0%91%E8%BF%90%E8%A1%8C%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
    <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E4%B8%AD%E7%BC%BA%E5%B0%91%E8%BF%90%E8%A1%8C%E5%BA%93%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
    <description>
        &lt;ol&gt;
&lt;li&gt;编辑 vi /etc/ld.so.conf&lt;/li&gt;
&lt;li&gt;root权限执行 /sbin/ldconfig -v命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样 ldd 才能找到这个库&lt;/p&gt;
&lt;p&gt;/etc/ld.so.conf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这个文件记录了编译时使用的动态链接库的路径。
默认情况下，编译器只会使用/lib和/usr/lib这两个目录下的库文件
如果你安装了某些库，没有指定 –prefix=/usr 这样lib库就装到了/usr/local下，而又没有在/etc/ld.so.conf中添加/usr/local/lib，就会报错了
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ldconfig是个什么东东吧 ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;它是一个程序，通常它位于/sbin下，是root用户使用的东东。具体作用及用法可以man ldconfig查到
简单的说，它的作用就是将/etc/ld.so.conf列出的路径下的库文件 缓存到/etc/ld.so.cache 以供使用
因此当安装完一些库文件，(例如刚安装好glib)，或者修改ld.so.conf增加新的库路径后，需要运行一下/sbin/ldconfig
使所有的库文件都被缓存到ld.so.cache中，如果没做，即使库文件明明就在/usr/lib下的，也是不会被使用的，结果
编译过程中抱错，缺少xxx库。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上尝试后发现还是不行，添加 /usr/lib/x86_64-linux-gnu 有许多QT库文件&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>mariadb和mysql命令</title>
    <link>https://blog.wiseai.cn/post/mariadb%E5%92%8Cmysql%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/mariadb%E5%92%8Cmysql%E5%91%BD%E4%BB%A4/</guid>
    <description>
        &lt;p&gt;错误：ERROR 1045 (28000): Access denied for user &amp;lsquo;root&amp;rsquo;@&amp;rsquo;localhost&amp;rsquo; (using password: NO)&lt;/p&gt;
&lt;p&gt;1.首先停掉数据库服务:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# systemctl stop mariadb.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.使用mysqld_safe来启动mysqld服务器:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysqld_safe --user=mysql --skip-grant-tables --skip-networking&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.无密码登录:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysql -u root mysql&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;命令行登录：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysql -h 127.0.0.1 -u root -p -P 3306&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;新建用户：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# create user &#39;newuser&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# insert into mysql.user(user,host,password) values(&#39;newuser&#39;,&#39;localhost&#39;,password(&#39;123456&#39;));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除用户：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# DROP USER &#39;newuser&#39;@&#39;localhost&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;授权:&lt;/p&gt;
&lt;p&gt;注：you password获取方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# select password(&#39;你的明文密码&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所有权限&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# grant all privileges on *.* to &#39;newuser&#39;@&#39;localhost&#39; identified by password &#39;you password&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;部分权限&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# grant insert,update,delete,select on *.* to &#39;newuser&#39;@&#39;localhost&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给予test数据库所有权限：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# grant all on test.* to &#39;newuser&#39;@&#39;localhost&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;**注意：**需要执行 &lt;strong&gt;FLUSH PRIVILEGES&lt;/strong&gt; 语句重新载入授权表。&lt;/p&gt;
&lt;p&gt;查看队列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# show processlist;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# show full processlist;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# CREATE DATABASE IF NOT EXISTS test DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;选择数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# USE test;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# ALTER DATABASE test DEFAULT CHARACTER SET gb2312 DEFAULT COLLATE gb2312_chinese_ci;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# DROP DATABASE IF EXISTS test;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# SHOW DATABASES;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS `blog_users`;（如果存在，删除表再添加）
CREATE TABLE `blog_users` (
`ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
`user_login` varchar(60) NOT NULL DEFAULT &#39;&#39;,
`user_pass` varchar(255) NOT NULL DEFAULT &#39;&#39;,
`user_nicename` varchar(50) NOT NULL DEFAULT &#39;&#39;,
`user_email` varchar(100) NOT NULL DEFAULT &#39;&#39;,
`user_url` varchar(100) NOT NULL DEFAULT &#39;&#39;,
`user_registered` datetime NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39;,
`user_activation_key` varchar(255) NOT NULL DEFAULT &#39;&#39;,
`user_status` int(11) NOT NULL DEFAULT &#39;0&#39;,
`display_name` varchar(250) NOT NULL DEFAULT &#39;&#39;,
PRIMARY KEY (`ID`),
KEY `user_login_key` (`user_login`),
KEY `user_nicename` (`user_nicename`),
KEY `user_email` (`user_email`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# SHOW TABLES;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看表结构：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# DESC test；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看表如何创建：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# show create table user \G;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# DROP TABLE test;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除表中的所有数据并自增长数据从1开始：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# TRUNCATE TABLE 表名;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;插入数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert into &#39;blog_users&#39; (&#39;ID&#39;, &#39;user_login&#39;, &#39;user_pass&#39;) values (&#39;1&#39;,&#39;admin&#39;,&#39;$P$BnOWIsBwuIA7Hf3gZh9fVuY6sWkKmt1&#39;); &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# INSERT INTO test set title = &#39;这个是title&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# DELETE FROM test where title = &#39;这个是title&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改数据或更新数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# UPDATE test set title = &#39;这个是title&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# SELECT id, title FROM test where title = &#39;这个是title&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;备份数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysqldump -uroot -p123456 数据库 &amp;gt; /tmp/数据库.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;恢复数据库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysql -uroot -p123456 数据库 &amp;lt; /tmp/数据库.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;备份表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysqldump -uroot -p 数据库 表 &amp;gt; /tmp/表.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;恢复表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysql -uroot -p 数据库 &amp;lt; /tmp/表.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;备份所有库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysqldump -uroot -p -A &amp;gt; /tmp/123.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;只备份表结构：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mysqldump -uroot -p -d 数据库 &amp;gt; /tmp/数据库.sql&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux屏录软件</title>
    <link>https://blog.wiseai.cn/post/linux%E5%B1%8F%E5%BD%95%E8%BD%AF%E4%BB%B6/</link>
    <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E5%B1%8F%E5%BD%95%E8%BD%AF%E4%BB%B6/</guid>
    <description>
        &lt;h3 id=&#34;一simplescreenrecorder&#34;&gt;一、SimpleScreenRecorder&lt;/h3&gt;
&lt;p&gt;可以记录其他的应用程序和你的屏幕上运行的游戏。这是一个简单但功能强大，功能丰富的屏幕记录软件，包括一个易于使用的界面。
只支持Linux系统，包含在rpmfusion中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# yum install simplescreenrecorder&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# apt install simplescreenrecorder&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其它安装方式：https://www.maartenbaert.be/simplescreenrecorder/&lt;/p&gt;
&lt;p&gt;它的一些显著特点包括:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;基于QT的简单GUI
可以记录整个屏幕或它的一部分	
从OpenGL的应用程序直接记录
良好的视频和音频同步
有助于减少慢速机的视频帧速率
支持暂停和恢复功能
显示了了在记录过程期间的统计
支持录制过程中预览
默认设置已经很好，不需要进行过多设置
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二-obs-open-broadcaster-software&#34;&gt;二、 OBS (Open Broadcaster Software)&lt;/h3&gt;
&lt;p&gt;OBS 是一个免费、开源和跨平台的视频记录和流媒体应用程序,它可以工作在Linux、Windows和Mac OS X。
Windows需要从官网下载（https://obsproject.com/），Linux系统包含在rpmfusion中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;＃ yum install obs-studio&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# apt install ffmpeg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# add-apt-repository ppa:obsproject/obs-studio&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# apt update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# apt install obs-studio&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它有几个强大的功能和显著的功能包括:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;支持使用H264和AAC编码
支持英特尔QSV和NVENC
支持无限数量的场景和输入源
输出文件使用MP4 或FLV 格式
允许在记录会话中访问网络摄像头，采集卡等
高度可扩展的插件,开发人员可以使用api编写自己的插件&lt;/code&gt;&lt;/pre&gt;

    </description>
    </item>
    
    <item>
    <title>adduser&amp;addgroup添加用户&amp;用户组</title>
    <link>https://blog.wiseai.cn/post/adduseraddgroup%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E7%94%A8%E6%88%B7%E7%BB%84/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/adduseraddgroup%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E7%94%A8%E6%88%B7%E7%BB%84/</guid>
    <description>
        &lt;ul&gt;
&lt;li&gt;添加一个普通用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# adduser [--home 主目录] [--shell SHELL] [--no-create-home] [--uid ID] [--firstuid ID] [--lastuid ID] [--gecos GECOS] [--ingroup 用户组 | --gid ID][--disabled-password] [--disabled-login] [--add_extra_groups] 用户名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一个系统用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# adduser --system [--home 主目录] [--shell SHELL] [--no-create-home] [--uid ID] [--gecos GECOS] [--group | --ingroup 用户组 | --gid ID] [--disabled-password] [--disabled-login] [--add_extra_groups] 用户名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一个用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# adduser --group [--gid ID] 用户组名&lt;/code&gt;
&lt;code&gt;# addgroup [--gid ID] 用户组名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一个系统用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# addgroup --system [--gid ID] 用户组名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将一个已存在的用户添加至一个已存在的用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# adduser 用户名 用户组名&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常规设置：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--quiet | -q          不在标准输出中给出进度信息
  --force-badname       允许用户名不匹配：
                        NAME_REGEX[_SYSTEM] 配置变量
  --help | -h           给出本命令用法
  --version | -v        版本号和版权信息
  --conf | -c 文件      使用文件中的配置
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>docker学习笔记</title>
    <link>https://blog.wiseai.cn/post/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
    <description>
        &lt;p&gt;现在docker分企业版和社区版，如果自己用的话，还是社区版吧！！！&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装：&lt;/h2&gt;
&lt;p&gt;centos7：&lt;/p&gt;
&lt;p&gt;1.卸载旧版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ yum remove docker \
             docker-client \
             docker-client-latest \
             docker-common \
             docker-latest \
             docker-latest-logrotate \
             docker-logrotate \
             docker-selinux \
             docker-engine-selinux \
             docker-engine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.安装依赖包：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yum install -y yum-utils device-mapper-persistent-data lvm2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.安装docker官方库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.安装最新稳定版本docker：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yum install docker-ce&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果提示接受GPG密钥，请验证指纹是否匹配&lt;code&gt;060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35&lt;/code&gt;，如果匹配 ，则接受它。&lt;/p&gt;
&lt;p&gt;ubuntu:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    $ sudo apt-get update
    $ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg &amp;#39;sudo pt-key add -&amp;#39;
    $ sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34;
    $ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其它发行版本的请参考：&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/#os-requirements&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;p&gt;1.Linux更改Docker运行根目录&lt;/p&gt;
&lt;p&gt;Docker 的配置文件可以设置大部分的后台进程参数，在各个操作系统中的存放位置不一致:&lt;/p&gt;
&lt;p&gt;在 ubuntu 中的位置是：/etc/default/docker&lt;/p&gt;
&lt;p&gt;在 centos 中的位置是：/etc/sysconfig/docker&lt;/p&gt;
&lt;p&gt;只需要更改 vim /etc/sysconfig/docker 成&lt;/p&gt;
&lt;p&gt;为OPTIONS选项添加参数：&amp;ndash;graph=/home/docker &amp;ndash;icc=false &amp;ndash;graph=/your/dir&lt;/p&gt;
&lt;p&gt;&amp;ndash;icc=false禁用容器内部通信，为安全建议添加，内部通信使用link&lt;/p&gt;
&lt;p&gt;&amp;ndash;graph=/your/dir 自定义运行目录&lt;/p&gt;
&lt;p&gt;或者使用软件链接：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# ln -sv /home/docker/ /var/lib/docker&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搞定！&lt;/p&gt;
&lt;p&gt;2.iptables设置：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# iptables -A INPUT -s 172.17.0.0/16 -d 172.17.0.0/16 -j ACCEPT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找镜像：docker search centos&lt;/li&gt;
&lt;li&gt;下载镜像：docker pull centos&lt;/li&gt;
&lt;li&gt;列出本地镜像：docker images&lt;/li&gt;
&lt;li&gt;删除镜像：docker rmi 镜像名&lt;/li&gt;
&lt;li&gt;运行容器：
&lt;code&gt;# docker run -it --name 容器名 --link 链接容器名:别名 -v 本地绝对路径:容器路径  -p ip:本地端口:容器端口/udp -e --restart=always （docker服务启动后容器自动启动，no 不启动；on-failure 容器退出状态非0时重启）MYSQL_ROOT_PASSWORD&amp;lt;span class=&amp;quot;hljs-subst&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;&#39;passwd&#39;(设置环境变量） --dns=自定义的DNS -d(后台运行) 镜像 运行命令 &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列出运行容器：docker container ls&lt;/li&gt;
&lt;li&gt;列出所有容器：docker container ls -a&lt;/li&gt;
&lt;li&gt;运行容器：docker start 容器名（-i参数进入命令行）&lt;/li&gt;
&lt;li&gt;进入运行容器：docker exec -it 容器名 /bin/bash&lt;/li&gt;
&lt;li&gt;停止容器：docker stop 容器名&lt;/li&gt;
&lt;li&gt;kill容器：docker kill 容器名&lt;/li&gt;
&lt;li&gt;删除容器：docker rm 容器名&lt;/li&gt;
&lt;li&gt;查看容器信息：docker inspect 容器名&lt;/li&gt;
&lt;li&gt;查看容器log：docker logs 容器名&lt;/li&gt;
&lt;li&gt;利用已有容器修改或建立新的镜像：docker commit -m &amp;ldquo;说明信息&amp;rdquo; -a &amp;ldquo;用户信息&amp;rdquo; 容器名 centos7/nginx-php:v2&lt;/li&gt;
&lt;li&gt;镜像存出：docker save -o ubuntu_14.04.tar ubuntu:14.04或docker save &amp;gt; ubuntu_14.04.tar ubuntu:14.04&lt;/li&gt;
&lt;li&gt;镜像载入：docker load -i ubuntu_14.04.tar或docker load &amp;lt; ubuntu_14.04.tar&lt;/li&gt;
&lt;li&gt;容器导出：docker export ubuntu &amp;gt; ubuntu.tar&lt;/li&gt;
&lt;li&gt;容器导入：docker import ubuntu.tar test/ubuntu
注意：
容器导入后就成镜像了，如果容器有运行的命令，在run的时候也一定要加上命令，否则不能成功创建。
镜像就不存在这个问题&lt;/li&gt;
&lt;li&gt;从主机复制到容器：docker cp host_path containerID:container_path&lt;/li&gt;
&lt;li&gt;从容器复制到主机：docker cp containerID:container_path host_path&lt;/li&gt;
&lt;li&gt;最后添加&amp;quot;运行命令&amp;quot;的shell里，如果没有驻留服务的话，一定要在最后一行写bash，否则无法启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker网络设置&#34;&gt;docker网络设置：&lt;/h2&gt;
&lt;p&gt;docker安装后，默认会创建三种网络类型，bridge、host和none，可通过如下命令查看：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# docker network ls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bridge：网络桥接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下启动、创建容器都是用该模式，所以每次docker容器重启时会按照顺序获取对应IP地址，这就导致容器每次重启，IP都发生变化，这种类型下无法设置固定IP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;none：无指定网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;启动容器时，可以通过-network=none，docker容器不会分配局域网ip&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;host：主机网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker容器的网络会附属在主机上，两者是互通的。这种类型下可以设置固定IP&lt;/p&gt;
&lt;h3 id=&#34;创建固定ip容器&#34;&gt;创建固定ip容器：&lt;/h3&gt;
&lt;h4 id=&#34;1创建自定义网络类型并且指定网段&#34;&gt;1.创建自定义网络类型，并且指定网段&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;# docker network create --subnet=192.168.168.0/30 mynet&lt;/code&gt;
通过docker network ls可以查看到网络类型中多了一个mynet&lt;/p&gt;
&lt;h4 id=&#34;2使用新的网络类型创建并启动容器&#34;&gt;2.使用新的网络类型创建并启动容器&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;# docker run -it --name test --net mynet --ip 192.168.168.2 centos /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;存在问题&#34;&gt;存在问题：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker-storage-setup不能启动的问题。
编辑/etc/sysconfig/docker-storage-setup文件
添加STORAGE_DRIVER=&amp;ldquo;overlay&amp;rdquo;&lt;/li&gt;
&lt;li&gt;容器启动自动运行
编辑/etc/bashrc文件
添加运行命令在文件最后&lt;/li&gt;
&lt;/ul&gt;

    </description>
    </item>
    
    <item>
    <title>efi和grub2相关配置文件及命令</title>
    <link>https://blog.wiseai.cn/post/efi%E5%92%8Cgrub2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/efi%E5%92%8Cgrub2%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E5%91%BD%E4%BB%A4/</guid>
    <description>
        &lt;h3 id=&#34;一配置文件目录&#34;&gt;一、配置文件目录&lt;/h3&gt;
&lt;p&gt;/etc/grub2/目录下
/etc/default/grub&lt;/p&gt;
&lt;h3 id=&#34;二更新引导项目&#34;&gt;二、更新引导项目&lt;/h3&gt;
&lt;p&gt;根据配置文件目录下的顺序更新启动项，命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# grub2-mkconfig -o /boot/grub2/grub.cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-o 选项为输出到那个文件&lt;/p&gt;
&lt;p&gt;efi下的/boot/efi/EFI/centos/grub.cfg文件一般调用/boot/grub2/grub.cfg这个文件&lt;/p&gt;
&lt;p&gt;类debian发行版，一般用这个命令：
&lt;code&gt;# update-grub2&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;三更换默认启动项&#34;&gt;三、更换默认启动项&lt;/h3&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# grub2-set-default 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般从0开始&lt;/p&gt;
&lt;h3 id=&#34;四安装&#34;&gt;四、安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;# grub-install --efi-directory=/boot/efi/ --boot-directory=/boot/ --removable /dev/sda&lt;/code&gt;
几个需要说明的地方：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--efi-directory=/boot/efi/&lt;/code&gt;这个位置的问题，如果efi分区是单独挂载的，就直接写这个目录就可以了，不用加efi，它会在这个目录下建立EFI的目录，写入相关文件。
&lt;code&gt;--boot-directory=/boot/&lt;/code&gt;这个不用加grub2，它会自己生成grub2目录，写入相关文件
&lt;code&gt;--removable&lt;/code&gt;如果是移动设备，一定要加这个选项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;五常用命令&#34;&gt;五、常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动常用的grub命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root (hd0,2)          #设置某块分区为根目录
kernel /vmlinuz       #加载linux kernel
initrd /initrd.gz     #加载驱动，或者虚拟rootfs
boot                  #启动加载的kernel
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查找文件
&lt;code&gt;find --set-root --ignore-floppies --ignore-cd /usr/bin/cp   #查找/usr/bin/cp文件，并将分区设为根目录，忽略软盘和cd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加载iso&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root (hdx,x)                    #设置根目录
map --mem /xx.iso (0xff)        #映射iso文件到模拟cdrom 0xff
map --hook                      #映射钩子
chainloader (0xff)              #链接到映射的CDROM
boot                            #启动
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;grub命名规则，(hd32)为第一仿真cd/dvd设备，等同于0xa0，(hd33)为二仿真cd/dvd设备，0xff为最后一个。grub中将0xa0以上都认做cdrom。
&lt;code&gt;map --mem&lt;/code&gt; 用于仿真不连续的存放的iso文件，不加则必须连续存放，碎片整理后再存放iso一般才会连续。
另外grub不支持大的iso，如果iso不支持则提示:inviladorupsupported executableformat。&lt;/p&gt;
&lt;h3 id=&#34;六添加efi启动项&#34;&gt;六、添加efi启动项&lt;/h3&gt;
&lt;p&gt;在安装程序不完善的时候，有时候会存在没有启动项的问题，这个时候就要用efibootmgr管理UEFI启动项。
&lt;code&gt;# efibootmgr&lt;/code&gt;
这个命令会显示所有已经添加的启动项，BootOrder后会显示启动顺序。
&lt;code&gt;# efibootmgr -c -w -L &amp;quot;BootOptionName&amp;quot; -d /dev/sda -p 1 -l \\EFI\\UOS\\grubx64.efi&lt;/code&gt;
BootOptionName是你启动项的名字，修改为自己的
-d修改那个硬盘
-p分区位置，默认为1
-l是启动efi文件的路径，注意是\而不是//
这样就添加了EFI启动项，刚添加的启动项的顺序排第一个
&lt;code&gt;# efibootmgr -b 0013 -B&lt;/code&gt;
删除编号为0013的启动项
&lt;code&gt;# efibootmgr -o 0012,0010,000f&lt;/code&gt;
修改启动顺序。
这个命令没有认真研究，有空再说吧。&lt;/p&gt;
&lt;h3 id=&#34;七需要注意的地方&#34;&gt;七、需要注意的地方&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;grub背景图片的问题，最近用gimp做了个图片设为grub2启动背景图片，grub2提示错误，最后发现是图片的问题。&lt;/code&gt;&lt;/pre&gt;

    </description>
    </item>
    
    <item>
    <title>filebrowser的安装和使用</title>
    <link>https://blog.wiseai.cn/post/filebrowser%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/filebrowser%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
    <description>
        &lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;
&lt;p&gt;可以自己编译，必须安装golang v1.16以上和nodejs，最好是最新版本，否则会出现一些问题。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://github.com/filebrowser/filebrowser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：如果有gitee的可以改，速度快&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ make help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：编译帮助&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ make build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：开始编译，完成后在当前目录下filebrowser&lt;/p&gt;
&lt;h2 id=&#34;使用简介&#34;&gt;使用简介：&lt;/h2&gt;
&lt;p&gt;直接输入命令：
&lt;code&gt;./filebrowser&lt;/code&gt;
会在当前目录下生成数据库文件，并开启服务&lt;/p&gt;
&lt;p&gt;关闭服务后，输入以下命令进行设置：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser config cat&lt;/code&gt;查看配置文件，这个配置是写入数据库里的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser config set --address 0.0.0.0&lt;/code&gt;打开所有端口&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;config set --address&lt;/code&gt;可以从配置文件里看，想设置那个就把address换成那个&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser  config set --port 80&lt;/code&gt;设置端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser  config set --locale zh-cn&lt;/code&gt;设置语言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser  config set --log /your/path/filebrowser.log&lt;/code&gt;设置日志&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser  config set --root /your/path/&lt;/code&gt;设置根目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser  users add root password --perm.admin&lt;/code&gt;这个是添加用户，其中的root和password分别是用户名和密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser -d /you/path/filebrowser.db config init&lt;/code&gt;这里的-d是指定数据库文件，config init是初始化，这个命令应该一开始就执行，但是什么参数都不带的话，会自己生成。&lt;/p&gt;
&lt;p&gt;设置https访问：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser  config set --port 443&lt;/code&gt;设置https端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser/filebrowser config set -t &amp;quot;/path/to/***.pem&amp;quot;&lt;/code&gt;设置证书&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./filebrowser/filebrowser config set -k &amp;quot;/path/to/***.key&amp;quot;&lt;/code&gt;设置key&lt;/p&gt;
&lt;p&gt;设置系统服务：位置&lt;code&gt;/lib/systemd/system/filebrowser.service&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-[Unit]&#34; data-lang=&#34;[Unit]&#34;&gt;Description=File Browser
After=network.target

[Service]
ExecStart=/usr/local/bin/filebrowser -d /your/path/filebrowser.db

[Install]
WantedBy=multi-user.target```
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>FTP服务器架设（vsftpd）</title>
    <link>https://blog.wiseai.cn/post/ftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E8%AE%BEvsftpd/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/ftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E8%AE%BEvsftpd/</guid>
    <description>
        &lt;h2 id=&#34;安装&#34;&gt;安装：&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;# dnf install vsftpd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;**FTP主动模式：客户端从一个任意的非特权端口N（N&amp;gt;1024）连接到FTP服务器的port 21命令端口。然后客户端开始监听端口N+1，**并发送FTP命令&amp;quot;port N+1&amp;quot;到FTP服务器。接着服务器会从它自己的数据端口（20）连接到客户端指定的数据端口（N+1）。&lt;/p&gt;
&lt;p&gt;**FTP被动模式：客户端从一个任意的非特权端口N（N&amp;gt;1024）连接到FTP服务器的port 21命令端口。然后客户端开始监听端口N+1，**同时客户端提交 PASV命令。服务器会开启一个任意的非特权端口（P &amp;gt;1024），并发送PORT P命令给客户端。然后客户端发起从本地端口N+1到服务器的端口P的连接用来传送数据。&lt;/p&gt;
&lt;p&gt;端口：
主动模式：TCP 21（指令），20（数据）端口&lt;/p&gt;
&lt;p&gt;被动模式：TCP 21（指令），大于1024端口传输数据（可在配置文件中指定范围）&lt;/p&gt;
&lt;p&gt;生成证书：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ftp.pem -out ftp.pem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置文件：&lt;/p&gt;
&lt;p&gt;/etc/vsftpd/vsftpd.conf&lt;/p&gt;
&lt;p&gt;严格来说,整个 vsftpd 的配置文件就只有这个档案!这个档案的设定是以 bash的变量设定相同的方式来处理的, 也就是『参数=设定值』来设定的,注意, 等号两边不能有空白喔!至于详细的 vsftpd.conf 可以使用 『 man 5 vsftpd.conf 』来详查。&lt;/p&gt;
&lt;p&gt;/etc/pam.d/vsftpd&lt;/p&gt;
&lt;p&gt;这个是 vsftpd 使用 PAM 模块时的相关配置文件。主要用来作为身份认证之用,还有一些用户身份的抵挡功能, 也是透过这个档案来达成的。&lt;/p&gt;
&lt;p&gt;/etc/vsftpd/ftpusers&lt;/p&gt;
&lt;p&gt;与上一个档案有关系,也就是 PAM 模块 (/etc/pam.d/vsftpd) 所指定的那个无法登入的用户配置文件啊! 这个档案的设定很简单,你只要将『不想让他登入FTP 的账号』写入这个档案即可。&lt;/p&gt;
&lt;p&gt;/etc/vsftpd/user_list&lt;/p&gt;
&lt;p&gt;这个档案是否能够生效与 vsftpd.conf 内的两个参数有关,分别是『 userlist_enable, userlist_deny 』。 如果说 /etc/vsftpd/ftpusers 是PAM 模块的抵挡设定项目,那么这个 /etc/vsftpd/user_list 则是 vsftpd 自定义的抵挡项目。事实上这个档案与 /etc/vsftpd/ftpusers 几乎一模一样, 在预设的情况下,你可以将不希望可登入 vsftpd 的账号写入这里。不过这个档案的功能会依据 vsftpd.conf 配置文件内的 serlist_deny={YES/NO} 而不同。&lt;/p&gt;
&lt;p&gt;/etc/vsftpd/chroot_list&lt;/p&gt;
&lt;p&gt;这个档案预设是不存在的,所以你必须要手动自行建立。这个档案的主要功能是可以将某些账号的使用者 chroot 在他们的家目录下!但这个档案要生效与vsftpd.conf 内的『 chroot_list_enable, chroot_list_file 』两个参数有关。如果你想要将某些实体用户限制在他们的家目录下而不许到其他目录去,可以启动这个设定项目。&lt;/p&gt;
&lt;p&gt;/usr/sbin/vsftpd&lt;/p&gt;
&lt;p&gt;这就是 vsftpd 的主要执行档，vsftpd 只有这一个执行档。&lt;/p&gt;
&lt;p&gt;/var/ftp/&lt;/p&gt;
&lt;p&gt;这个是 vsftpd 的预设匿名者登入的根目录，其实与 ftp 这个账号的家目录有关。&lt;/p&gt;
&lt;p&gt;!!服务器环境设定&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;### 使用本地时间

use_localtime=yes

dirmessage_enable=yes

xferlog_enable=yes

connect_from_port_20=yes

xferlog_std_format=yes

listen=yes

pam_service_name=vsftpd

tcp_wrappers=yes

### 欢迎信息

banner_file=/etc/vsftpd/welcome.txt

### 限制带宽单位Bytes/秒

local_max_rate=100000000

### 限制最大同时在线人数

max_clients=100

max_per_ip=100

### 数据流传输10分钟停止传输

data_connection_timeout=600

### 发呆超过 10 分钟就断线

idle_session_timeout=600

write_enable=yes

userlist_enable=yes

userlist_deny=no

### user_list文件必须建立

userlist_file=/etc/vsftpd/user_list

### 为了避免一个安全漏洞，从 vsftpd 2.3.5 开始，chroot 目录必须不可写。

chroot_local_user=yes

chroot_list_enable=yes

### chroot_list必须建立，空文件都可以

chroot_list_file=/etc/vsftpd/chroot_list

### 被动式端口范围设定

pasv_min_port=65500

pasv_max_port=65535

### 设定上传文件权限

local_umask=002

### anonymous设定，设定上传目录拥有者为ftp

anonymous_enable=yes

no_anon_password=yes

anon_max_rate=100000000

anon_other_write_enable=yes

anon_mkdir_write_enable=yes

anon_upload_enable=yes

anon_root=/var/vsftpd/

### 下两行的作用是修改anonymous上传文件的拥有者为daemon,所以anonymous上传的文件是不能下载的，只有修改权限后才能下载

chown_uploads=yes

chown_username=daemon

### 针对实体账号的设定

local_enable=yes

### 针对 SSL 所加入的特别参数。

### 启动 SSL 的支持

ssl_enable=YES

### 但是不允许匿名者使用 SSL 喔

allow_anon_ssl=NO

### 强制实体用户数据传输加密

force_local_data_ssl=YES

### 登入时的帐密也加密

force_local_logins_ssl=YES

### 支持 TLS 方式即可,底下不用启动

ssl_tlsv1=YES

ssl_sslv2=NO

ssl_sslv3=NO

### 预设 RSA 加密的凭证档案所在

rsa_cert_file=/etc/vsftpd/vsftpd.pem
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;网上一个详细的教程值得参考&#34;&gt;网上一个详细的教程，值得参考&lt;/h1&gt;
&lt;h3 id=&#34;一安装vsftpd及相关组件&#34;&gt;一、安装vsftpd及相关组件：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;# yum -y install vsftpd db5.3-util&lt;/code&gt;
注意：这里的db5.3在系统更新的时候可以会变名字，所以用&lt;code&gt;apt list db*&lt;/code&gt;查找下再安装。&lt;/p&gt;
&lt;h3 id=&#34;二修改ftp相关帐户&#34;&gt;二、修改FTP相关帐户：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;vsftpd服务的宿主用户
&lt;code&gt;# useradd vsftpd -s /sbin/nologin&lt;/code&gt;
默认的vsftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为vsftpd的用户，用他来作为支持vsftpd的服务宿主用户。由于该用户仅用来支持vsftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户。
这一步现在可能不需要了，先放着。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vsftpd的虚拟宿主用户
&lt;code&gt;# useradd ftp -d /var/www/html/ -s /sbin/nologin&lt;/code&gt;
&lt;code&gt;# chown -R ftp:ftp /var/www/html/&lt;/code&gt;
vsftpd的虚拟用户并不是系统用户，也就是说这些FTP的用户在系统中是不存在的。他们的总体权限其实是集中寄托在一个在系统中的某一个用户身上的，所谓vsftpd的虚拟宿主用户，就是这样一个支持着所有虚拟用户的宿主用户。由于他支撑了FTP的所有虚拟的用户，那么他本身的权限将会影响着这些虚拟的用户，因此，处于安全性的考虑，也要非分注意对该用户的权限的控制，该用户也绝对没有登陆系统的必要，这里也设定他为不能登陆系统的用户。ftp用户在安装vsftpd的时候就已经添加了，我们只需要将它&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、vsftpd.conf基本配置：
配置 /etc/vsftpd/vsftpd.conf文件，这里我们只写有变动的地方，其它的保持默认。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#ssl加密传输
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=YES

#被动ftp
#listen_port=56880
#pasv_min_port=30000
#pasv_max_port=35000

#主动ftp，这个只需要打开20和21两个端口，在负载比较小的时候，不想开多个端口的时候，可以使用
pasv_enable=NO

#这个地方一定要注意，被卡这儿好久
userlist_enable=YES
userlist_deny=NO
userlist_file=/etc/vsftpd/user_list

tcp_wrappers=YES

chroot_local_user=YES
chroot_list_file=/etc/vsftpd/chroot_list

#虚拟用户
guest_enable=YES
guest_username=ftp
virtual_use_local_privs=YES
pam_service_name=vsftpd

#独立用户设置
user_config_dir=/etc/vsftpd/vsftpd_user_conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;四生成vsftpd虚拟用户数据库文件&#34;&gt;四、生成vsftpd虚拟用户数据库文件：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立虚拟用户名单文件：
&lt;code&gt;# vim /etc/vsftpd/ftpuser.txt&lt;/code&gt;
内容如下：
ftp1
1234
ftp2
5678
格式很简单：“一行用户名，一行密码！”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成虚拟用户数据文件：
&lt;code&gt;# db_load -T -t hash -f /etc/vsftpd/ftpuser.txt /etc/vsftpd/vsftpd_login.db&lt;/code&gt;
&lt;code&gt;# chmod 600 /etc/vsftpd/vsftpd_login.db&lt;/code&gt;这一步可以省略，文件权限就是这个&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;五配置pam验证文件&#34;&gt;五、配置PAM验证文件：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;# vim /etc/pam.d/vsftpd&lt;/code&gt;
将以下内容加入到文件最前面（在后面加入无效）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：pam_userdb.so这个文件可以搜索下位置写入，不同系统的文件位置不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;auth    required        /usr/lib/aarch64-linux-gnu/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login
account required        /usr/lib/aarch64-linux-gnu/security/pam_userdb.so db=/etc/vsftpd/vsftpd_login
auth    required        pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过测试，这样写也行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;auth    required        pam_userdb.so db=/etc/vsftpd/vsftpd_login
account required        pam_userdb.so db=/etc/vsftpd/vsftpd_login
auth    required        pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ftpusers的原位置在/etc/下，移动ftpusers到/etc/vsftpd/下，这个文件中的用户是不能登陆ftp的。
上一步建立的数据库 vsftpd_login 在此处被使用，建立的虚拟用户将采用PAM进行验证，这是通过/etc/vsftpd/vsftpd.conf文件中的语句pam_service_name=vsftpd来启用的。&lt;/p&gt;
&lt;h3 id=&#34;六vsftpd虚拟用户的独立配置&#34;&gt;六、vsftpd虚拟用户的独立配置：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;# mkdir -p /etc/vsftpd/vsftpd_user_conf&lt;/code&gt;
&lt;code&gt;# vim /etc/vsftpd/vsftpd_user_conf/用户名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置如下：
allow_writeable_chroot=YES
anon_world_readable_only=NO
write_enable=YES
anon_upload_enable=YES
anon_mkdir_write_enable=YES
anon_other_write_enable=YES
local_root=/var/ftp/&lt;/p&gt;
&lt;h3 id=&#34;七vsftpd服务器之间的站点对传&#34;&gt;七、vsftpd服务器之间的站点对传：&lt;/h3&gt;
&lt;p&gt;有时候可能需要开启vsftpd服务器之间的站点对传功能，只需在主配置文件 /etc/vsftpd/vsftpd.conf 里加入如下参数即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pasv_promiscuous=YES
port_promiscuous=YES
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：
port_promiscuous=YES|NO
默认值为NO。为YES时，取消PORT安全检查。该检查确保外出的数据只能连接到客户端上。小心打开此选项。&lt;/p&gt;
&lt;p&gt;pasv_promiscuous=YES|NO
默认值为NO。为YES时，将关闭PASV模式的安全检查。该检查确保数据连接和控制连接是来自同一个IP地址。小心打开此选项。此选项唯一合理的用法是存在于由安全隧道方案构成的组织中。
由于取消了数据包的安全检查，允许数据流向非客户端，所以站点对传成功。&lt;/p&gt;
&lt;h3 id=&#34;八etcvsftpd目录下的文件有&#34;&gt;八、/etc/vsftpd/目录下的文件有：&lt;/h3&gt;
&lt;p&gt;chroot_list
ftpuser.txt&lt;br&gt;
ftpusers&lt;br&gt;
user_list&lt;br&gt;
vsftpd_login.db&lt;br&gt;
vsftpd_user_conf这个是目录下面是各个用户的配置文件&lt;/p&gt;
&lt;h3 id=&#34;配置修改完成后重启vsftpd服务生效&#34;&gt;配置修改完成后，重启vsftpd服务生效：&lt;/h3&gt;
&lt;h2 id=&#34;结束&#34;&gt;结束&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;post/vsftpd.png&#34; alt=&#34;vsftpd配置&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;vsftpd配置文件详解&#34;&gt;vsftpd配置文件详解&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;默认配置：允许匿名用户和本地用户登陆。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anonymous_enable=YES&lt;/li&gt;
&lt;li&gt;local_enable=YES&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;匿名用户使用的登陆名为ftp或anonymous，口令为空；匿名用户不能离开匿名 用户家目录/var/ftp,且只能下载不能上传。
本地用户的登录名为本地用户名，口令为此本地用户的口令；本地用户可以在自己家目录中进行读写操作；本地用户可以离开自家目录切换至有权限访问的其他目录，并在权限允许的情况下进行上传/下载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write_enable=YES&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写在文件/etc/vsftpd.ftpusers中的本地用户禁止登陆。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置文件格式：vsftpd.conf 的内容非常单纯，每一行即为一项设定。若是空白行或是开头为#的一行，将会被忽略。内容的格式只有一种，如下所示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;option=value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要注意的是，等号两边不能加空白。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匿名用户（anonymous）设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anonymous_enable=YES/NO（YES）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;控制是否允许匿名用户登入，YES 为允许匿名登入，NO 为不允许。默认值为YES。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write_enable=YES/NO（YES）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是否允许登陆用户有写权限。属于全局设置，默认值为YES。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no_anon_password=YES/NO（NO）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若是启动这项功能，则使用匿名登入时，不会询问密码。默认值为NO。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ftp_username=ftp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义匿名登入的使用者名称。默认值为ftp。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anon_root=/var/ftp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用匿名登入时，所登入的目录。默认值为/var/ftp。注意ftp目录不能是777的权限属性，即匿名用户的家目录不能有777的权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anon_upload_enable=YES/NO（NO）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果设为YES，则允许匿名登入者有上传文件（非目录）的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。
anon_world_readable_only=YES/NO（YES）
如果设为YES，则允许匿名登入者下载可阅读的档案（可以下载到本机阅读，不能直接在FTP服务器中打开阅读）。默认值为YES。
anon_mkdir_write_enable=YES/NO（NO）
如果设为YES，则允许匿名登入者有新增目录的权限，只有在write_enable=YES时，此项才有效。当然，匿名用户必须要有对上层目录的写入权。默认值为NO。
anon_other_write_enable=YES/NO（NO）
如 果设为YES，则允许匿名登入者更多于上传或者建立目录之外的权限，譬如删除或者重命名。（如果anon_upload_enable=NO，则匿名用户 不能上传文件，但可以删除或者重命名已经存在的文件；如果anon_mkdir_write_enable=NO，则匿名用户不能上传或者新建文件夹，但 可以删除或者重命名已经存在的文件夹。）默认值为NO。
chown_uploads=YES/NO（NO）
设置是否改变匿名用户上传文件（非目录）的属主。默认值为NO。
chown_username=username
设置匿名用户上传文件（非目录）的属主名。建议不要设置为root。
anon_umask=077
设置匿名登入者新增或上传档案时的umask 值。默认值为077，则新建档案的对应权限为700。
deny_email_enable=YES/NO（NO）
若是启动这项功能，则必须提供一个档案/etc/vsftpd/banner_emails，内容为email address。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。默认值为NO。
banned_email_file=/etc/vsftpd/banner_emails
此文件用来输入email address，只有在deny_email_enable=YES时，才会使用到此档案。若是使用匿名登入，则会要求输入email address，若输入的email address 在此档案内，则不允许进入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.本地用户设置
local_enable=YES/NO（YES）
控制是否允许本地用户登入，YES 为允许本地用户登入，NO为不允许。默认值为YES。
local_root=/home/username
当本地用户登入时，将被更换到定义的目录下。默认值为各用户的家目录。
write_enable=YES/NO（YES）
是否允许登陆用户有写权限。属于全局设置，默认值为YES。
local_umask=022
本地用户新增档案时的umask 值。默认值为077。
file_open_mode=0755
本地用户上传档案后的档案权限，与chmod 所使用的数值相同。默认值为0666。&lt;/p&gt;
&lt;p&gt;5.欢迎语设置
dirmessage_enable=YES/NO（YES）
如果启动这个选项，那么使用者第一次进入一个目录时，会检查该目录下是否有.message这个档案，如果有，则会出现此档案的内容，通常这个档案会放置欢迎话语，或是对该目录的说明。默认值为开启。
message_file=.message
设置目录消息文件，可将要显示的信息写入该文件。默认值为.message。
banner_file=/etc/vsftpd/banner
当使用者登入时，会显示此设定所在的档案内容，通常为欢迎话语或是说明。默认值为无。如果欢迎信息较多，则使用该配置项。
ftpd_banner=Welcome to BOB&amp;rsquo;s FTP server
这里用来定义欢迎话语的字符串，banner_file是档案的形式，而ftpd_banner 则是字符串的形式。预设为无。&lt;/p&gt;
&lt;p&gt;6.控制用户是否允许切换到上级目录
在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录。
chroot_list_enable=YES/NO（NO）
设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。
chroot_list_file=/etc/vsftpd.chroot_list
用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。
chroot_local_user=YES/NO（NO）
用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。
通过搭配能实现以下几种效果：
①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。
②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。
③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。
④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。
[chroot_local_user=YES/NO ,特别注意当等于YES时，因为FTP不能切换目录，有些FTP客户端会在FTP目标目录里再新建一个目标目录，如 upload/upload  造成应用调试困扰]
7.数据传输模式设置
FTP在传输数据时，可以使用二进制方式，也可以使用ASCII模式来上传或下载数据。
ascii_upload_enable=YES/NO（NO）
设置是否启用ASCII 模式上传数据。默认值为NO。
ascii_download_enable=YES/NO（NO）
设置是否启用ASCII 模式下载数据。默认值为NO。&lt;/p&gt;
&lt;p&gt;8.访问控制设置
两种控制方式：一种控制主机访问，另一种控制用户访问。
①控制主机访问：
tcp_wrappers=YES/NO（YES）
设 置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。
比如：若要仅允许192.168.0.1—192.168.0.254的用户可以连接FTP服务器，则在/etc/hosts.allow文件中添加以下内容：
vsftpd:192.168.0. :allow
all:all :deny
②控制用户访问：
对于用户的访问控制可以通过/etc目录下的vsftpd.user_list和ftpusers文件来实现。
userlist_file=/etc/vsftpd.user_list
控制用户访问FTP的文件，里面写着用户名称。一个用户名称一行。
userlist_enable=YES/NO（NO）
是否启用vsftpd.user_list文件。
userlist_deny=YES/NO（YES）
决定vsftpd.user_list文件中的用户是否能够访问FTP服务器。若设置为YES，则vsftpd.user_list文件中的用户不允许访问FTP，若设置为NO，则只有vsftpd.user_list文件中的用户才能访问FTP。
/etc /vsftpd/ftpusers文件专门用于定义不允许访问FTP服务器的用户列表（注意:如果 userlist_enable=YES,userlist_deny=NO,此时如果在vsftpd.user_list和ftpusers中都有某个 用户时，那么这个用户是不能够访问FTP的，即ftpusers的优先级要高）。默认情况下vsftpd.user_list和ftpusers，这两个 文件已经预设置了一些不允许访问FTP服务器的系统内部账户。如果系统没有这两个文件，那么新建这两个文件，将用户添加进去即可。&lt;/p&gt;
&lt;p&gt;9.访问速率设置
anon_max_rate=0
设置匿名登入者使用的最大传输速度，单位为B/s，0 表示不限制速度。默认值为0。
local_max_rate=0
本地用户使用的最大传输速度，单位为B/s，0 表示不限制速度。预设值为0。&lt;/p&gt;
&lt;p&gt;10.超时时间设置
accept_timeout=60
设置建立FTP连接的超时时间，单位为秒。默认值为60。
connect_timeout=60
PORT 方式下建立数据连接的超时时间，单位为秒。默认值为60。
data_connection_timeout=120
设置建立FTP数据连接的超时时间，单位为秒。默认值为120。
idle_session_timeout=300
设置多长时间不对FTP服务器进行任何操作，则断开该FTP连接，单位为秒。默认值为300 。&lt;/p&gt;
&lt;p&gt;11.日志文件设置
xferlog_enable= YES/NO（YES）
是否启用上传/下载日志记录。如果启用，则上传与下载的信息将被完整纪录在xferlog_file 所定义的档案中。预设为开启。
xferlog_file=/var/log/vsftpd.log
设置日志文件名和路径，默认值为/var/log/vsftpd.log。
xferlog_std_format=YES/NO（NO）
如果启用，则日志文件将会写成xferlog的标准格式，如同wu-ftpd 一般。默认值为关闭。
log_ftp_protocol=YES|NO（NO）
如果启用此选项，所有的FTP请求和响应都会被记录到日志中，默认日志文件在/var/log/vsftpd.log。启用此选项时，xferlog_std_format不能被激活。这个选项有助于调试。默认值为NO。&lt;/p&gt;
&lt;p&gt;12.定义用户配置文件
在vsftpd中，可以通过定义用户配置文件来实现不同的用户使用不同的配置。
user_config_dir=/etc/vsftpd/userconf
设置用户配置文件所在的目录。当设置了该配置项后，用户登陆服务器后，系统就会到/etc/vsftpd/userconf目录下，读取与当前用户名相同的文件，并根据文件中的配置命令，对当前用户进行更进一步的配置。
例 如：定义user_config_dir=/etc/vsftpd/userconf，且主机上有使用者 test1,test2，那么我们就在user_config_dir 的目录新增文件名为test1和test2两个文件。若是test1 登入，则会读取user_config_dir 下的test1 这个档案内的设定。默认值为无。利用用户配置文件，可以实现对不同用户进行访问速度的控制，在各用户配置文件中定义local_max_rate=XX， 即可。&lt;/p&gt;
&lt;p&gt;13.FTP的工作方式与端口设置
FTP有两种工作方式：PORT FTP（主动模式）和PASV FTP（被动模式）
listen_port=21
设置FTP服务器建立连接所监听的端口，默认值为21。
connect_from_port_20=YES/NO
指定FTP使用20端口进行数据传输，默认值为YES。
ftp_data_port=20
设置在PORT方式下，FTP数据连接使用的端口，默认值为20。
pasv_enable=YES/NO（YES）
若设置为YES，则使用PASV工作模式；若设置为NO，则使用PORT模式。默认值为YES，即使用PASV工作模式。
pasv_max_port=0
在PASV工作模式下，数据连接可以使用的端口范围的最大端口，0 表示任意端口。默认值为0。
pasv_min_port=0
在PASV工作模式下，数据连接可以使用的端口范围的最小端口，0 表示任意端口。默认值为0。&lt;/p&gt;
&lt;p&gt;14.与连接相关的设置
listen=YES/NO（YES）
设 置vsftpd服务器是否以standalone模式运行。以standalone模式运行是一种较好的方式，此时listen必须设置为YES，此为默 认值。建议不要更改，有很多与服务器运行相关的配置命令，需要在此模式下才有效。若设置为NO，则vsftpd不是以独立的服务运行，要受到xinetd 服务的管控，功能上会受到限制。
max_clients=0
设置vsftpd允许的最大连接数，默认值为0，表示不受限制。若设置为100时，则同时允许有100个连接，超出的将被拒绝。只有在standalone模式运行才有效。
max_per_ip=0
设置每个IP允许与FTP服务器同时建立连接的数目。默认值为0，表示不受限制。只有在standalone模式运行才有效。
listen_address=IP地址
设置FTP服务器在指定的IP地址上侦听用户的FTP请求。若不设置，则对服务器绑定的所有IP地址进行侦听。只有在standalone模式运行才有效。
setproctitle_enable=YES/NO（NO）
设置每个与FTP服务器的连接，是否以不同的进程表现出来。默认值为NO，此时使用ps aux |grep ftp只会有一个vsftpd的进程。若设置为YES，则每个连接都会有一个vsftpd的进程。&lt;/p&gt;
&lt;p&gt;15.虚拟用户设置
虚拟用户使用PAM认证方式。
pam_service_name=vsftpd
设置PAM使用的名称，默认值为/etc/pam.d/vsftpd。
guest_enable= YES/NO（NO）
启用虚拟用户。默认值为NO。
guest_username=ftp
这里用来映射虚拟用户。默认值为ftp。
virtual_use_local_privs=YES/NO（NO）
当该参数激活（YES）时，虚拟用户使用与本地用户相同的权限。当此参数关闭（NO）时，虚拟用户使用与匿名用户相同的权限。默认情况下此参数是关闭的（NO）。&lt;/p&gt;
&lt;p&gt;16.其他设置
text_userdb_names= YES/NO（NO）
设置在执行ls –la之类的命令时，是显示UID、GID还是显示出具体的用户名和组名。默认值为NO，即以UID和GID方式显示。若希望显示用户名和组名，则设置为YES。
ls_recurse_enable=YES/NO（NO）
若是启用此功能，则允许登入者使用ls –R（可以查看当前目录下子目录中的文件）这个指令。默认值为NO。
hide_ids=YES/NO（NO）
如果启用此功能，所有档案的拥有者与群组都为ftp，也就是使用者登入使用ls -al之类的指令，所看到的档案拥有者跟群组均为ftp。默认值为关闭。
download_enable=YES/NO（YES）
如果设置为NO，所有的文件都不能下载到本地，文件夹不受影响。默认值为YES。&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>git的使用</title>
    <link>https://blog.wiseai.cn/post/git/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/git/</guid>
    <description>
        &lt;h2 id=&#34;添加ssh公钥&#34;&gt;添加ssh公钥：&lt;/h2&gt;
&lt;p&gt;查看&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;文件，如果有公钥直接添加，没有的话使用这个命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh-keygen -t ed25519 -C &amp;#34;xxxxx@xxxxx.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;三次回车后，再查看&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;文件，添加到gitee设置。&lt;/p&gt;
&lt;h2 id=&#34;创建版本库&#34;&gt;创建版本库：&lt;/h2&gt;
&lt;p&gt;不建议直接生成，可以在gitee网站下建立仓库，之后clone到本地，直接使用下面的命令操作就可以了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个命令可以把当前目录变成git管理的仓库。
远程库如果是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。&lt;/p&gt;
&lt;h2 id=&#34;添加远程仓库&#34;&gt;添加远程仓库：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git remote add gitee git@gitee.com:wiseai/wiseai.git
$ git remote add github git@github.com:wiseai/wiseai.git
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看远程仓库信息&#34;&gt;查看远程仓库信息：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;删除远程仓库&#34;&gt;删除远程仓库：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git remote rm github
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;推送到github或gitee&#34;&gt;推送到GitHub或Gitee:&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git push gitee master
$ git push github master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该操作在后面内容同步后再推送。&lt;/p&gt;
&lt;h2 id=&#34;设置邮件和用户名&#34;&gt;设置邮件和用户名：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git config --global user.email &amp;#34;you@example.com&amp;#34;
$ git config --global user.name &amp;#34;Your Name&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;全局设置使用&amp;ndash;global参数，如果仅在本仓库设置身份标识，则省略 &amp;ndash;global 参数。&lt;/p&gt;
&lt;h2 id=&#34;查看git的修改状态&#34;&gt;查看git的修改状态：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看具体修改内容&#34;&gt;查看具体修改内容：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git diff readme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;添加修改文件&#34;&gt;添加修改文件：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git add readme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以提交文件，但是空目录不显示&lt;/p&gt;
&lt;h2 id=&#34;提交文件修改&#34;&gt;提交文件修改：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git commit -m &amp;#34;修改说明&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该操作提交所有add的文件和目录&lt;/p&gt;
&lt;h2 id=&#34;丢弃没有add的修改&#34;&gt;丢弃没有add的修改：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git checkout -- readme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;丢弃已经add文件的修改&#34;&gt;丢弃已经add文件的修改：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git reset HEAD readme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;删除文件&#34;&gt;删除文件：&lt;/h2&gt;
&lt;p&gt;先从本地删除文件，之后&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git rm test.txt
$ git commit -m &amp;#34;修改说明&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文件已删除。恢复使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git checkout -- test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;将远程仓库克隆到本地&#34;&gt;将远程仓库克隆到本地：&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone git@gitee.com:wiseai/wiseai.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;克隆可以使用Https或者ssh等，具体可以看网站。
使用ssh必有添加公钥才行。&lt;/p&gt;
&lt;h2 id=&#34;仓库&#34;&gt;仓库&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &amp;quot;[name]&amp;quot;
$ git config [--global] user.email &amp;quot;[email address]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;增加删除文件&#34;&gt;增加/删除文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;代码提交&#34;&gt;代码提交&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;分支&#34;&gt;分支&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;标签&#34;&gt;标签&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;查看信息&#34;&gt;查看信息&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&amp;quot;提交说明&amp;quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &amp;quot;@{0 day ago}&amp;quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;远程同步&#34;&gt;远程同步&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;撤销&#34;&gt;撤销&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 生成一个可供发布的压缩包
$ git archive
&lt;/code&gt;&lt;/pre&gt;

    </description>
    </item>
    
    <item>
    <title>golang和nodejs环境配置</title>
    <link>https://blog.wiseai.cn/post/golang%E5%92%8Cnodejs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/golang%E5%92%8Cnodejs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description>
        &lt;ol&gt;
&lt;li&gt;配置golang&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;下载文件：&lt;a href=&#34;https://golang.google.cn/dl/&#34; title=&#34;golang官网下载&#34;&gt;golang官网下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解压文件至/usr/local/目录下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（第一个命令是删除golang的残余文件）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立软链接至/usr/bin/目录下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# ln -s /usr/local/go/bin/go /usr/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# ln -s /usr/local/go/bin/gofmt /usr/bin/&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改为国内源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# go env -w GO111MODULE=auto &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# go env -w GOPROXY=https://goproxy.cn,direct&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# go env&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置nodejs&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;下载文件：&lt;a href=&#34;https://nodejs.org/zh-cn/&#34; title=&#34;nodejs官网&#34;&gt;nodejs官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解压文件至/usr/local/目录下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（第一个命令是删除nodejs的残余文件）
&lt;code&gt;# npm install yarn&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立软链接至/usr/bin/目录下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# ln -s /usr/local/node-v16.13.2-linux-arm64/bin/node /usr/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# ln -s /usr/local/node-v16.13.2-linux-arm64/bin/npm /usr/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# ln -s /usr/local/node-v16.13.2-linux-arm64/bin/npx /usr/bin/&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改为国内源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# npm config get&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>golang的build命令</title>
    <link>https://blog.wiseai.cn/post/golang%E7%9A%84build%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/golang%E7%9A%84build%E5%91%BD%E4%BB%A4/</guid>
    <description>
        &lt;p&gt;&lt;code&gt;go build&lt;/code&gt;，是我们非常常用的命令，它可以启动编译，把我们的包和相关的依赖编译成一个可执行的文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;usage: go build [-o output] [-i] [build flags] [packages]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go build&lt;/code&gt;的使用比较简洁，所有的参数都可以忽略，直到只有&lt;code&gt;go build&lt;/code&gt;，这个时候意味着使用当前目录进行编译，下面的几条命令是等价的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go build

go build .

go build hello.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上这三种写法，都是使用当前目录编译的意思。因为我们忽略了&lt;code&gt;packages&lt;/code&gt;,所以自然就使用当前目录进行编译了。从这里我们也可以推测出，&lt;code&gt;go build&lt;/code&gt;本质上需要的是一个路径，让编译器可以找到哪些需要编译的go文件。&lt;code&gt;packages&lt;/code&gt;其实是一个相对路径，是相对于我们定义的&lt;code&gt;GOROOT&lt;/code&gt;和&lt;code&gt;GOPATH&lt;/code&gt;这两个环境变量的，所以有了&lt;code&gt;packages&lt;/code&gt;这个参数后，&lt;code&gt;go build&lt;/code&gt;就可以知道哪些需要编译的go文件了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go build flysnow.org/tools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这种方式是指定包的方式，这样会明确地编译我们这个包。当然我们也可以使用通配符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go build flysnow.org/tools/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;** 3个点表示匹配所有字符串，这样&lt;code&gt;go build&lt;/code&gt;就会编译tools目录下的所有包。**&lt;/p&gt;
&lt;p&gt;讲到&lt;code&gt;go build&lt;/code&gt;编译，不能不提跨平台编译，Go提供了编译链工具，可以让我们在任何一个开发平台上，编译出其他平台的可执行文件。&lt;/p&gt;
&lt;p&gt;默认情况下，都是根据我们当前的机器生成的可执行文件，比如你的是Linux 64位，就会生成Linux 64位下的可执行文件，比如我的Mac；可以使用go env查看编译环境,以下截取重要的部分。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go env
GOARCH=&amp;#34;amd64&amp;#34;
GOEXE=&amp;#34;&amp;#34;
GOHOSTARCH=&amp;#34;amd64&amp;#34;
GOHOSTOS=&amp;#34;darwin&amp;#34;
GOOS=&amp;#34;darwin&amp;#34;
GOROOT=&amp;#34;/usr/local/go&amp;#34;
GOTOOLDIR=&amp;#34;/usr/local/go/pkg/tool/darwin_amd64&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;** 注意里面两个重要的环境变量GOOS和GOARCH,其中GOOS指的是目标操作系统，它的可用值为：**&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;darwin&lt;/li&gt;
&lt;li&gt;freebsd&lt;/li&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;li&gt;windows&lt;/li&gt;
&lt;li&gt;android&lt;/li&gt;
&lt;li&gt;dragonfly&lt;/li&gt;
&lt;li&gt;netbsd&lt;/li&gt;
&lt;li&gt;openbsd&lt;/li&gt;
&lt;li&gt;plan9&lt;/li&gt;
&lt;li&gt;solaris&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 一共支持10种操作系统。GOARCH指的是目标处理器的架构，目前支持的有：**&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;arm&lt;/li&gt;
&lt;li&gt;arm64&lt;/li&gt;
&lt;li&gt;386&lt;/li&gt;
&lt;li&gt;amd64&lt;/li&gt;
&lt;li&gt;ppc64&lt;/li&gt;
&lt;li&gt;ppc64le&lt;/li&gt;
&lt;li&gt;mips64&lt;/li&gt;
&lt;li&gt;mips64le&lt;/li&gt;
&lt;li&gt;s390x&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一共支持9种处理器的架构&lt;/p&gt;
&lt;p&gt;如果我们要生成不同平台架构的可执行程序，只要改变这两个环境变量就可以了，比如要生成Linux 64位的程序，命令如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GOOS=linux GOARCH=amd64 go build flysnow.org/hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前面两个赋值，是更改环境变量，这样的好处是只针对本次运行有效，不会更改我们默认的配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go help build&lt;/code&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>GPIO相关知识</title>
    <link>https://blog.wiseai.cn/post/gpio%E7%9B%B8%E5%85%B3/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/gpio%E7%9B%B8%E5%85%B3/</guid>
    <description>
        &lt;h2 id=&#34;linux查看gpio状态&#34;&gt;linux查看gpio状态&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cat /sys/kernel/debug/gpio&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有个blog里有这个方法，去试试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir /tmp/debug
mount -t debugfs debugfs /tmp/debug
cat /tmp/debug/gpio
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gpio操作的一些说明&#34;&gt;GPIO操作的一些说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先，看看系统中有没有“/sys/class/gpio”这个文件夹。如果没有请在编译内核的时候加入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Device Drivers-&amp;gt; GPIO Support -&amp;gt;/sys/class/gpio/… (sysfs interface)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/sys/class/gpio 的使用说明：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gpio_operation 通过/sys/文件接口操作IO端口 GPIO到文件系统的映射&lt;/p&gt;
&lt;p&gt;◇  控制GPIO的目录位于/sys/class/gpio&lt;/p&gt;
&lt;p&gt;◇  /sys/class/gpio/export文件用于通知系统需要导出控制的GPIO引脚编号&lt;/p&gt;
&lt;p&gt;◇  /sys/class/gpio/unexport 用于通知系统取消导出&lt;/p&gt;
&lt;p&gt;◇  /sys/class/gpio/gpiochipX目录保存系统中GPIO寄存器的信息，包括每个寄存器控制引脚的起始编号base，寄存器名称，引脚总数 导出一个引脚的操作步骤&lt;/p&gt;
&lt;p&gt;◇  首先计算此引脚编号，引脚编号 = 控制引脚的寄存器基数 + 控制引脚寄存器位数&lt;/p&gt;
&lt;p&gt;◇  向/sys/class/gpio/export写入此编号，比如12号引脚，在shell中可以通过以下命令实现，&lt;code&gt;echo 12 &amp;gt; export&lt;/code&gt;命令成功后生成/sys/class/gpio/gpio12目录，如果没有出现相应的目录，说明此引脚不可导出&lt;/p&gt;
&lt;p&gt;◇  direction文件，定义输入输入方向，可以通过下面命令定义为输出。direction接受的参数：in, out, high, low。high/low同时设置方向为输出，并将value设置为相应的1/0&lt;/p&gt;
&lt;p&gt;◇  value文件是端口的数值，为1或0&lt;/p&gt;
&lt;h2 id=&#34;例子&#34;&gt;例子：&lt;/h2&gt;
&lt;p&gt;进入/sys/class/gpio/文件夹：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将gpio7重定向用户定义设备，生成gpio7目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# echo 7 &amp;gt; export&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;进入gpio7目录并查看文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;# cd gpio7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# ls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;direction设置引脚方向，输入还是输出&lt;/p&gt;
&lt;p&gt;value设置引脚状态，高电平还是低电平&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;输入状态&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;设置引脚状态为输入状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# echo in &amp;gt; direction&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看引脚高低电平&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# cat value &lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;输出状态&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;设置引脚状态为输出状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# echo out &amp;gt; direction&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置输出高电平&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# echo 1 &amp;gt; value&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置输出低电平&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# echo 0 &amp;gt; value&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;注销&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;测试完毕之后返回/sys/class/gpio/目录，并将gpio注销&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# cd /sys/class/gpio/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# echo 7 &amp;gt; /sys/class/gpio/unexport&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这篇博客很不错：https://zhuanlan.zhihu.com/p/66660750
&lt;a href=&#34;https://blog.csdn.net/k1ang/article/details/107117077&#34;&gt;https://blog.csdn.net/k1ang/article/details/107117077&lt;/a&gt;&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux安装hp打印机驱动</title>
    <link>https://blog.wiseai.cn/post/linux%E5%AE%89%E8%A3%85hp%E6%89%93%E5%8D%B0%E6%9C%BA%E9%A9%B1%E5%8A%A8/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E5%AE%89%E8%A3%85hp%E6%89%93%E5%8D%B0%E6%9C%BA%E9%A9%B1%E5%8A%A8/</guid>
    <description>
        &lt;h3 id=&#34;一安装hplip&#34;&gt;一、安装hplip&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;# dnf install hplip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者官网下载&lt;/p&gt;
&lt;p&gt;安装hplip-gui,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# dnf install hplip-gui&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;二运行hp-plugin安装插件&#34;&gt;二、运行hp-plugin安装插件&lt;/h3&gt;
&lt;p&gt;或者下载hplip-3.17.10-plugin.run文件，版本和hplip相同，网址为：http://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/&lt;/p&gt;
&lt;p&gt;安装时会验证文件，不用理会，直接安装就行。&lt;/p&gt;
&lt;p&gt;好了！&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Linux开机启动的方法</title>
    <link>https://blog.wiseai.cn/post/linux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
    <description>
        &lt;h2 id=&#34;一配置rclocal文件实现开机启动&#34;&gt;一、配置rc.local文件实现开机启动：&lt;/h2&gt;
&lt;p&gt;首先，建立一个文件：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo touch /etc/rc.local&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给予可执行权限：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo chmod +x /etc/rc.local&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在文件写入以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh

/path/to/gohttpserver -r /path/to/ --port 8080 --upload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上两个/path/to/，一个是文件所在目录，一个是工作目录，都使用绝对路径。
完成！！！&lt;/p&gt;
&lt;h2 id=&#34;二第二种方法以后有时间再补充&#34;&gt;二、第二种方法以后有时间再补充。&lt;/h2&gt;

    </description>
    </item>
    
    <item>
    <title>Linux更换网卡后网络服务不能启动的问题解决办法</title>
    <link>https://blog.wiseai.cn/post/linux%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1%E5%90%8E%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E4%B8%8D%E8%83%BD%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/linux%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1%E5%90%8E%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E4%B8%8D%E8%83%BD%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
    <description>
        &lt;p&gt;1、迁移以后，会存在其中一个网卡无法启动（eth0 or eth1）&lt;/p&gt;
&lt;p&gt;[root@ ~]# ifup eth0&lt;/p&gt;
&lt;p&gt;WARNING: Deprecated config file /etc/modprobe.conf, all config files belong into /etc/modprobe.d/.&lt;/p&gt;
&lt;p&gt;WARNING: Deprecated config file /etc/modprobe.conf, all config files belong into /etc/modprobe.d/.&lt;/p&gt;
&lt;p&gt;Device eth0 does not seem to be present, delaying initialization.&lt;/p&gt;
&lt;p&gt;2、删除文件&lt;/p&gt;
&lt;p&gt;[root@ ~]# mv /etc/udev/rules.d/70-persistent-net.rules /etc/udev/rules.d/70-persistent-net.rules.bak&lt;/p&gt;
&lt;p&gt;3、注释掉文件ifcfg-eth0及ifcfg-eth01中MAC地址（HWADDR）&lt;/p&gt;
&lt;p&gt;[root@ ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/p&gt;
&lt;p&gt;DEVICE=eth0&lt;/p&gt;
&lt;p&gt;BOOTPROTO=static&lt;/p&gt;
&lt;p&gt;#HWADDR=&amp;ldquo;XX:XX:XX:XX:XX:XX&amp;rdquo;&lt;/p&gt;
&lt;p&gt;ONBOOT=yes&lt;/p&gt;
&lt;p&gt;TYPE=Ethernet&lt;/p&gt;
&lt;p&gt;4、重启服务器（重启网卡不好使）&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>通过iptables设置防火墙</title>
    <link>https://blog.wiseai.cn/post/iptables%E8%AE%BE%E7%BD%AEsh/</link>
    <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
    <author>wiseai</author>
    <guid>https://blog.wiseai.cn/post/iptables%E8%AE%BE%E7%BD%AEsh/</guid>
    <description>
        &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    #!/bin/bash

    PATH=/sbin:/bin:/usr/sbin:/usr/bin

    #设置网卡
    wk=&amp;#34;eth1&amp;#34;

    # 1. 清除规则
    iptables -F
    iptables -X
    iptables -Z

    # 2. 设定政策
    iptables -P INPUT DROP
    iptables -P OUTPUT ACCEPT
    iptables -P FORWARD ACCEPT

    # 3~5. 制订各项规则
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A INPUT -i $wk -m state --state RELATED,ESTABLISHED -j ACCEPT

    #samba服务
    iptables -A INPUT -i $wk -p tcp --dport 139 -j ACCEPT
    iptables -A INPUT -i $wk -p tcp --dport 445 -j ACCEPT
    iptables -A INPUT -i $wk -p udp --dport 137:138 -j ACCEPT

    #vsftp服务
    iptables -A INPUT -i $wk -p tcp --dport 21 -j ACCEPT
    iptables -A INPUT -i $wk -p tcp --dport 1024:65535 -j ACCEPT
    #iptables -A INPUT -i $wk -s 192.168.1.0/24 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;1.查看防火墙规则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# iptables [-t tables] [-L] [-nv] &lt;/code&gt;
选项与参数：
-t ：后面接table ，例如nat或filter，若省略此项目，则使用预设的filter
-L ：列出目前的table的规则
-n ：不进行IP 与HOSTNAME 的反查，显示速度会快很多！
-v ：列出更多的相关信息&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.清除规则&lt;/strong&gt;
&lt;code&gt;# iptables [-t tables] [-FXZ] &lt;/code&gt;
选项与参数：
-F ：清除所有的已订定的规则；
-X ：杀掉所有使用者&amp;quot;自订&amp;quot; 的chain；
-Z ：将所有的chain 的计数与流量统计都归零&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.定义预设政策(policy)&lt;/strong&gt;
&lt;code&gt;# iptables [-t nat] -P [INPUT,OUTPUT,FORWARD] [ACCEPT,DROP] &lt;/code&gt;
选项与参数：
-P ：定义政策( Policy )。注意，这个P为大写啊！
ACCEPT ：该封包可接受
DROP ：该封包直接丢弃，不会让client 端知道为何被丢弃。&lt;/p&gt;
&lt;p&gt;范例：将本机的INPUT设定为DROP ，其他设定为ACCEPT&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# iptables -P INPUT DROP 
# iptables -P OUTPUT ACCEPT 
# iptables -P FORWARD ACCEPT 
# iptables -t nat -P PREROUTING ACCEPT
# iptables -t nat -P POSTROUTING ACCEPT
# iptables -t nat -P INPUT ACCEPT
# iptables -t nat -P OUTPUT ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;nat表不用于过滤，所以不能设置为DROP&lt;/strong&gt;
&lt;strong&gt;4.定义规则&lt;/strong&gt;
&lt;code&gt;# iptables [-AI链名] [-io网络界面] [-p协议] [-s来源IP/网域] [-sport 端口范围] [-d目标IP/网域] [-dport 端口范围] -j [ACCEPT&#39;DROP&#39;REJECT&#39;LOG] &lt;/code&gt;
选项与参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-AI链名：规则的&amp;#34;插入&amp;#34;或&amp;#34;增加&amp;#34;
-A：新增加一条规则，该规则增加在原本规则的最后面。例如原本已经有四条规则，使用-A就可以加上第五条规则！
-I：插入一条规则。如果没有指定此规则的顺序，预设是插入变成第一条规则。
例如原本有四条规则，使用-I则该规则变成第一条，而原本四条变成2~5号
链：有INPUT，OUTPUT，FORWARD等，此链名称又与-io有关，请看底下。
-io网卡：设定封包进出的规范
-i：封包所进入的那个网卡，例如eth0，lo等网卡。需与INPUT链配合；
-o：封包所传出的那个网卡，需与OUTPUT链配合；
-p协议：设定此规则适用于哪种封包格式
主要的封包格式有：tcp，udp，icmp及all。
-s来源IP/网域：设定此规则之封包的来源项目，可指定单纯的IP或包括网域，例如：
IP :192.168.0.100
网域：192.168.0.0/24，192.168.0.0/255.255.255.0均可。
若规范为『不许』时，则加上！即可，例如：
-s！192.168.100.0/24表示不许192.168.100.0/24封包来源；
-d目标IP/网域：同-s，只不过这里指的是目标的IP或网域。
--sport 来源端口范围。例如 1024:65535 
--dport 目标端口范围
-j：后面接动作，主要的动作有接受（ACCEPT）、丢弃（DROP）、拒绝（REJECT）及记录（LOG） 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;# iptables -A INPUT [-m state] [--state状态]  &lt;/code&gt;
选项与参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-m：一些iptables的外挂模块，主要常见的有：  
          state：状态模块  
          mac：网络卡硬件地址（hardware address）  
--state：一些封包的状态，主要有：  
         INVALID：无效的封包，例如数据破损的封包状态  
        ESTABLISHED：已经联机成功的联机状态；  
        NEW：想要新建立联机的封包状态；  
       RELATED：这个最常用！表示这个封包是与我们主机发送出去的封包有关  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例：只要已建立或相关封包就予以通过，只要是不合法封包就丢弃 &lt;br&gt;
&lt;code&gt;# iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT  &lt;/code&gt;
&lt;code&gt;# iptables -A INPUT -m state --state INVALID -j DROP&lt;/code&gt;
对MAC地址为aa:bb:cc:dd:ee:ff主机开放其连接
&lt;code&gt;# iptables -A INPUT -m mac --mac-source aa:bb:cc:dd :ee:ff -j ACCEPT &lt;/code&gt;
选项与参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--mac-source ：就是来源主机的MAC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ICMP 封包规则：针对是否回应ping 来设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常我们会把ICMP type 8 (echo request)去掉而已，让远端主机不知道我们是否存在，也不会接受ping的回应。
&lt;code&gt;# iptables -A INPUT [-p icmp] [--icmp-type类型] -j ACCEPT &lt;/code&gt;
选项与参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--icmp-type ：后面必须要接ICMP 的封包类型，也可以使用代号，
              例如8 代表echo request 的意思。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例：让0,3,4,11,12,14,16,18的ICMP type可以进入本机：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash 
icmp_type=&amp;#34;0 3 4 11 12 14 16 18&amp;#34; 
for typeicmp in $icmp_type 
do 
    iptables -A INPUT -i eth0 -p icmp --icmp-type $typeicmp -j ACCEPT 
done
&lt;/code&gt;&lt;/pre&gt;
    </description>
    </item>
    
    <item>
    <title>Footnote test</title>
    <link>https://blog.wiseai.cn/post/footnote/</link>
    <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
    
    <guid>https://blog.wiseai.cn/post/footnote/</guid>
    <description>
        &lt;p&gt;Lorem ipsum dolor sit amet&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum consequatur animi.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; consequatur animi.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum consequatur animi.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum consequatur animi.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Test Footnote&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Test Footnote2&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

    </description>
    </item>
    
    <item>
    <title>Katex support</title>
    <link>https://blog.wiseai.cn/post/test-katex/</link>
    <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
    <author>Hugo Authors</author>
    <guid>https://blog.wiseai.cn/post/test-katex/</guid>
    <description>
        &lt;p&gt;The following&lt;/p&gt;
&lt;p&gt;$$ \int_{a}^{b} x^2 dx $$&lt;/p&gt;
&lt;p&gt;Is an integral&lt;/p&gt;
&lt;p&gt;$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$&lt;/p&gt;
&lt;p&gt;Enable Katex in the config file by setting the &lt;code&gt;katex&lt;/code&gt; param to &lt;code&gt;true&lt;/code&gt;. This will import the necessary Katex CSS/JS.&lt;/p&gt;
&lt;p&gt;See the online reference of &lt;a href=&#34;https://katex.org/docs/supported.html&#34;&gt;supported TeX functions&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Inline math: &lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\varphi&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\dfrac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\sqrt&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6180339887&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;… &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Inline math: $ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Block math:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\varphi&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} {&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} {&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} {&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\cdots&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} } } &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>MathJax support</title>
    <link>https://blog.wiseai.cn/post/test-mathjax/</link>
    <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
    <author>Hugo Authors</author>
    <guid>https://blog.wiseai.cn/post/test-mathjax/</guid>
    <description>
        &lt;p&gt;The following&lt;/p&gt;
&lt;p&gt;$$ \int_{a}^{b} x^2 dx $$&lt;/p&gt;
&lt;p&gt;Is an integral&lt;/p&gt;
&lt;p&gt;$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$&lt;/p&gt;
&lt;p&gt;Enable MathJax in the config file by setting the &lt;code&gt;mathjax&lt;/code&gt; param to &lt;code&gt;true&lt;/code&gt;. This will import the necessary MathJax CSS/JS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Inline math: &lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\varphi&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\dfrac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\sqrt&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6180339887&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;… &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Inline math: $ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Block math:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\varphi&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} {&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} {&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} {&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\cdots&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} } } &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Markdown Syntax Guide</title>
    <link>https://blog.wiseai.cn/post/markdown-syntax/</link>
    <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
    <author>Hugo Authors</author>
    <guid>https://blog.wiseai.cn/post/markdown-syntax/</guid>
    <description>
        &lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;
&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;
&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;
&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;
&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Italics&lt;/th&gt;
&lt;th&gt;Bold&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks&lt;/h2&gt;
&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;list-types&#34;&gt;List Types&lt;/h2&gt;
&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;/h2&gt;
&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt;&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;&gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
    </description>
    </item>
    
    <item>
    <title>Example Lazy Load Image</title>
    <link>https://blog.wiseai.cn/post/example-lazy-load-image/</link>
    <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
    <author>Hugo Authors</author>
    <guid>https://blog.wiseai.cn/post/example-lazy-load-image/</guid>
    <description>
        &lt;h2 id=&#34;nya-nya-nyan-meow-meow-mama&#34;&gt;Nya nya nyan meow meow mama&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1327&amp;amp;q=80&#34; alt=&#34;Cute CAT&#34;&gt;&lt;/p&gt;
&lt;p&gt;More napping, more napping all the napping is exhausting stretch out on bed you are a captive audience while sitting on the toilet, pet me slap the dog because cats rule bleghbleghvomit my furball really tie the room together always hungry. Humans,humans, humans oh how much they love us felines we are the center of attention they feed, they clean miaow then turn around and show you my bum. Cats secretly make all the worlds muffins slap owner&amp;rsquo;s face at 5am until human fills food dish, milk the cow hunt by meowing loudly at 5am next to human slave food dispenser throwup on your pillow. Get scared by doggo also cucumerro .&lt;/p&gt;
&lt;h2 id=&#34;cat-is-meow-meow&#34;&gt;Cat is meow meow&lt;/h2&gt;
&lt;p&gt;Sees bird in air, breaks into cage and attacks creature when in doubt, wash spend six hours per day washing, but still have a crusty butthole yet lick sellotape tickle my belly at your own peril i will pester for food when you&amp;rsquo;re in the kitchen even if it&amp;rsquo;s salad find box a little too small and curl up with fur hanging out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1501820488136-72669149e0d4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;Cute CAT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Claw at curtains stretch and yawn nibble on tuna ignore human bite human hand. Under the bed mice yet funny little cat chirrup noise shaking upright tail when standing next to you but white cat sleeps on a black shirt for eat an easter feather as if it were a bird then burp victoriously.&lt;/p&gt;
&lt;h2 id=&#34;has-closed-eyes-but-still-sees-you-present-belly&#34;&gt;Has closed eyes but still sees you present belly&lt;/h2&gt;
&lt;p&gt;scratch hand when stroked for is good you understand your place in my world get scared by sudden appearance of cucumber. What the heck just happened, something feels fishy chew master&amp;rsquo;s slippers yet brown cats with pink ears bite the neighbor&amp;rsquo;s bratty kid cereal boxes make for five star accommodation but i like to spend my days sleeping and eating fishes that my human fished for me we live on a luxurious yacht, sailing proudly under the sun, i like to walk on the deck, watching the horizon, dreaming of a good bowl of milk. Lounge in doorway put butt in owner&amp;rsquo;s face, or ptracy destroy house in 5 seconds. Mrow no, you can&amp;rsquo;t close the door, i haven&amp;rsquo;t decided whether or not i wanna go out is good you understand your place in my world.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1511044568932-338cba0ad803?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;Cute CAT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Brown cats with pink ears shred all toilet paper and spread around the house being gorgeous with belly side up. Cats go for world domination the best thing in the universe is a cardboard box cats are cute so meow all night having their mate disturbing sleeping humans. Nya nya nyan annoy owner until he gives you food say meow repeatedly until belly rubs, feels good eat the fat cats food but meowing non stop for food. Pet right here, no not there, here, no fool, right here that other cat smells funny you should really give me all the treats because i smell the best and omg you finally got the right spot and i love you right now see brother cat receive pets, attack out of jealousy. Headbutt owner&amp;rsquo;s knee love blinks and purr purr purr purr yawn for stand in front of the computer screen, or mew mew for human is washing you why halp oh the horror flee scratch hiss bite.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1494256997604-768d1f608cac?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=801&amp;amp;q=80&#34; alt=&#34;Cute CAT&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cats-making-all-the-muffins&#34;&gt;Cats making all the muffins&lt;/h2&gt;
&lt;p&gt;Cats making all the muffins asdflkjaertvlkjasntvkjn (sits on keyboard) so the dog smells bad but cough hairball on conveniently placed pants and show belly but loved it, hated it, loved it, hated it catch mouse and gave it as a present. Give me attention or face the wrath of my claws meow all night for love me! and love you, then bite you or mesmerizing birds. Lick human with sandpaper tongue. Murf pratt ungow ungow scratch the box sit in box and to pet a cat, rub its belly, endure blood and agony, quietly weep, keep rubbing belly wake up human for food at 4am or eat owner&amp;rsquo;s food trip owner up in kitchen i want food. Curl up and sleep on the freshly laundered towels paw at your fat belly, steal mom&amp;rsquo;s crouton while she is in the bathroom yet nyan nyan goes the cat, scraaaaape scraaaape goes the walls when the cat murders them with its claws milk the cow suddenly go on wild-eyed crazy rampage toy mouse squeak roll over.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1519052537078-e6302a4968d4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;Cute CAT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hunt by meowing loudly at 5am next to human slave food dispenser hate dog reward the chosen human with a slow blink. Cat dog hate mouse eat string barf pillow no baths hate everything miaow then turn around and show you my bum love fish, and kitty scratches couch bad kitty steal the warm chair right after you get up kitty poochy munch on tasty moths. Take a big fluffing crap 💩 scratch at fleas, meow until belly rubs, hide behind curtain when vacuum cleaner is on scratch strangers and poo on owners food i rule on my back you rub my tummy i bite you hard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1489084917528-a57e68a79a1e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&#34; alt=&#34;Cute CAT&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thanks by cats.&lt;/p&gt;

    </description>
    </item>
    
    <item>
    <title>Placeholder Text</title>
    <link>https://blog.wiseai.cn/post/placeholder-text/</link>
    <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
    <author>Hugo Authors</author>
    <guid>https://blog.wiseai.cn/post/placeholder-text/</guid>
    <description>
        &lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;
&lt;p&gt;Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exierant elisi ambit vivere dedere&lt;/li&gt;
&lt;li&gt;Duce pollice&lt;/li&gt;
&lt;li&gt;Eris modo&lt;/li&gt;
&lt;li&gt;Spargitque ferrea quos palude&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comas hunc haec pietate fetum procerum dixit&lt;/li&gt;
&lt;li&gt;Post torum vates letum Tiresia&lt;/li&gt;
&lt;li&gt;Flumen querellas&lt;/li&gt;
&lt;li&gt;Arcanaque montibus omnes&lt;/li&gt;
&lt;li&gt;Quidem et&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;vagus-elidunt&#34;&gt;Vagus elidunt&lt;/h1&gt;
&lt;p&gt;&lt;svg class=&#34;canon&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; overflow=&#34;visible&#34; viewBox=&#34;0 0 496 373&#34; height=&#34;373&#34; width=&#34;496&#34;&gt;&lt;g fill=&#34;none&#34;&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#ED1C24&#34; stroke-width=&#34;.75&#34; d=&#34;M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.479.375h495v372h-495zM247.979.875v372&#34;&gt;&lt;/path&gt;&lt;ellipse cx=&#34;498.729&#34; cy=&#34;177.625&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;ellipse cx=&#34;247.229&#34; cy=&#34;377.375&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon&#34;&gt;The Van de Graaf Canon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mane-refeci-capiebant-unda-mulcebat&#34;&gt;Mane refeci capiebant unda mulcebat&lt;/h2&gt;
&lt;p&gt;Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong&gt;Faces illo pepulere&lt;/strong&gt; tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p&gt;
&lt;p&gt;Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p&gt;
&lt;p&gt;Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong&gt;mitis temploque&lt;/strong&gt; vocatus, inque alis, &lt;em&gt;oculos nomen&lt;/em&gt; non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong&gt;parte&lt;/strong&gt;.&lt;/p&gt;
    </description>
    </item>
    
    <item>
    <title>Emoji Support</title>
    <link>https://blog.wiseai.cn/post/emoji-support/</link>
    <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
    <author>Hugo Authors</author>
    <guid>https://blog.wiseai.cn/post/emoji-support/</guid>
    <description>
        &lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/emojify/&#34;&gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34;&gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34;&gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙈&lt;/span&gt; &lt;code&gt;:see_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙉&lt;/span&gt; &lt;code&gt;:hear_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙊&lt;/span&gt; &lt;code&gt;:speak_no_evil:&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.emoji-cheat-sheet.com/&#34;&gt;Emoji cheat sheet&lt;/a&gt; is a useful reference for emoji shorthand codes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.emoji {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
    </description>
    </item>
    
  </channel>
</rss>
