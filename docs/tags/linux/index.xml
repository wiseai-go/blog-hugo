<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on WiseAI的博客</title>
    <link>http://wiseai.cn/tags/linux/</link>
    <description>Recent content in Linux on WiseAI的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>陇ICP备15000157号</copyright>
    <lastBuildDate>Mon, 13 Feb 2023 14:44:41 +0800</lastBuildDate><atom:link href="http://wiseai.cn/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>路由设置和route命令的使用</title>
      <link>http://wiseai.cn/post/2023.02.13-%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE%E5%92%8Croute%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 13 Feb 2023 14:44:41 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.02.13-%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE%E5%92%8Croute%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>命令格式： route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]] 命令功能： Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用&amp;quot;add&amp;quot;或者&amp;quot;del&amp;quot;参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。
命令参数：
-c 显示更多信息
-n 不解析名字
-v 显示详细的处理信息
-F 显示发送信息
-C 显示路由缓存
-f 清除所有网关入口的路由表。
-p 与 add 命令一起使用时使路由具有永久性。
add:添加一条新路由。
del:删除一条路由。
-net:目标地址是一个网络。
-host:目标地址是一个主机。
netmask:当添加一个网络路由时，需要使用网络掩码。
gw:路由数据包通过网关。注意，你指定的网关必须能够达到。
metric：设置路由跳数。
Command 指定您想运行的命令 (Add/Change/Delete/Print)。
Destination 指定该路由的网络目标。
mask Netmask 指定与网络目标相关的网络掩码（也被称作子网掩码）。
Gateway 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址。
metric Metric 为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用。
if Interface 为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引。
oute 命令的输出项说明:
Destination	目标网段或者主机 Gateway	网关地址，”*” 表示目标是本主机所属的网络，不需要路由 Genmask	网络掩码 Flags	标记。一些可能的标记如下： U — 路由是活动的 H — 目标是一个主机 G — 路由指向网关 R — 恢复动态路由产生的表项 D — 由路由的后台程序动态地安装 M — 由路由的后台程序修改 !</description>
    </item>
    
    <item>
      <title>Linux网卡设置</title>
      <link>http://wiseai.cn/post/2023.02.13-linux%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 13 Feb 2023 10:08:41 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.02.13-linux%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE/</guid>
      <description>这里主要以树莓派的网卡设置为例，其它的linux发行版都差不多。
树莓派的raspi-config工具，是设置网络最方便的，下面主要说说手动设置的方法。
有线网卡
树莓派建议一个网口设置两个ip，这样，在固定ip的网络也可以连接，在dhpc的网络也可以连接。 auto eth0 iface eth0 inet static address 192.168.1.2 netmask 255.255.255.0 gateway 192.168.1.1 auto eth0:1 iface eth0:1 inet dhcp 这个是我的配置文件，位置在/etc/network/interfaces.d/eth0，文件不存在建立一个就好.
无线网卡
iwconfig 命令查看当前无线网卡状态
iwlist wlan0 scan 扫描周围无线网卡 新建/etc/network/interfaces.d/wlan0
auto wlan0 #或者allow-hotplug iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf 生成配置文件：
# wpa_passphrase &amp;lt;yourAPssid&amp;gt; &amp;lt;yourpassphrase&amp;gt; &amp;gt;&amp;gt; /etc/wpa_supplicant/wpa_supplicant.conf 注意:&amp;quot;&amp;raquo;&amp;ldquo;是追加的意思，不要用&amp;rdquo;&amp;gt;&amp;quot;。
修改/etc/wpa_supplicant/wpa_supplicant.conf
network={ ssid=&amp;#34;&amp;lt;yourAPssid&amp;gt;&amp;#34; #psk=&amp;#34;&amp;lt;yourpassphrase&amp;gt;&amp;#34; psk=f7caf61012a3fe193ce790164b88c3648bd5fc16cd0f007c84cf154d728b4f2d } //这部分是命令生成的，psk是加密后的密码，修改后为： network={ ssid=&amp;#34;&amp;lt;yourAPssid&amp;gt;&amp;#34; proto=RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP scan_ssid=1 disabled=1 #psk=&amp;#34;&amp;lt;yourpassphrase&amp;gt;&amp;#34; psk=f7caf61012a3fe193ce790164b88c3648bd5fc16cd0f007c84cf154d728b4f2d priority=1 } ssid：无线网络名称。 proto=RSN #Robust Security Network:强健安全网络，表示这个网络配置比WEP模式要更安全。 key_mgmt=WPA-PSK #请无论你是使用WPA-PSK，WPA2-PSK，都请在这里输入 WPA-PSK。这在wpa_supplicant看来WPA-PSK，WPA2-PSK都是 WPA-PSK。企业路由是WPA-EAP。如果没有密码，需要配置为NONE pairwise=CCMP TKIP #关键点，wpa_supplicant目前还不认AES的加密标准 group=CCMP TKIP #同上 scan_ssid:如果ssid隐藏，这个参数必须配置 disabled=1:禁用这个网络 psk=7b271c9a7c8a6ac07d12403a1f0792d7d92b5957ff8dfd56481ced43ec6a6515 #wpa_supplicant算出来的加密密码。 priority:优先连接那个wifi 添加网关的方法： //添加默认网关 # route add default gw IP 具体看route命令的使用</description>
    </item>
    
    <item>
      <title>PPTist在线演示文稿ppt</title>
      <link>http://wiseai.cn/post/2023.02.07-pptist%E5%9C%A8%E7%BA%BF%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BFppt/</link>
      <pubDate>Tue, 07 Feb 2023 10:06:31 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.02.07-pptist%E5%9C%A8%E7%BA%BF%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BFppt/</guid>
      <description>简介： 一个基于 Vue3.x + TypeScript 的在线演示文稿（幻灯片）应用，还原了大部分 Office PowerPoint 常用功能，支持 文字、图片、形状、线条、图表、表格、视频、音频、公式 几种最常用的元素类型，每一种元素都拥有高度可编辑能力，同时支持丰富的快捷键和右键菜单，支持导出本地 PPTX 文件，支持移动端基础编辑和预览，支持 PWA。
源码位置： github: https://github.com/pipipi-pikachu/PPTist.git
gitee: https://gitee.com/mirrors/PPTist.git
编译代码： 首先，需要搭建node.js环境
# git clone https://github.com/pipipi-pikachu/PPTist.git # npm install # npm run serve # npm run build //目录下会生成dist目录，这个就是可以发布的代码 注意：编译最新版本出现一个问题,“opensslErrorStack: [ ’error:03000086:digital envelope routines::initialization error’ ]&amp;quot;,出现这个错误是因为 node.js V17以上的版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制，解决办法是:
# export NODE_OPTIONS=--openssl-legacy-provider</description>
    </item>
    
    <item>
      <title>Linux性能分析工具</title>
      <link>http://wiseai.cn/post/2023.01.30-linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 30 Jan 2023 18:04:19 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.01.30-linux%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</guid>
      <description>vmstat&amp;ndash;虚拟内存统计 vmstat（VirtualMeomoryStatistics，虚拟内存统计）是 Linux 中监控内存的常用工具,可对操作系统的虚拟内存、进程、CPU 等的整体情况进行监视。vmstat 的常规用法：vmstat interval times 即每隔 interval 秒采样一次，共采样 times 次，如果省略 times，则一直采集数据，直到用户手动停止为止。
# vmstat 5 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 2 0 1526016 161916 48016 1694424 2 14 257 73 34 90 13 7 80 0 0 4 0 1526016 159584 48044 1694552 0 0 1 108 14151 28405 17 13 70 0 0 1 0 1526016 158608 48064 1694568 0 0 1 426 14277 27948 19 12 69 0 0 4 0 1526016 157600 48072 1694576 3 0 3 19 13744 27644 18 12 69 0 0 可以使用 ctrl+c 停止 vmstat 采集数据。</description>
    </item>
    
    <item>
      <title>Fsearch的安装及使用</title>
      <link>http://wiseai.cn/post/2023.01.27-fsearch%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 27 Jan 2023 17:40:07 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.01.27-fsearch%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>简介： fsearch是一个全平台的，开源的，文件及文件夹搜索软件，它基于GTK3，用C语言编写，可以说是“Everything”的开源免费版本，速度相当快，体会一下就知道了。
今天主要说一下编译安装的方法，为什么呢？X86平台的直接去官网下载就可以了，但是arm处理器的怎么办？所以记录一下编译安装的方法，编译的版本为0.2.2,如有更新的版本，如果出现问题请查看官网编译安装说明。
编译安装的方法 安装依赖软件： # sudo apt install git build-essential meson itstool libtool pkg-config intltool libicu-dev libpcre2-dev libglib2.0-dev libgtk-3-dev libxml2-utils appstream-util 拉取源文件 # git clone https://github.com/cboxdoerfer/fsearch.git # git checkout 0.2.2 //选择编译版本 # cd fsearch 开始编译 meson builddir ninja -C builddir install 完成！</description>
    </item>
    
    <item>
      <title>Goframe开发工具gf的使用</title>
      <link>http://wiseai.cn/post/2022.12.23-goframe%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7gf%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 23 Dec 2022 15:58:20 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2022.12.23-goframe%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7gf%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>创建项目 在当前目录下初始化 # gf init .
注：后面那个&amp;quot;.&amp;ldquo;不要忘记
创建一个单独的项目 # gf init test
创建一个MonoRepo项目（大仓） # gf init bigtest -m
升级框架 # gf up -a
运行程序 # gf run main.go</description>
    </item>
    
    <item>
      <title>systemd延时启动服务</title>
      <link>http://wiseai.cn/post/2022.12.22-systemd%E5%BB%B6%E6%97%B6%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 22 Dec 2022 09:54:24 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2022.12.22-systemd%E5%BB%B6%E6%97%B6%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/</guid>
      <description>原因：我的docker容器链接了硬盘上的一个文件夹，但是docker服务在硬盘没有挂载前就启动，容器在目录下自动生成了链接文件夹，导致系统挂载的硬盘名改变，延时启动可以解决这个问题，方法如下：
编辑/lib/systemd/system/docker.service文件
[Service] #在这里添加下面两行，就可以延时5分钟启动服务 TimeoutStartSec=infinity ExecStartPre=/bin/sleep 300 参考：使用systemd配置一个服务再开机后5分钟再启动
感谢作者！ 原文如下：
原因：我们的linux服务器上可能会有许多服务要启动，如果再开机后要立即启动的服务过多，很可能会造成开机速度过慢，这时可以对不同的服务进行时间安排，有序的延迟一部分服务的启动。
这里以透传软件 frpc.service 为例。
一、单配置文件的实现模式 也就是直接对frpc.service进行配置
[Unit] Description=Frp Client Service After=network.target [Service] Type=simple User=nobody # 下面两行设定了再开机后300秒再启动服务 TimeoutStartSec=infinity ExecStartPre=/bin/sleep 300 Restart=on-failure RestartSec=5s ExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini ExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini LimitNOFILE=1048576 [Install] WantedBy=multi-user.target 二、利用额外的timer服务实现 这样做的好处是，可以额外增加一项设定，配置服务再持续运行24、48小时后重启一次，用于不关机，但需要对某个服务进行定期重启的情况。
对 frpc.service 进行修改 [Unit] Description=Frp Client Service [Service] Type=simple User=nobody Restart=on-failure RestartSec=5s ExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini ExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini LimitNOFILE=1048576 注意，这里的frpc.service 中没有 [Install] 这一部分的设置！！！ 新建一个用于启动frpc.service的timer vim /lib/systemd/system/frpc.timer [Unit] Description=timer for frpc service [Timer] OnBootSec=5min OnUnitActiveSec=24h [Install] WantedBy=timers.</description>
    </item>
    
    <item>
      <title>文件同步Syncthing的使用</title>
      <link>http://wiseai.cn/post/2022.12.21-syncthing%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 21 Dec 2022 09:46:22 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2022.12.21-syncthing%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1.下载及编译 源码下载地址：https://github.com/syncthing/syncthing
gitee镜像：https://gitee.com/mirrors/syncthing?_from=gitee_search
# go build build.go
在bin目录下会编译生成所有程序，我们主要使用syncthing这个程序
2.使用 直接运行程序
# ./syncthing
首次运行会生成配置文件，位置在~/.confing/syncthing/，配置文件主要是config.xml
同时会打开127.0.0.1：8384网站，用于配置软件。
修改config.xml中的127.0.0.1为0.0.0.0，就可以远程打开配置网站，但是不建议这么做，存在安全隐患，建议设置为固定IP，用于管理。
必须修改网站登陆密码，操作-&amp;gt;设置-&amp;gt;图形用户界面，设置用户名及密码。
操作-&amp;gt;设置-&amp;gt;连接，可设置NAT、全局发现、本地发现、中继等，在安全要求较高的情况下，建议全部不要选择。
添加文件夹，文件夹ID非常重要，共享时必须一致。
添加远程设备，设备ID在操作-&amp;gt;显示ID处查询，在不启用全局发现和本地发现的情况下，必须设置地址列表添加设备-&amp;gt;高级-&amp;gt;地址列表为tcp://ip地址:22000
设置共享，在文件夹和远程设备选项中都可以设置共享，共享文件夹可以双向同步，也可单向同步，文件夹类型只能在文件夹选项中设置。
加密，如果在共享时设置了密码，远程设备的文件夹必须为加密接收，否则会出现失去同步的问题。
解密，加密接收的文件夹可以通过
# syncthing decrypt (--to=&amp;lt;dir&amp;gt; | --verify-only) [--password=&amp;lt;pw&amp;gt;] [--folder-id=&amp;lt;id&amp;gt;] [--token-path=&amp;lt;file&amp;gt;] [--continue] [--verbose] [--version] [--help] &amp;lt;path&amp;gt;
进行解密。
主要参数有：	--to 解密位置，	--password 加密的密码，	最后的&amp;lt;path&amp;gt;是需要解密的目录
这样基本使用就没有问题了，其它功能遇到了再添加说明。</description>
    </item>
    
    <item>
      <title>Debian的包管理工具apt</title>
      <link>http://wiseai.cn/post/debian%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 06 Jul 2022 16:52:16 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/debian%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>清除所有已删除包的残余配置文件： #dpkg -l |grep ^rc|awk &#39;{print $2}&#39; |xargs dpkg -P</description>
    </item>
    
    <item>
      <title>Docker容器设置ssh连接</title>
      <link>http://wiseai.cn/post/docker%E5%AE%B9%E5%99%A8%E8%AE%BE%E7%BD%AEssh%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 06 Jul 2022 16:36:58 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/docker%E5%AE%B9%E5%99%A8%E8%AE%BE%E7%BD%AEssh%E8%BF%9E%E6%8E%A5/</guid>
      <description>这里以debian容器为例：
一、进入容器、更改更新源及安装openssh-server # docker exec -it debian /bin/bash # sed -i -e &#39;s/deb.debian.org/mirrors.aliyun.com/g&#39; \ -e &#39;s/security.debian.org/mirrors.aliyun.com/g&#39; \ /etc/apt/sources.list # apt install openssh-server 二、添加目录、修改配置文件 # mkdir -p /run/sshd 注：(这个地方看启动服务时的提示信息，运行sshd服务的命令只能使用绝对路径/usr/sbin/sshd -D)
下面修改/etc/ssh/sshd_config 先说下PermitRootLogin：prohibit-password 允许root登陆但不能使用密码登陆yes 允许root以任何方式登陆,我们这里只允许使用密钥无密码登陆： # sed -i &#39;s/#PermitRootLogin prohibit-password/PermitRootLogin prohibit-password/g&#39; /etc/ssh/sshd_config 下面修改/etc/pam.d/sshd # sed -i &#39;s/session .*required .*pam_loginuid.so/#session required pam_loginuid.so/g&#39; /etc/pam.d/sshd 注：这个是一个pam登陆控制，可以参考ftp服务器设置
三、添加ssh服务，使服务在容器打开时就启动： # sed -i &#39;$a /usr/sbin/sshd -D&#39; /etc/bash.bashrc centos容器中遇到的问题： 显示/etc/ssh/中缺少公钥和私钥：
$ ssh-keygen -t rsa -N &amp;#39;&amp;#39; -f /etc/ssh/ sh_host_rsa_key $ ssh-keygen -t ed25519 -N &amp;#39;&amp;#39; -f /etc/ssh/ssh_host_ed25519_key $ ssh-keygen -t ecdsa -N &amp;#39;&amp;#39; -f /etc/ssh/ssh_host_ecdsa_key </description>
    </item>
    
    <item>
      <title>profile、bashrc、bash_profile详解</title>
      <link>http://wiseai.cn/post/profilebashrcbash_profile%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 06 Jul 2022 16:20:56 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/profilebashrcbash_profile%E8%AF%A6%E8%A7%A3/</guid>
      <description>/etc/profile: 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.
英文描述为：
# /etc/profile # System wide environment and startup programs, for login setup # Functions and aliases [Go](http://lib.csdn.net/base/go &amp;#34;Go知识库&amp;#34;) in /etc/bashrc # It&amp;#39;s NOT a good idea to change this file unless you know what you # are doing. It&amp;#39;s much better to create a custom.sh shell script in # /etc/profile.d/ to make custom changes to your environment, as this # will prevent the need for merging in future updates.</description>
    </item>
    
    <item>
      <title>sed和awk命令</title>
      <link>http://wiseai.cn/post/sed%E5%92%8Cawk%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 06 Jul 2022 16:03:36 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/sed%E5%92%8Cawk%E5%91%BD%E4%BB%A4/</guid>
      <description># sed [-nefr] [动作]
选项与参数：
-n ：使用安静(silent)模式。在一般sed 的用法中，所有来自STDIN 的资料一般都会被列出到屏幕上。 但如果加上-n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。 -e ：直接在指令列模式上进行sed 的动作编辑； -f ：直接将sed 的动作写在一个档案内， -f filename 则可以执行filename 内的sed 动作； -r ：sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法) -i ：直接修改读取的档案内容，而不是由屏幕输出。 动作说明： [n1[,n2]]function
n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作 是需要在10 到20 行之间进行的，则『 10,20[动作行为] 』 function 有底下这些咚咚： a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ：取代， c 的后面可以接字串，这些字串可以取代n1,n2 之间的行！ d ：删除，因为是删除啊，所以d后面通常不接任何咚咚； i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ：列印，亦即将某个选择的资料印出。通常p 会与参数sed -n 一起运作～ s ：取代，可以直接进行取代的工作！通常这个s的动作可以搭配正规表示法！ 例如1,20s/old/new/g 例子：
sed &amp;#39;2,5d&amp;#39; 删除2-5行 sed &amp;#39;2a abc&amp;#39; 在第二行后添加abc sed &amp;#39;2,5c abc&amp;#39; 将2-5行替换为abc sed -n &amp;#39;2,5p&amp;#39; 打印2-5行 sed &amp;#39;s/word1/word2/g&amp;#39; 将word1替换为word2 sed -i 直接修改文档内容 # cat /etc/passwd | sed -e &#39;4d&#39; -e &#39;6c no six line&#39; &amp;gt; passwd.</description>
    </item>
    
    <item>
      <title>sftp命令</title>
      <link>http://wiseai.cn/post/sftp%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 06 Jul 2022 15:57:22 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/sftp%E5%91%BD%E4%BB%A4/</guid>
      <description>常用方式 格式：sftp &amp;lt;host&amp;gt; 通过sftp连接&amp;lt;host&amp;gt;，端口为默认的22，用户为Linux当前登录用户。 格式：sftp -oPort=&amp;lt;port&amp;gt; &amp;lt;host&amp;gt; 通过sftp连接&amp;lt;host&amp;gt;，指定端口&amp;lt;port&amp;gt;，用户为Linux当前登录用户。 格式：sftp &amp;lt;user&amp;gt;@&amp;lt;host&amp;gt; 通过sftp连接&amp;lt;host&amp;gt;，端口为默认的22，指定用户&amp;lt;user&amp;gt;。 格式：sftp -oPort=&amp;lt;port&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;host&amp;gt; 通过sftp连接&amp;lt;host&amp;gt;，端口为&amp;lt;port&amp;gt;，用户为&amp;lt;user&amp;gt;。 sftp连接成功之后常用操作命令如下：
help/? 打印帮助信息。 pwd 查看远程服务器当前目录； lpwd 查看本地系统的当前目录。 cd &amp;lt;dir&amp;gt; 将远程服务器的当前目录更改为&amp;lt;dir&amp;gt;； lcd &amp;lt;dir&amp;gt; 将本地系统的当前目录更改为&amp;lt;dir&amp;gt;。 ls 显示远程服务器上当前目录的文件名； ls -l 显示远程服务器上当前目录的文件详细列表； ls &amp;lt;pattern&amp;gt; 显示远程服务器上符合指定模式&amp;lt;pattern&amp;gt;的文件名； ls -l &amp;lt;pattern&amp;gt; 显示远程服务器上符合指定模式&amp;lt;pattern&amp;gt;的文件详细列表。 lls 显示本地系统上当前目录的文件名； lls的其他参数与ls命令的类似。 get &amp;lt;file&amp;gt; 下载指定文件&amp;lt;file&amp;gt;； -r参数操作目录 get &amp;lt;pattern&amp;gt; 下载符合指定模式&amp;lt;pattern&amp;gt;的文件。-r参数操作目录 put &amp;lt;file&amp;gt; 上传指定文件&amp;lt;file&amp;gt;；-r参数操作目录 put &amp;lt;pattern&amp;gt; 上传符合指定模式&amp;lt;pattern&amp;gt;的文件。-r参数操作目录 progress 切换是否显示文件传输进度。 mkdir &amp;lt;dir&amp;gt; 在远程服务器上创建目录； lmkdir &amp;lt;dir&amp;gt; 在本地系统上创建目录。 exit/quit/bye 退出sftp。 ! 启动一个本地shell。 ! &amp;lt;commandline&amp;gt; 执行本地命令行。 其他命令还有：chgrp, chmod, chown, ln, lumask, rename, rm, rmdir, symlink, version。</description>
    </item>
    
    <item>
      <title>ssh免密码登陆</title>
      <link>http://wiseai.cn/post/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</link>
      <pubDate>Wed, 06 Jul 2022 15:49:33 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</guid>
      <description>在client生成公钥和私钥： ＃ ssh-keygen -t rsa 注:这个命令可以参考下git的使用，rsa也没有问题。
位置在~/.ssh/下，分别是id_rsa和id_rsa.pub
将client的公钥上传到server： ＃ ssh-copy-id -p &#39;端口&#39; &#39;用户名@IP或域名&#39; 这个时候client的公钥文件内容会追加写入到server的 .ssh/authorized_keys 文件中。
登陆免密了：
＃ ssh -p &#39;端口&#39; &#39;用户名@IP或域名&#39; 打完，收功。</description>
    </item>
    
  </channel>
</rss>
