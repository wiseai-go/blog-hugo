<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>树莓派 on WiseAI的博客</title>
    <link>http://wiseai.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/</link>
    <description>Recent content in 树莓派 on WiseAI的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>陇ICP备15000157号</copyright>
    <lastBuildDate>Mon, 13 Feb 2023 14:44:41 +0800</lastBuildDate><atom:link href="http://wiseai.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>路由设置和route命令的使用</title>
      <link>http://wiseai.cn/post/2023.02.13-%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE%E5%92%8Croute%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 13 Feb 2023 14:44:41 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.02.13-%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE%E5%92%8Croute%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>命令格式： route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]] 命令功能： Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用&amp;quot;add&amp;quot;或者&amp;quot;del&amp;quot;参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。
命令参数：
-c 显示更多信息
-n 不解析名字
-v 显示详细的处理信息
-F 显示发送信息
-C 显示路由缓存
-f 清除所有网关入口的路由表。
-p 与 add 命令一起使用时使路由具有永久性。
add:添加一条新路由。
del:删除一条路由。
-net:目标地址是一个网络。
-host:目标地址是一个主机。
netmask:当添加一个网络路由时，需要使用网络掩码。
gw:路由数据包通过网关。注意，你指定的网关必须能够达到。
metric：设置路由跳数。
Command 指定您想运行的命令 (Add/Change/Delete/Print)。
Destination 指定该路由的网络目标。
mask Netmask 指定与网络目标相关的网络掩码（也被称作子网掩码）。
Gateway 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址。
metric Metric 为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用。
if Interface 为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引。
oute 命令的输出项说明:
Destination	目标网段或者主机 Gateway	网关地址，”*” 表示目标是本主机所属的网络，不需要路由 Genmask	网络掩码 Flags	标记。一些可能的标记如下： U — 路由是活动的 H — 目标是一个主机 G — 路由指向网关 R — 恢复动态路由产生的表项 D — 由路由的后台程序动态地安装 M — 由路由的后台程序修改 !</description>
    </item>
    
    <item>
      <title>Linux网卡设置</title>
      <link>http://wiseai.cn/post/2023.02.13-linux%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 13 Feb 2023 10:08:41 +0800</pubDate>
      
      <guid>http://wiseai.cn/post/2023.02.13-linux%E7%BD%91%E5%8D%A1%E8%AE%BE%E7%BD%AE/</guid>
      <description>这里主要以树莓派的网卡设置为例，其它的linux发行版都差不多。
树莓派的raspi-config工具，是设置网络最方便的，下面主要说说手动设置的方法。
有线网卡
树莓派建议一个网口设置两个ip，这样，在固定ip的网络也可以连接，在dhpc的网络也可以连接。 auto eth0 iface eth0 inet static address 192.168.1.2 netmask 255.255.255.0 gateway 192.168.1.1 auto eth0:1 iface eth0:1 inet dhcp 这个是我的配置文件，位置在/etc/network/interfaces.d/eth0，文件不存在建立一个就好.
无线网卡
iwconfig 命令查看当前无线网卡状态
iwlist wlan0 scan 扫描周围无线网卡 新建/etc/network/interfaces.d/wlan0
auto wlan0 #或者allow-hotplug iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf 生成配置文件：
# wpa_passphrase &amp;lt;yourAPssid&amp;gt; &amp;lt;yourpassphrase&amp;gt; &amp;gt;&amp;gt; /etc/wpa_supplicant/wpa_supplicant.conf 注意:&amp;quot;&amp;raquo;&amp;ldquo;是追加的意思，不要用&amp;rdquo;&amp;gt;&amp;quot;。
修改/etc/wpa_supplicant/wpa_supplicant.conf
network={ ssid=&amp;#34;&amp;lt;yourAPssid&amp;gt;&amp;#34; #psk=&amp;#34;&amp;lt;yourpassphrase&amp;gt;&amp;#34; psk=f7caf61012a3fe193ce790164b88c3648bd5fc16cd0f007c84cf154d728b4f2d } //这部分是命令生成的，psk是加密后的密码，修改后为： network={ ssid=&amp;#34;&amp;lt;yourAPssid&amp;gt;&amp;#34; proto=RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP scan_ssid=1 disabled=1 #psk=&amp;#34;&amp;lt;yourpassphrase&amp;gt;&amp;#34; psk=f7caf61012a3fe193ce790164b88c3648bd5fc16cd0f007c84cf154d728b4f2d priority=1 } ssid：无线网络名称。 proto=RSN #Robust Security Network:强健安全网络，表示这个网络配置比WEP模式要更安全。 key_mgmt=WPA-PSK #请无论你是使用WPA-PSK，WPA2-PSK，都请在这里输入 WPA-PSK。这在wpa_supplicant看来WPA-PSK，WPA2-PSK都是 WPA-PSK。企业路由是WPA-EAP。如果没有密码，需要配置为NONE pairwise=CCMP TKIP #关键点，wpa_supplicant目前还不认AES的加密标准 group=CCMP TKIP #同上 scan_ssid:如果ssid隐藏，这个参数必须配置 disabled=1:禁用这个网络 psk=7b271c9a7c8a6ac07d12403a1f0792d7d92b5957ff8dfd56481ced43ec6a6515 #wpa_supplicant算出来的加密密码。 priority:优先连接那个wifi 添加网关的方法： //添加默认网关 # route add default gw IP 具体看route命令的使用</description>
    </item>
    
    <item>
      <title>Raspberry Pi 4 boot EEPROM</title>
      <link>http://wiseai.cn/post/raspberry-pi-4-boot-eeprom/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://wiseai.cn/post/raspberry-pi-4-boot-eeprom/</guid>
      <description>Raspberry Pi 4 boot EEPROM 官方文档：https://www.raspberrypi.org/documentation/hardware/raspberrypi/booteeprom.md
升级 Updating from Raspberry Pi OS Bootloader updates are instigated during a normal apt update, apt full-upgrade cycle, this means you will get new features and bug fixes during your normal updates.
Bootloader updates are performed by rpi-eeprom-update service provided by the rpi-eeprom package. This service runs at boot and updates the bootloader at the next reboot if a new production release is available. The service automatically migrates the current boot settings to the new bootloader release.</description>
    </item>
    
    <item>
      <title>GPIO相关知识</title>
      <link>http://wiseai.cn/post/gpio%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://wiseai.cn/post/gpio%E7%9B%B8%E5%85%B3/</guid>
      <description>linux查看gpio状态 cat /sys/kernel/debug/gpio
有个blog里有这个方法，去试试：
mkdir /tmp/debug mount -t debugfs debugfs /tmp/debug cat /tmp/debug/gpio GPIO操作的一些说明 首先，看看系统中有没有“/sys/class/gpio”这个文件夹。如果没有请在编译内核的时候加入 Device Drivers-&amp;gt; GPIO Support -&amp;gt;/sys/class/gpio/… (sysfs interface)
/sys/class/gpio 的使用说明： gpio_operation 通过/sys/文件接口操作IO端口 GPIO到文件系统的映射
◇ 控制GPIO的目录位于/sys/class/gpio
◇ /sys/class/gpio/export文件用于通知系统需要导出控制的GPIO引脚编号
◇ /sys/class/gpio/unexport 用于通知系统取消导出
◇ /sys/class/gpio/gpiochipX目录保存系统中GPIO寄存器的信息，包括每个寄存器控制引脚的起始编号base，寄存器名称，引脚总数 导出一个引脚的操作步骤
◇ 首先计算此引脚编号，引脚编号 = 控制引脚的寄存器基数 + 控制引脚寄存器位数
◇ 向/sys/class/gpio/export写入此编号，比如12号引脚，在shell中可以通过以下命令实现，echo 12 &amp;gt; export命令成功后生成/sys/class/gpio/gpio12目录，如果没有出现相应的目录，说明此引脚不可导出
◇ direction文件，定义输入输入方向，可以通过下面命令定义为输出。direction接受的参数：in, out, high, low。high/low同时设置方向为输出，并将value设置为相应的1/0
◇ value文件是端口的数值，为1或0
例子： 进入/sys/class/gpio/文件夹：
将gpio7重定向用户定义设备，生成gpio7目录 # echo 7 &amp;gt; export
进入gpio7目录并查看文件 # cd gpio7
# ls
direction设置引脚方向，输入还是输出</description>
    </item>
    
  </channel>
</rss>
